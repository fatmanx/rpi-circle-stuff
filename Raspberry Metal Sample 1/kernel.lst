
kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8040:	f1020017 	cps	#23
    8044:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8048:	f102001b 	cps	#27
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea0007ad 	b	9f14 <sysinit>

0000805c <main>:
    805c:	e92d4010 	push	{r4, lr}
    8060:	e24dde8d 	sub	sp, sp, #2256	; 0x8d0
    8064:	e28d300c 	add	r3, sp, #12
    8068:	e1a00003 	mov	r0, r3
    806c:	e58d3004 	str	r3, [sp, #4]
    8070:	eb000076 	bl	8250 <CKernel::CKernel()>
    8074:	e59d0004 	ldr	r0, [sp, #4]
    8078:	eb000087 	bl	829c <CKernel::Initialize()>
    807c:	e2504000 	subs	r4, r0, #0
    8080:	0a00000d 	beq	80bc <main+0x60>
    8084:	e59d0004 	ldr	r0, [sp, #4]
    8088:	eb0000d6 	bl	83e8 <CKernel::Run()>
    808c:	e3500002 	cmp	r0, #2
    8090:	0a000006 	beq	80b0 <main+0x54>
    8094:	eb000791 	bl	9ee0 <halt>
    8098:	e3a04000 	mov	r4, #0
    809c:	e59d0004 	ldr	r0, [sp, #4]
    80a0:	eb0000ad 	bl	835c <CKernel::~CKernel()>
    80a4:	e1a00004 	mov	r0, r4
    80a8:	e28dde8d 	add	sp, sp, #2256	; 0x8d0
    80ac:	e8bd8010 	pop	{r4, pc}
    80b0:	eb00078c 	bl	9ee8 <reboot>
    80b4:	e3a04001 	mov	r4, #1
    80b8:	eafffff7 	b	809c <main+0x40>
    80bc:	eb000787 	bl	9ee0 <halt>
    80c0:	eafffff5 	b	809c <main+0x40>
    80c4:	00000000 	andeq	r0, r0, r0

000080c8 <isine(double)>:
    80c8:	ed9f6b4c 	vldr	d6, [pc, #304]	; 8200 <isine(double)+0x138>
    80cc:	ee807b06 	vdiv.f64	d7, d0, d6
    80d0:	eebd7bc7 	vcvt.s32.f64	s14, d7
    80d4:	eeb87bc7 	vcvt.f64.s32	d7, s14
    80d8:	ee070b46 	vmls.f64	d0, d7, d6
    80dc:	ee307b06 	vadd.f64	d7, d0, d6
    80e0:	ee875b06 	vdiv.f64	d5, d7, d6
    80e4:	eebd5bc5 	vcvt.s32.f64	s10, d5
    80e8:	eeb85bc5 	vcvt.f64.s32	d5, s10
    80ec:	ed9f4b45 	vldr	d4, [pc, #276]	; 8208 <isine(double)+0x140>
    80f0:	ee057b46 	vmls.f64	d7, d5, d6
    80f4:	ed9f5b45 	vldr	d5, [pc, #276]	; 8210 <isine(double)+0x148>
    80f8:	eeb47bc4 	vcmpe.f64	d7, d4
    80fc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8100:	eeb47bc5 	vcmpe.f64	d7, d5
    8104:	c3a03001 	movgt	r3, #1
    8108:	d3a03000 	movle	r3, #0
    810c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8110:	83a03000 	movhi	r3, #0
    8114:	92033001 	andls	r3, r3, #1
    8118:	e3530000 	cmp	r3, #0
    811c:	1e357b47 	vsubne.f64	d7, d5, d7
    8120:	13a02001 	movne	r2, #1
    8124:	1a00000c 	bne	815c <isine(double)+0x94>
    8128:	eeb47bc5 	vcmpe.f64	d7, d5
    812c:	ed9f3b39 	vldr	d3, [pc, #228]	; 8218 <isine(double)+0x150>
    8130:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8134:	eeb47bc3 	vcmpe.f64	d7, d3
    8138:	c3a03001 	movgt	r3, #1
    813c:	d3a03000 	movle	r3, #0
    8140:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8144:	83a03000 	movhi	r3, #0
    8148:	92033001 	andls	r3, r3, #1
    814c:	e3530000 	cmp	r3, #0
    8150:	1e377b45 	vsubne.f64	d7, d7, d5
    8154:	13e02000 	mvnne	r2, #0
    8158:	0a000017 	beq	81bc <isine(double)+0xf4>
    815c:	ed9f5b2f 	vldr	d5, [pc, #188]	; 8220 <isine(double)+0x158>
    8160:	ee876b05 	vdiv.f64	d6, d7, d5
    8164:	eefd6bc6 	vcvt.s32.f64	s13, d6
    8168:	ee163a90 	vmov	r3, s13
    816c:	e59f10bc 	ldr	r1, [pc, #188]	; 8230 <isine(double)+0x168>
    8170:	e1530001 	cmp	r3, r1
    8174:	0a00001e 	beq	81f4 <isine(double)+0x12c>
    8178:	ca00000d 	bgt	81b4 <isine(double)+0xec>
    817c:	e59f10b0 	ldr	r1, [pc, #176]	; 8234 <isine(double)+0x16c>
    8180:	e283c001 	add	ip, r3, #1
    8184:	e0810183 	add	r0, r1, r3, lsl #3
    8188:	e081118c 	add	r1, r1, ip, lsl #3
    818c:	ed900b00 	vldr	d0, [r0]
    8190:	eeb86be6 	vcvt.f64.s32	d6, s13
    8194:	ed914b00 	vldr	d4, [r1]
    8198:	ee067b45 	vmls.f64	d7, d6, d5
    819c:	ee344b40 	vsub.f64	d4, d4, d0
    81a0:	ee062a90 	vmov	s13, r2
    81a4:	ee040b07 	vmla.f64	d0, d4, d7
    81a8:	eeb86be6 	vcvt.f64.s32	d6, s13
    81ac:	ee260b00 	vmul.f64	d0, d6, d0
    81b0:	e12fff1e 	bx	lr
    81b4:	ed9f0b1b 	vldr	d0, [pc, #108]	; 8228 <isine(double)+0x160>
    81b8:	e12fff1e 	bx	lr
    81bc:	eeb47bc3 	vcmpe.f64	d7, d3
    81c0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    81c4:	eeb47bc6 	vcmpe.f64	d7, d6
    81c8:	c3a03001 	movgt	r3, #1
    81cc:	d3a03000 	movle	r3, #0
    81d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    81d4:	53a03000 	movpl	r3, #0
    81d8:	42033001 	andmi	r3, r3, #1
    81dc:	e3530000 	cmp	r3, #0
    81e0:	1e377b43 	vsubne.f64	d7, d7, d3
    81e4:	13e02000 	mvnne	r2, #0
    81e8:	1e347b47 	vsubne.f64	d7, d4, d7
    81ec:	03a02001 	moveq	r2, #1
    81f0:	eaffffd9 	b	815c <isine(double)+0x94>
    81f4:	e59f303c 	ldr	r3, [pc, #60]	; 8238 <isine(double)+0x170>
    81f8:	ed930b00 	vldr	d0, [r3]
    81fc:	e12fff1e 	bx	lr
    8200:	54442eea 	.word	0x54442eea
    8204:	401921fb 	.word	0x401921fb
    8208:	5443d6f4 	.word	0x5443d6f4
    820c:	3ff921fb 	.word	0x3ff921fb
    8210:	54442eea 	.word	0x54442eea
    8214:	400921fb 	.word	0x400921fb
    8218:	7f330d32 	.word	0x7f330d32
    821c:	4012d97c 	.word	0x4012d97c
    8220:	47ae147b 	.word	0x47ae147b
    8224:	3f747ae1 	.word	0x3f747ae1
	...
    8230:	0000013a 	.word	0x0000013a
    8234:	00011d30 	.word	0x00011d30
    8238:	00012700 	.word	0x00012700

0000823c <icosine(double)>:
    823c:	ed9f7b01 	vldr	d7, [pc, #4]	; 8248 <icosine(double)+0xc>
    8240:	ee370b40 	vsub.f64	d0, d7, d0
    8244:	eaffff9f 	b	80c8 <isine(double)>
    8248:	5443d6f4 	.word	0x5443d6f4
    824c:	3ff921fb 	.word	0x3ff921fb

00008250 <CKernel::CKernel()>:
    8250:	e92d4010 	push	{r4, lr}
    8254:	e1a04000 	mov	r4, r0
    8258:	e3a01001 	mov	r1, #1
    825c:	eb0006a1 	bl	9ce8 <CMemorySystem::CMemorySystem(int)>
    8260:	e2840010 	add	r0, r4, #16
    8264:	eb0001a2 	bl	88f4 <CActLED::CActLED()>
    8268:	e284001c 	add	r0, r4, #28
    826c:	eb000bf9 	bl	b258 <CKernelOptions::CKernelOptions()>
    8270:	e2840e85 	add	r0, r4, #2128	; 0x850
    8274:	e280000c 	add	r0, r0, #12
    8278:	eb0012bd 	bl	cd74 <CDeviceNameService::CDeviceNameService()>
    827c:	e2840e86 	add	r0, r4, #2144	; 0x860
    8280:	e3a01d05 	mov	r1, #320	; 0x140
    8284:	e3a020c8 	mov	r2, #200	; 0xc8
    8288:	e3a03000 	mov	r3, #0
    828c:	e2800004 	add	r0, r0, #4
    8290:	eb0011f6 	bl	ca70 <CScreenDeviceExt::CScreenDeviceExt(unsigned int, unsigned int, int)>
    8294:	e1a00004 	mov	r0, r4
    8298:	e8bd8010 	pop	{r4, pc}

0000829c <CKernel::Initialize()>:
    829c:	e2800e86 	add	r0, r0, #2144	; 0x860
    82a0:	e2800004 	add	r0, r0, #4
    82a4:	ea000fbe 	b	c1a4 <CScreenDevice::Initialize()>

000082a8 <fact(int)>:
    82a8:	e2503000 	subs	r3, r0, #0
    82ac:	e3a00001 	mov	r0, #1
    82b0:	0a000003 	beq	82c4 <fact(int)+0x1c>
    82b4:	e0000093 	mul	r0, r3, r0
    82b8:	e2533001 	subs	r3, r3, #1
    82bc:	1afffffc 	bne	82b4 <fact(int)+0xc>
    82c0:	e12fff1e 	bx	lr
    82c4:	e12fff1e 	bx	lr

000082c8 <pow(float, int)>:
    82c8:	e3500000 	cmp	r0, #0
    82cc:	eddf7a07 	vldr	s15, [pc, #28]	; 82f0 <pow(float, int)+0x28>
    82d0:	e2400001 	sub	r0, r0, #1
    82d4:	da000003 	ble	82e8 <pow(float, int)+0x20>
    82d8:	e2400001 	sub	r0, r0, #1
    82dc:	e3700001 	cmn	r0, #1
    82e0:	ee677a80 	vmul.f32	s15, s15, s0
    82e4:	1afffffb 	bne	82d8 <pow(float, int)+0x10>
    82e8:	eeb00a67 	vmov.f32	s0, s15
    82ec:	e12fff1e 	bx	lr
    82f0:	3f800000 	.word	0x3f800000

000082f4 <sine(float)>:
    82f4:	e3a01001 	mov	r1, #1
    82f8:	eef06a40 	vmov.f32	s13, s0
    82fc:	e1a00001 	mov	r0, r1
    8300:	eddf7a14 	vldr	s15, [pc, #80]	; 8358 <sine(float)+0x64>
    8304:	e2600000 	rsb	r0, r0, #0
    8308:	e2413001 	sub	r3, r1, #1
    830c:	e2433001 	sub	r3, r3, #1
    8310:	e3730001 	cmn	r3, #1
    8314:	ee677aa6 	vmul.f32	s15, s15, s13
    8318:	1afffffb 	bne	830c <sine(float)+0x18>
    831c:	e1a03001 	mov	r3, r1
    8320:	e3a02001 	mov	r2, #1
    8324:	e0020293 	mul	r2, r3, r2
    8328:	e2533001 	subs	r3, r3, #1
    832c:	1afffffc 	bne	8324 <sine(float)+0x30>
    8330:	ee072a10 	vmov	s14, r2
    8334:	eeb87ac7 	vcvt.f32.s32	s14, s14
    8338:	eec77a87 	vdiv.f32	s15, s15, s14
    833c:	ee070a10 	vmov	s14, r0
    8340:	eeb87ac7 	vcvt.f32.s32	s14, s14
    8344:	e2811001 	add	r1, r1, #1
    8348:	e3510006 	cmp	r1, #6
    834c:	ee070a87 	vmla.f32	s0, s15, s14
    8350:	1affffea 	bne	8300 <sine(float)+0xc>
    8354:	e12fff1e 	bx	lr
    8358:	3f800000 	.word	0x3f800000

0000835c <CKernel::~CKernel()>:
    835c:	e92d4010 	push	{r4, lr}
    8360:	e1a04000 	mov	r4, r0
    8364:	e2800e86 	add	r0, r0, #2144	; 0x860
    8368:	e2800004 	add	r0, r0, #4
    836c:	eb0011ad 	bl	ca28 <CScreenDeviceExt::~CScreenDeviceExt()>
    8370:	e2840e85 	add	r0, r4, #2128	; 0x850
    8374:	e280000c 	add	r0, r0, #12
    8378:	eb001290 	bl	cdc0 <CDeviceNameService::~CDeviceNameService()>
    837c:	e284001c 	add	r0, r4, #28
    8380:	eb000b7d 	bl	b17c <CKernelOptions::~CKernelOptions()>
    8384:	e2840010 	add	r0, r4, #16
    8388:	eb000134 	bl	8860 <CActLED::~CActLED()>
    838c:	e1a00004 	mov	r0, r4
    8390:	eb0005a9 	bl	9a3c <CMemorySystem::~CMemorySystem()>
    8394:	e1a00004 	mov	r0, r4
    8398:	e8bd8010 	pop	{r4, pc}

0000839c <CKernel::writeln(CString)>:
    839c:	e92d4070 	push	{r4, r5, r6, lr}
    83a0:	e2804e86 	add	r4, r0, #2144	; 0x860
    83a4:	e1a00001 	mov	r0, r1
    83a8:	e1a05001 	mov	r5, r1
    83ac:	eb00147d 	bl	d5a8 <CString::operator char const*() const>
    83b0:	e1a06000 	mov	r6, r0
    83b4:	e1a00005 	mov	r0, r5
    83b8:	eb001491 	bl	d604 <CString::GetLength() const>
    83bc:	e2844004 	add	r4, r4, #4
    83c0:	e1a02000 	mov	r2, r0
    83c4:	e1a01006 	mov	r1, r6
    83c8:	e1a00004 	mov	r0, r4
    83cc:	eb00112f 	bl	c890 <CScreenDevice::Write(void const*, unsigned int)>
    83d0:	e1a00004 	mov	r0, r4
    83d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    83d8:	e59f1004 	ldr	r1, [pc, #4]	; 83e4 <CKernel::writeln(CString)+0x48>
    83dc:	e3a02001 	mov	r2, #1
    83e0:	ea00112a 	b	c890 <CScreenDevice::Write(void const*, unsigned int)>
    83e4:	0000ffc8 	.word	0x0000ffc8

000083e8 <CKernel::Run()>:
    83e8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    83ec:	ed2d8b10 	vpush	{d8-d15}
    83f0:	e1a08000 	mov	r8, r0
    83f4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    83f8:	e28d0008 	add	r0, sp, #8
    83fc:	eb001453 	bl	d550 <CString::CString()>
    8400:	e28d0008 	add	r0, sp, #8
    8404:	e59f23fc 	ldr	r2, [pc, #1020]	; 8808 <CKernel::Run()+0x420>
    8408:	e59f33fc 	ldr	r3, [pc, #1020]	; 880c <CKernel::Run()+0x424>
    840c:	e59f13fc 	ldr	r1, [pc, #1020]	; 8810 <CKernel::Run()+0x428>
    8410:	eb0016be 	bl	df10 <CString::Format(char const*, ...)>
    8414:	e59f43f8 	ldr	r4, [pc, #1016]	; 8814 <CKernel::Run()+0x42c>
    8418:	e59dc00c 	ldr	ip, [sp, #12]
    841c:	e59d2010 	ldr	r2, [sp, #16]
    8420:	e59d3014 	ldr	r3, [sp, #20]
    8424:	e28d1018 	add	r1, sp, #24
    8428:	e1a00008 	mov	r0, r8
    842c:	e58dc01c 	str	ip, [sp, #28]
    8430:	e58d2020 	str	r2, [sp, #32]
    8434:	e58d3024 	str	r3, [sp, #36]	; 0x24
    8438:	e58d4018 	str	r4, [sp, #24]
    843c:	ebffffd6 	bl	839c <CKernel::writeln(CString)>
    8440:	e28d0018 	add	r0, sp, #24
    8444:	eb00140d 	bl	d480 <CString::~CString()>
    8448:	ed9f0bd0 	vldr	d0, [pc, #832]	; 8790 <CKernel::Run()+0x3a8>
    844c:	ebffff1d 	bl	80c8 <isine(double)>
    8450:	e28d0008 	add	r0, sp, #8
    8454:	ec532b10 	vmov	r2, r3, d0
    8458:	e59f13b0 	ldr	r1, [pc, #944]	; 8810 <CKernel::Run()+0x428>
    845c:	eb0016ab 	bl	df10 <CString::Format(char const*, ...)>
    8460:	e59dc00c 	ldr	ip, [sp, #12]
    8464:	e59d3014 	ldr	r3, [sp, #20]
    8468:	e59d2010 	ldr	r2, [sp, #16]
    846c:	e28d1018 	add	r1, sp, #24
    8470:	e1a00008 	mov	r0, r8
    8474:	e58dc01c 	str	ip, [sp, #28]
    8478:	e58d3024 	str	r3, [sp, #36]	; 0x24
    847c:	e58d2020 	str	r2, [sp, #32]
    8480:	e58d4018 	str	r4, [sp, #24]
    8484:	ebffffc4 	bl	839c <CKernel::writeln(CString)>
    8488:	e28d0018 	add	r0, sp, #24
    848c:	eb0013fb 	bl	d480 <CString::~CString()>
    8490:	ed9f0bc0 	vldr	d0, [pc, #768]	; 8798 <CKernel::Run()+0x3b0>
    8494:	ebffff0b 	bl	80c8 <isine(double)>
    8498:	e28d0008 	add	r0, sp, #8
    849c:	ed8d0b00 	vstr	d0, [sp]
    84a0:	e59f1370 	ldr	r1, [pc, #880]	; 8818 <CKernel::Run()+0x430>
    84a4:	e3a02000 	mov	r2, #0
    84a8:	eb001698 	bl	df10 <CString::Format(char const*, ...)>
    84ac:	e59dc00c 	ldr	ip, [sp, #12]
    84b0:	e59d2010 	ldr	r2, [sp, #16]
    84b4:	e59d3014 	ldr	r3, [sp, #20]
    84b8:	e28d1018 	add	r1, sp, #24
    84bc:	e1a00008 	mov	r0, r8
    84c0:	e58dc01c 	str	ip, [sp, #28]
    84c4:	e58d2020 	str	r2, [sp, #32]
    84c8:	e58d3024 	str	r3, [sp, #36]	; 0x24
    84cc:	e58d4018 	str	r4, [sp, #24]
    84d0:	ebffffb1 	bl	839c <CKernel::writeln(CString)>
    84d4:	e28d0018 	add	r0, sp, #24
    84d8:	eb0013e8 	bl	d480 <CString::~CString()>
    84dc:	ed9f0baf 	vldr	d0, [pc, #700]	; 87a0 <CKernel::Run()+0x3b8>
    84e0:	ebfffef8 	bl	80c8 <isine(double)>
    84e4:	e59f2330 	ldr	r2, [pc, #816]	; 881c <CKernel::Run()+0x434>
    84e8:	ed8d0b00 	vstr	d0, [sp]
    84ec:	e59f332c 	ldr	r3, [pc, #812]	; 8820 <CKernel::Run()+0x438>
    84f0:	e28d0008 	add	r0, sp, #8
    84f4:	e59f1328 	ldr	r1, [pc, #808]	; 8824 <CKernel::Run()+0x43c>
    84f8:	eb001684 	bl	df10 <CString::Format(char const*, ...)>
    84fc:	e59dc00c 	ldr	ip, [sp, #12]
    8500:	e59d2010 	ldr	r2, [sp, #16]
    8504:	e59d3014 	ldr	r3, [sp, #20]
    8508:	e28d1018 	add	r1, sp, #24
    850c:	e1a00008 	mov	r0, r8
    8510:	e58dc01c 	str	ip, [sp, #28]
    8514:	e58d2020 	str	r2, [sp, #32]
    8518:	e58d3024 	str	r3, [sp, #36]	; 0x24
    851c:	e58d4018 	str	r4, [sp, #24]
    8520:	ebffff9d 	bl	839c <CKernel::writeln(CString)>
    8524:	e28d0018 	add	r0, sp, #24
    8528:	eb0013d4 	bl	d480 <CString::~CString()>
    852c:	ed9f0b9d 	vldr	d0, [pc, #628]	; 87a8 <CKernel::Run()+0x3c0>
    8530:	ebfffee4 	bl	80c8 <isine(double)>
    8534:	e59f22ec 	ldr	r2, [pc, #748]	; 8828 <CKernel::Run()+0x440>
    8538:	ed8d0b00 	vstr	d0, [sp]
    853c:	e59f32e8 	ldr	r3, [pc, #744]	; 882c <CKernel::Run()+0x444>
    8540:	e28d0008 	add	r0, sp, #8
    8544:	e59f12e4 	ldr	r1, [pc, #740]	; 8830 <CKernel::Run()+0x448>
    8548:	eb001670 	bl	df10 <CString::Format(char const*, ...)>
    854c:	e59dc00c 	ldr	ip, [sp, #12]
    8550:	e59d2010 	ldr	r2, [sp, #16]
    8554:	e59d3014 	ldr	r3, [sp, #20]
    8558:	e28d1018 	add	r1, sp, #24
    855c:	e1a00008 	mov	r0, r8
    8560:	e58dc01c 	str	ip, [sp, #28]
    8564:	e58d2020 	str	r2, [sp, #32]
    8568:	e58d3024 	str	r3, [sp, #36]	; 0x24
    856c:	e58d4018 	str	r4, [sp, #24]
    8570:	ebffff89 	bl	839c <CKernel::writeln(CString)>
    8574:	e28d0018 	add	r0, sp, #24
    8578:	eb0013c0 	bl	d480 <CString::~CString()>
    857c:	ed9f0b8b 	vldr	d0, [pc, #556]	; 87b0 <CKernel::Run()+0x3c8>
    8580:	ebfffed0 	bl	80c8 <isine(double)>
    8584:	e59f2290 	ldr	r2, [pc, #656]	; 881c <CKernel::Run()+0x434>
    8588:	ed8d0b00 	vstr	d0, [sp]
    858c:	e59f32a0 	ldr	r3, [pc, #672]	; 8834 <CKernel::Run()+0x44c>
    8590:	e28d0008 	add	r0, sp, #8
    8594:	e59f129c 	ldr	r1, [pc, #668]	; 8838 <CKernel::Run()+0x450>
    8598:	eb00165c 	bl	df10 <CString::Format(char const*, ...)>
    859c:	e59dc00c 	ldr	ip, [sp, #12]
    85a0:	e59d2010 	ldr	r2, [sp, #16]
    85a4:	e59d3014 	ldr	r3, [sp, #20]
    85a8:	e28d1018 	add	r1, sp, #24
    85ac:	e1a00008 	mov	r0, r8
    85b0:	e58dc01c 	str	ip, [sp, #28]
    85b4:	e58d2020 	str	r2, [sp, #32]
    85b8:	e58d3024 	str	r3, [sp, #36]	; 0x24
    85bc:	e58d4018 	str	r4, [sp, #24]
    85c0:	ebffff75 	bl	839c <CKernel::writeln(CString)>
    85c4:	e28d0018 	add	r0, sp, #24
    85c8:	eb0013ac 	bl	d480 <CString::~CString()>
    85cc:	ed9f0b79 	vldr	d0, [pc, #484]	; 87b8 <CKernel::Run()+0x3d0>
    85d0:	ebfffebc 	bl	80c8 <isine(double)>
    85d4:	e59f2260 	ldr	r2, [pc, #608]	; 883c <CKernel::Run()+0x454>
    85d8:	ed8d0b00 	vstr	d0, [sp]
    85dc:	e59f325c 	ldr	r3, [pc, #604]	; 8840 <CKernel::Run()+0x458>
    85e0:	e28d0008 	add	r0, sp, #8
    85e4:	e59f1258 	ldr	r1, [pc, #600]	; 8844 <CKernel::Run()+0x45c>
    85e8:	eb001648 	bl	df10 <CString::Format(char const*, ...)>
    85ec:	e59dc00c 	ldr	ip, [sp, #12]
    85f0:	e59d2010 	ldr	r2, [sp, #16]
    85f4:	e59d3014 	ldr	r3, [sp, #20]
    85f8:	e28d1018 	add	r1, sp, #24
    85fc:	e1a00008 	mov	r0, r8
    8600:	e58dc01c 	str	ip, [sp, #28]
    8604:	e58d2020 	str	r2, [sp, #32]
    8608:	e58d3024 	str	r3, [sp, #36]	; 0x24
    860c:	e58d4018 	str	r4, [sp, #24]
    8610:	ebffff61 	bl	839c <CKernel::writeln(CString)>
    8614:	e28d0018 	add	r0, sp, #24
    8618:	eb001398 	bl	d480 <CString::~CString()>
    861c:	ed9f0b67 	vldr	d0, [pc, #412]	; 87c0 <CKernel::Run()+0x3d8>
    8620:	ebfffea8 	bl	80c8 <isine(double)>
    8624:	e59f21fc 	ldr	r2, [pc, #508]	; 8828 <CKernel::Run()+0x440>
    8628:	ed8d0b00 	vstr	d0, [sp]
    862c:	e59f3214 	ldr	r3, [pc, #532]	; 8848 <CKernel::Run()+0x460>
    8630:	e28d0008 	add	r0, sp, #8
    8634:	e59f1210 	ldr	r1, [pc, #528]	; 884c <CKernel::Run()+0x464>
    8638:	eb001634 	bl	df10 <CString::Format(char const*, ...)>
    863c:	e59dc00c 	ldr	ip, [sp, #12]
    8640:	e59d2010 	ldr	r2, [sp, #16]
    8644:	e59d3014 	ldr	r3, [sp, #20]
    8648:	e1a00008 	mov	r0, r8
    864c:	e28d1018 	add	r1, sp, #24
    8650:	e58dc01c 	str	ip, [sp, #28]
    8654:	e58d2020 	str	r2, [sp, #32]
    8658:	e58d3024 	str	r3, [sp, #36]	; 0x24
    865c:	e58d4018 	str	r4, [sp, #24]
    8660:	ebffff4d 	bl	839c <CKernel::writeln(CString)>
    8664:	e28d0018 	add	r0, sp, #24
    8668:	e3a06000 	mov	r6, #0
    866c:	eb001383 	bl	d480 <CString::~CString()>
    8670:	e2885e86 	add	r5, r8, #2144	; 0x860
    8674:	e2855004 	add	r5, r5, #4
    8678:	e1a01006 	mov	r1, r6
    867c:	e1a00005 	mov	r0, r5
    8680:	e3a02064 	mov	r2, #100	; 0x64
    8684:	e2866001 	add	r6, r6, #1
    8688:	e59f31c0 	ldr	r3, [pc, #448]	; 8850 <CKernel::Run()+0x468>
    868c:	eb0010b5 	bl	c968 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8690:	e3560f96 	cmp	r6, #600	; 0x258
    8694:	1afffff7 	bne	8678 <CKernel::Run()+0x290>
    8698:	ed9fdb3e 	vldr	d13, [pc, #248]	; 8798 <CKernel::Run()+0x3b0>
    869c:	ed9f8b49 	vldr	d8, [pc, #292]	; 87c8 <CKernel::Run()+0x3e0>
    86a0:	ed9fbb4a 	vldr	d11, [pc, #296]	; 87d0 <CKernel::Run()+0x3e8>
    86a4:	ed9fcb4b 	vldr	d12, [pc, #300]	; 87d8 <CKernel::Run()+0x3f0>
    86a8:	ed9fab4c 	vldr	d10, [pc, #304]	; 87e0 <CKernel::Run()+0x3f8>
    86ac:	ed9f9b4d 	vldr	d9, [pc, #308]	; 87e8 <CKernel::Run()+0x400>
    86b0:	ed9feb4e 	vldr	d14, [pc, #312]	; 87f0 <CKernel::Run()+0x408>
    86b4:	e59f7198 	ldr	r7, [pc, #408]	; 8854 <CKernel::Run()+0x46c>
    86b8:	e59f0194 	ldr	r0, [pc, #404]	; 8854 <CKernel::Run()+0x46c>
    86bc:	e3a01000 	mov	r1, #0
    86c0:	e3a02b7d 	mov	r2, #128000	; 0x1f400
    86c4:	eb000932 	bl	ab94 <memset>
    86c8:	eeb48bcb 	vcmpe.f64	d8, d11
    86cc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    86d0:	5a00000d 	bpl	870c <CKernel::Run()+0x324>
    86d4:	ee388b0c 	vadd.f64	d8, d8, d12
    86d8:	ee287b09 	vmul.f64	d7, d8, d9
    86dc:	ee286b0a 	vmul.f64	d6, d8, d10
    86e0:	eefd7bc7 	vcvt.s32.f64	s15, d7
    86e4:	ee172a90 	vmov	r2, s15
    86e8:	eefc7bc6 	vcvt.u32.f64	s15, d6
    86ec:	e2822064 	add	r2, r2, #100	; 0x64
    86f0:	ee171a90 	vmov	r1, s15
    86f4:	e1a00005 	mov	r0, r5
    86f8:	e59f3150 	ldr	r3, [pc, #336]	; 8850 <CKernel::Run()+0x468>
    86fc:	eb001099 	bl	c968 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8700:	eeb48bcb 	vcmpe.f64	d8, d11
    8704:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8708:	4afffff1 	bmi	86d4 <CKernel::Run()+0x2ec>
    870c:	ed9f8b39 	vldr	d8, [pc, #228]	; 87f8 <CKernel::Run()+0x410>
    8710:	e3a09b3e 	mov	r9, #63488	; 0xf800
    8714:	ed9ffb39 	vldr	d15, [pc, #228]	; 8800 <CKernel::Run()+0x418>
    8718:	e59f6138 	ldr	r6, [pc, #312]	; 8858 <CKernel::Run()+0x470>
    871c:	ee388b0e 	vadd.f64	d8, d8, d14
    8720:	eeb07b4a 	vmov.f64	d7, d10
    8724:	ee087b09 	vmla.f64	d7, d8, d9
    8728:	eefd7bc7 	vcvt.s32.f64	s15, d7
    872c:	ee174a90 	vmov	r4, s15
    8730:	ee380b0d 	vadd.f64	d0, d8, d13
    8734:	ebfffe63 	bl	80c8 <isine(double)>
    8738:	e2443001 	sub	r3, r4, #1
    873c:	e1530006 	cmp	r3, r6
    8740:	eeb48bcf 	vcmpe.f64	d8, d15
    8744:	8a000009 	bhi	8770 <CKernel::Run()+0x388>
    8748:	ee200b09 	vmul.f64	d0, d0, d9
    874c:	eefd7bc0 	vcvt.s32.f64	s15, d0
    8750:	ee173a90 	vmov	r3, s15
    8754:	e2832063 	add	r2, r3, #99	; 0x63
    8758:	e35200c6 	cmp	r2, #198	; 0xc6
    875c:	e2833064 	add	r3, r3, #100	; 0x64
    8760:	90833103 	addls	r3, r3, r3, lsl #2
    8764:	90843303 	addls	r3, r4, r3, lsl #6
    8768:	91a03083 	lslls	r3, r3, #1
    876c:	918790b3 	strhls	r9, [r7, r3]
    8770:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8774:	4affffe8 	bmi	871c <CKernel::Run()+0x334>
    8778:	e5980868 	ldr	r0, [r8, #2152]	; 0x868
    877c:	e59f10d0 	ldr	r1, [pc, #208]	; 8854 <CKernel::Run()+0x46c>
    8780:	e3a02b7d 	mov	r2, #128000	; 0x1f400
    8784:	eb000a4c 	bl	b0bc <memcpy>
    8788:	ee3ddb0e 	vadd.f64	d13, d13, d14
    878c:	eaffffc9 	b	86b8 <CKernel::Run()+0x2d0>
    8790:	00000000 	.word	0x00000000
    8794:	3ff00000 	.word	0x3ff00000
	...
    87a0:	54442eea 	.word	0x54442eea
    87a4:	3ff921fb 	.word	0x3ff921fb
    87a8:	382d749c 	.word	0x382d749c
    87ac:	3ff0c152 	.word	0x3ff0c152
    87b0:	54442eea 	.word	0x54442eea
    87b4:	3fe921fb 	.word	0x3fe921fb
    87b8:	769cf255 	.word	0x769cf255
    87bc:	3fe41b2f 	.word	0x3fe41b2f
    87c0:	382d749c 	.word	0x382d749c
    87c4:	3fe0c152 	.word	0x3fe0c152
    87c8:	54442eea 	.word	0x54442eea
    87cc:	c00921fb 	.word	0xc00921fb
    87d0:	54442eea 	.word	0x54442eea
    87d4:	401921fb 	.word	0x401921fb
    87d8:	40000000 	.word	0x40000000
    87dc:	3f847ae1 	.word	0x3f847ae1
    87e0:	00000000 	.word	0x00000000
    87e4:	40590000 	.word	0x40590000
    87e8:	00000000 	.word	0x00000000
    87ec:	40490000 	.word	0x40490000
    87f0:	47ae147b 	.word	0x47ae147b
    87f4:	3f847ae1 	.word	0x3f847ae1
    87f8:	72fc80d6 	.word	0x72fc80d6
    87fc:	c0090d80 	.word	0xc0090d80
    8800:	54442eea 	.word	0x54442eea
    8804:	402921fb 	.word	0x402921fb
    8808:	9999999a 	.word	0x9999999a
    880c:	3fb99999 	.word	0x3fb99999
    8810:	0000ffcc 	.word	0x0000ffcc
    8814:	00011640 	.word	0x00011640
    8818:	0000ffd4 	.word	0x0000ffd4
    881c:	54442eea 	.word	0x54442eea
    8820:	3ff921fb 	.word	0x3ff921fb
    8824:	0000ffe0 	.word	0x0000ffe0
    8828:	382d749c 	.word	0x382d749c
    882c:	3ff0c152 	.word	0x3ff0c152
    8830:	0000ffec 	.word	0x0000ffec
    8834:	3fe921fb 	.word	0x3fe921fb
    8838:	0000fff8 	.word	0x0000fff8
    883c:	769cf255 	.word	0x769cf255
    8840:	3fe41b2f 	.word	0x3fe41b2f
    8844:	00010004 	.word	0x00010004
    8848:	3fe0c152 	.word	0x3fe0c152
    884c:	00010010 	.word	0x00010010
    8850:	0000ffdf 	.word	0x0000ffdf
    8854:	000127f0 	.word	0x000127f0
    8858:	0000013e 	.word	0x0000013e
    885c:	e1a00000 	nop			; (mov r0, r0)

00008860 <CActLED::~CActLED()>:
    8860:	e3a02000 	mov	r2, #0
    8864:	e59f3004 	ldr	r3, [pc, #4]	; 8870 <CActLED::~CActLED()+0x10>
    8868:	e5832000 	str	r2, [r3]
    886c:	e12fff1e 	bx	lr
    8870:	00050ff0 	.word	0x00050ff0

00008874 <CActLED::On()>:
    8874:	e5903000 	ldr	r3, [r0]
    8878:	e3530000 	cmp	r3, #0
    887c:	0a000004 	beq	8894 <CActLED::On()+0x20>
    8880:	e5901008 	ldr	r1, [r0, #8]
    8884:	e1a00003 	mov	r0, r3
    8888:	e2911000 	adds	r1, r1, #0
    888c:	13a01001 	movne	r1, #1
    8890:	ea0000f0 	b	8c58 <CGPIOPin::Write(unsigned int)>
    8894:	e5903004 	ldr	r3, [r0, #4]
    8898:	e3530000 	cmp	r3, #0
    889c:	012fff1e 	bxeq	lr
    88a0:	e5901008 	ldr	r1, [r0, #8]
    88a4:	e1a00003 	mov	r0, r3
    88a8:	e2911000 	adds	r1, r1, #0
    88ac:	13a01001 	movne	r1, #1
    88b0:	ea00178e 	b	e6f0 <CVirtualGPIOPin::Write(unsigned int)>

000088b4 <CActLED::Off()>:
    88b4:	e5903000 	ldr	r3, [r0]
    88b8:	e3530000 	cmp	r3, #0
    88bc:	0a000004 	beq	88d4 <CActLED::Off()+0x20>
    88c0:	e5901008 	ldr	r1, [r0, #8]
    88c4:	e1a00003 	mov	r0, r3
    88c8:	e16f1f11 	clz	r1, r1
    88cc:	e1a012a1 	lsr	r1, r1, #5
    88d0:	ea0000e0 	b	8c58 <CGPIOPin::Write(unsigned int)>
    88d4:	e5903004 	ldr	r3, [r0, #4]
    88d8:	e3530000 	cmp	r3, #0
    88dc:	012fff1e 	bxeq	lr
    88e0:	e5901008 	ldr	r1, [r0, #8]
    88e4:	e1a00003 	mov	r0, r3
    88e8:	e16f1f11 	clz	r1, r1
    88ec:	e1a012a1 	lsr	r1, r1, #5
    88f0:	ea00177e 	b	e6f0 <CVirtualGPIOPin::Write(unsigned int)>

000088f4 <CActLED::CActLED()>:
    88f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    88f8:	e3a05000 	mov	r5, #0
    88fc:	e1a04000 	mov	r4, r0
    8900:	e24dd024 	sub	sp, sp, #36	; 0x24
    8904:	e59f3100 	ldr	r3, [pc, #256]	; 8a0c <CActLED::CActLED()+0x118>
    8908:	e5805000 	str	r5, [r0]
    890c:	e5805004 	str	r5, [r0, #4]
    8910:	e28d0008 	add	r0, sp, #8
    8914:	e5834000 	str	r4, [r3]
    8918:	eb000055 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    891c:	e58d5000 	str	r5, [sp]
    8920:	e28d0008 	add	r0, sp, #8
    8924:	e59f10e4 	ldr	r1, [pc, #228]	; 8a10 <CActLED::CActLED()+0x11c>
    8928:	e28d2010 	add	r2, sp, #16
    892c:	e3a03010 	mov	r3, #16
    8930:	eb000097 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8934:	e1500005 	cmp	r0, r5
    8938:	0a000011 	beq	8984 <CActLED::CActLED()+0x90>
    893c:	e59d301c 	ldr	r3, [sp, #28]
    8940:	e3130502 	tst	r3, #8388608	; 0x800000
    8944:	1a000013 	bne	8998 <CActLED::CActLED()+0xa4>
    8948:	e6ff3073 	uxth	r3, r3
    894c:	e353000f 	cmp	r3, #15
    8950:	83a05001 	movhi	r5, #1
    8954:	9a000021 	bls	89e0 <CActLED::CActLED()+0xec>
    8958:	e3a00024 	mov	r0, #36	; 0x24
    895c:	eb00051a 	bl	9dcc <operator new(unsigned int)>
    8960:	e1a06000 	mov	r6, r0
    8964:	e3a0102f 	mov	r1, #47	; 0x2f
    8968:	e3a02001 	mov	r2, #1
    896c:	e3a03000 	mov	r3, #0
    8970:	eb0003ab 	bl	9824 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8974:	e5846000 	str	r6, [r4]
    8978:	e5845008 	str	r5, [r4, #8]
    897c:	e1a00004 	mov	r0, r4
    8980:	ebffffcb 	bl	88b4 <CActLED::Off()>
    8984:	e28d0008 	add	r0, sp, #8
    8988:	eb00003f 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    898c:	e1a00004 	mov	r0, r4
    8990:	e28dd024 	add	sp, sp, #36	; 0x24
    8994:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8998:	e1a03223 	lsr	r3, r3, #4
    899c:	e6ef3073 	uxtb	r3, r3
    89a0:	e2436009 	sub	r6, r3, #9
    89a4:	e16f6f16 	clz	r6, r6
    89a8:	e3530001 	cmp	r3, #1
    89ac:	e1a062a6 	lsr	r6, r6, #5
    89b0:	9a00000a 	bls	89e0 <CActLED::CActLED()+0xec>
    89b4:	e3530008 	cmp	r3, #8
    89b8:	12265001 	eorne	r5, r6, #1
    89bc:	1affffe5 	bne	8958 <CActLED::CActLED()+0x64>
    89c0:	e3a00010 	mov	r0, #16
    89c4:	eb000500 	bl	9dcc <operator new(unsigned int)>
    89c8:	e1a07000 	mov	r7, r0
    89cc:	e1a01005 	mov	r1, r5
    89d0:	eb00177a 	bl	e7c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    89d4:	e2265001 	eor	r5, r6, #1
    89d8:	e5847004 	str	r7, [r4, #4]
    89dc:	eaffffe5 	b	8978 <CActLED::CActLED()+0x84>
    89e0:	e3a00024 	mov	r0, #36	; 0x24
    89e4:	eb0004f8 	bl	9dcc <operator new(unsigned int)>
    89e8:	e3a03000 	mov	r3, #0
    89ec:	e3a01010 	mov	r1, #16
    89f0:	e3a02001 	mov	r2, #1
    89f4:	e1a05000 	mov	r5, r0
    89f8:	eb000389 	bl	9824 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    89fc:	e3a03000 	mov	r3, #0
    8a00:	e5845000 	str	r5, [r4]
    8a04:	e5843008 	str	r3, [r4, #8]
    8a08:	eaffffdb 	b	897c <CActLED::CActLED()+0x88>
    8a0c:	00050ff0 	.word	0x00050ff0
    8a10:	00010002 	.word	0x00010002

00008a14 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8a14:	e3510000 	cmp	r1, #0
    8a18:	012fff1e 	bxeq	lr
    8a1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a20:	e1a08003 	mov	r8, r3
    8a24:	e1a07002 	mov	r7, r2
    8a28:	e1a05000 	mov	r5, r0
    8a2c:	e1a06001 	mov	r6, r1
    8a30:	e3a04001 	mov	r4, #1
    8a34:	e1a00005 	mov	r0, r5
    8a38:	ebffff8d 	bl	8874 <CActLED::On()>
    8a3c:	e1a00007 	mov	r0, r7
    8a40:	eb00080b 	bl	aa74 <CTimer::SimpleMsDelay(unsigned int)>
    8a44:	e1a00005 	mov	r0, r5
    8a48:	ebffff99 	bl	88b4 <CActLED::Off()>
    8a4c:	e2844001 	add	r4, r4, #1
    8a50:	e1a00008 	mov	r0, r8
    8a54:	eb000806 	bl	aa74 <CTimer::SimpleMsDelay(unsigned int)>
    8a58:	e1560004 	cmp	r6, r4
    8a5c:	2afffff4 	bcs	8a34 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8a60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a64 <CActLED::Get()>:
    8a64:	e59f3004 	ldr	r3, [pc, #4]	; 8a70 <CActLED::Get()+0xc>
    8a68:	e5930000 	ldr	r0, [r3]
    8a6c:	e12fff1e 	bx	lr
    8a70:	00050ff0 	.word	0x00050ff0

00008a74 <CBcmPropertyTags::CBcmPropertyTags()>:
    8a74:	e92d4010 	push	{r4, lr}
    8a78:	e1a04000 	mov	r4, r0
    8a7c:	e3a01008 	mov	r1, #8
    8a80:	eb001ae7 	bl	f624 <CBcmMailBox::CBcmMailBox(unsigned int)>
    8a84:	e1a00004 	mov	r0, r4
    8a88:	e8bd8010 	pop	{r4, pc}

00008a8c <CBcmPropertyTags::~CBcmPropertyTags()>:
    8a8c:	e92d4010 	push	{r4, lr}
    8a90:	e1a04000 	mov	r4, r0
    8a94:	eb001ae5 	bl	f630 <CBcmMailBox::~CBcmMailBox()>
    8a98:	e1a00004 	mov	r0, r4
    8a9c:	e8bd8010 	pop	{r4, pc}

00008aa0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    8aa0:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    8aa4:	e2518000 	subs	r8, r1, #0
    8aa8:	e1a09000 	mov	r9, r0
    8aac:	e1a04002 	mov	r4, r2
    8ab0:	0a00002c 	beq	8b68 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc8>
    8ab4:	e3540010 	cmp	r4, #16
    8ab8:	3a000025 	bcc	8b54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xb4>
    8abc:	e284700c 	add	r7, r4, #12
    8ac0:	e3170003 	tst	r7, #3
    8ac4:	1a00001d 	bne	8b40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8ac8:	e3a06501 	mov	r6, #4194304	; 0x400000
    8acc:	e3a05000 	mov	r5, #0
    8ad0:	e5867000 	str	r7, [r6]
    8ad4:	e5865004 	str	r5, [r6, #4]
    8ad8:	e1a01008 	mov	r1, r8
    8adc:	e1a02004 	mov	r2, r4
    8ae0:	e59f0094 	ldr	r0, [pc, #148]	; 8b7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
    8ae4:	eb000974 	bl	b0bc <memcpy>
    8ae8:	e2843008 	add	r3, r4, #8
    8aec:	e0833006 	add	r3, r3, r6
    8af0:	e5835000 	str	r5, [r3]
    8af4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    8af8:	e59f7080 	ldr	r7, [pc, #128]	; 8b80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
    8afc:	e1a00009 	mov	r0, r9
    8b00:	e1a01007 	mov	r1, r7
    8b04:	eb001af9 	bl	f6f0 <CBcmMailBox::WriteRead(unsigned int)>
    8b08:	e1500007 	cmp	r0, r7
    8b0c:	0a000001 	beq	8b18 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8b10:	e3a00000 	mov	r0, #0
    8b14:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    8b18:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8b1c:	e5963004 	ldr	r3, [r6, #4]
    8b20:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8b24:	1afffff9 	bne	8b10 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    8b28:	e1a00008 	mov	r0, r8
    8b2c:	e1a02004 	mov	r2, r4
    8b30:	e59f1044 	ldr	r1, [pc, #68]	; 8b7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
    8b34:	eb000960 	bl	b0bc <memcpy>
    8b38:	e3a00001 	mov	r0, #1
    8b3c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    8b40:	e59f003c 	ldr	r0, [pc, #60]	; 8b84 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    8b44:	e59f103c 	ldr	r1, [pc, #60]	; 8b88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    8b48:	e3a02051 	mov	r2, #81	; 0x51
    8b4c:	eb000fd7 	bl	cab0 <assertion_failed>
    8b50:	eaffffdc 	b	8ac8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    8b54:	e59f0030 	ldr	r0, [pc, #48]	; 8b8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xec>
    8b58:	e59f1028 	ldr	r1, [pc, #40]	; 8b88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    8b5c:	e3a0204f 	mov	r2, #79	; 0x4f
    8b60:	eb000fd2 	bl	cab0 <assertion_failed>
    8b64:	eaffffd4 	b	8abc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    8b68:	e59f0020 	ldr	r0, [pc, #32]	; 8b90 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
    8b6c:	e59f1014 	ldr	r1, [pc, #20]	; 8b88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    8b70:	e3a0204e 	mov	r2, #78	; 0x4e
    8b74:	eb000fcd 	bl	cab0 <assertion_failed>
    8b78:	eaffffcd 	b	8ab4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    8b7c:	00400008 	.word	0x00400008
    8b80:	40400000 	.word	0x40400000
    8b84:	00010068 	.word	0x00010068
    8b88:	00010028 	.word	0x00010028
    8b8c:	0001003c 	.word	0x0001003c
    8b90:	0001001c 	.word	0x0001001c

00008b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8b94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8b98:	e2524000 	subs	r4, r2, #0
    8b9c:	e1a07000 	mov	r7, r0
    8ba0:	e1a08001 	mov	r8, r1
    8ba4:	e1a05003 	mov	r5, r3
    8ba8:	e59d6018 	ldr	r6, [sp, #24]
    8bac:	0a00001b 	beq	8c20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x8c>
    8bb0:	e3550010 	cmp	r5, #16
    8bb4:	3a000014 	bcc	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8bb8:	e245300c 	sub	r3, r5, #12
    8bbc:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8bc0:	e5846008 	str	r6, [r4, #8]
    8bc4:	e5848000 	str	r8, [r4]
    8bc8:	e1a00007 	mov	r0, r7
    8bcc:	e5843004 	str	r3, [r4, #4]
    8bd0:	e1a02005 	mov	r2, r5
    8bd4:	e1a01004 	mov	r1, r4
    8bd8:	ebffffb0 	bl	8aa0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8bdc:	e3500000 	cmp	r0, #0
    8be0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8be4:	e5940008 	ldr	r0, [r4, #8]
    8be8:	e3500000 	cmp	r0, #0
    8bec:	ba000001 	blt	8bf8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8bf0:	e3a00000 	mov	r0, #0
    8bf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bf8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8bfc:	e5840008 	str	r0, [r4, #8]
    8c00:	e2900000 	adds	r0, r0, #0
    8c04:	13a00001 	movne	r0, #1
    8c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c0c:	e59f0020 	ldr	r0, [pc, #32]	; 8c34 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa0>
    8c10:	e59f1020 	ldr	r1, [pc, #32]	; 8c38 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa4>
    8c14:	e3a02032 	mov	r2, #50	; 0x32
    8c18:	eb000fa4 	bl	cab0 <assertion_failed>
    8c1c:	eaffffe5 	b	8bb8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    8c20:	e59f0014 	ldr	r0, [pc, #20]	; 8c3c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa8>
    8c24:	e59f100c 	ldr	r1, [pc, #12]	; 8c38 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa4>
    8c28:	e3a02031 	mov	r2, #49	; 0x31
    8c2c:	eb000f9f 	bl	cab0 <assertion_failed>
    8c30:	eaffffde 	b	8bb0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    8c34:	0001008c 	.word	0x0001008c
    8c38:	00010028 	.word	0x00010028
    8c3c:	00010080 	.word	0x00010080

00008c40 <CGPIOPin::~CGPIOPin()>:
    8c40:	e12fff1e 	bx	lr

00008c44 <CGPIOPin::~CGPIOPin()>:
    8c44:	e92d4010 	push	{r4, lr}
    8c48:	e1a04000 	mov	r4, r0
    8c4c:	eb000460 	bl	9dd4 <operator delete(void*)>
    8c50:	e1a00004 	mov	r0, r4
    8c54:	e8bd8010 	pop	{r4, pc}

00008c58 <CGPIOPin::Write(unsigned int)>:
    8c58:	e92d4038 	push	{r3, r4, r5, lr}
    8c5c:	e5903008 	ldr	r3, [r0, #8]
    8c60:	e1a05000 	mov	r5, r0
    8c64:	e3530003 	cmp	r3, #3
    8c68:	e1a04001 	mov	r4, r1
    8c6c:	ca000018 	bgt	8cd4 <CGPIOPin::Write(unsigned int)+0x7c>
    8c70:	e3a03000 	mov	r3, #0
    8c74:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8c78:	e3540001 	cmp	r4, #1
    8c7c:	9a000003 	bls	8c90 <CGPIOPin::Write(unsigned int)+0x38>
    8c80:	e59f007c 	ldr	r0, [pc, #124]	; 8d04 <CGPIOPin::Write(unsigned int)+0xac>
    8c84:	e59f107c 	ldr	r1, [pc, #124]	; 8d08 <CGPIOPin::Write(unsigned int)+0xb0>
    8c88:	e3a02081 	mov	r2, #129	; 0x81
    8c8c:	eb000f87 	bl	cab0 <assertion_failed>
    8c90:	e5953004 	ldr	r3, [r5, #4]
    8c94:	e585400c 	str	r4, [r5, #12]
    8c98:	e3530035 	cmp	r3, #53	; 0x35
    8c9c:	8a000011 	bhi	8ce8 <CGPIOPin::Write(unsigned int)+0x90>
    8ca0:	e59f2064 	ldr	r2, [pc, #100]	; 8d0c <CGPIOPin::Write(unsigned int)+0xb4>
    8ca4:	e59f0064 	ldr	r0, [pc, #100]	; 8d10 <CGPIOPin::Write(unsigned int)+0xb8>
    8ca8:	e3540000 	cmp	r4, #0
    8cac:	e3a01001 	mov	r1, #1
    8cb0:	11a04002 	movne	r4, r2
    8cb4:	01a04000 	moveq	r4, r0
    8cb8:	e203201f 	and	r2, r3, #31
    8cbc:	e1a02211 	lsl	r2, r1, r2
    8cc0:	e1a032a3 	lsr	r3, r3, #5
    8cc4:	e7842103 	str	r2, [r4, r3, lsl #2]
    8cc8:	e3a03000 	mov	r3, #0
    8ccc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8cd0:	e8bd8038 	pop	{r3, r4, r5, pc}
    8cd4:	e59f0038 	ldr	r0, [pc, #56]	; 8d14 <CGPIOPin::Write(unsigned int)+0xbc>
    8cd8:	e59f1028 	ldr	r1, [pc, #40]	; 8d08 <CGPIOPin::Write(unsigned int)+0xb0>
    8cdc:	e3a0207d 	mov	r2, #125	; 0x7d
    8ce0:	eb000f72 	bl	cab0 <assertion_failed>
    8ce4:	eaffffe1 	b	8c70 <CGPIOPin::Write(unsigned int)+0x18>
    8ce8:	e59f0028 	ldr	r0, [pc, #40]	; 8d18 <CGPIOPin::Write(unsigned int)+0xc0>
    8cec:	e59f1014 	ldr	r1, [pc, #20]	; 8d08 <CGPIOPin::Write(unsigned int)+0xb0>
    8cf0:	e3a02084 	mov	r2, #132	; 0x84
    8cf4:	eb000f6d 	bl	cab0 <assertion_failed>
    8cf8:	e595400c 	ldr	r4, [r5, #12]
    8cfc:	e5953004 	ldr	r3, [r5, #4]
    8d00:	eaffffe6 	b	8ca0 <CGPIOPin::Write(unsigned int)+0x48>
    8d04:	00010110 	.word	0x00010110
    8d08:	00010104 	.word	0x00010104
    8d0c:	2020001c 	.word	0x2020001c
    8d10:	20200028 	.word	0x20200028
    8d14:	000100e0 	.word	0x000100e0
    8d18:	00010130 	.word	0x00010130

00008d1c <CGPIOPin::Read() const>:
    8d1c:	e5903008 	ldr	r3, [r0, #8]
    8d20:	e92d4010 	push	{r4, lr}
    8d24:	e2432002 	sub	r2, r3, #2
    8d28:	e3530000 	cmp	r3, #0
    8d2c:	13520001 	cmpne	r2, #1
    8d30:	e1a04000 	mov	r4, r0
    8d34:	9a000003 	bls	8d48 <CGPIOPin::Read() const+0x2c>
    8d38:	e59f0068 	ldr	r0, [pc, #104]	; 8da8 <CGPIOPin::Read() const+0x8c>
    8d3c:	e59f1068 	ldr	r1, [pc, #104]	; 8dac <CGPIOPin::Read() const+0x90>
    8d40:	e3a02091 	mov	r2, #145	; 0x91
    8d44:	eb000f59 	bl	cab0 <assertion_failed>
    8d48:	e3a03000 	mov	r3, #0
    8d4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8d50:	e5943004 	ldr	r3, [r4, #4]
    8d54:	e3530035 	cmp	r3, #53	; 0x35
    8d58:	8a00000c 	bhi	8d90 <CGPIOPin::Read() const+0x74>
    8d5c:	e59f204c 	ldr	r2, [pc, #76]	; 8db0 <CGPIOPin::Read() const+0x94>
    8d60:	e1a012a3 	lsr	r1, r3, #5
    8d64:	e0812002 	add	r2, r1, r2
    8d68:	e1a02102 	lsl	r2, r2, #2
    8d6c:	e5922000 	ldr	r2, [r2]
    8d70:	e3a01000 	mov	r1, #0
    8d74:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
    8d78:	e3a01001 	mov	r1, #1
    8d7c:	e203301f 	and	r3, r3, #31
    8d80:	e0123311 	ands	r3, r2, r1, lsl r3
    8d84:	11a00001 	movne	r0, r1
    8d88:	03a00000 	moveq	r0, #0
    8d8c:	e8bd8010 	pop	{r4, pc}
    8d90:	e59f001c 	ldr	r0, [pc, #28]	; 8db4 <CGPIOPin::Read() const+0x98>
    8d94:	e59f1010 	ldr	r1, [pc, #16]	; 8dac <CGPIOPin::Read() const+0x90>
    8d98:	e3a02095 	mov	r2, #149	; 0x95
    8d9c:	eb000f43 	bl	cab0 <assertion_failed>
    8da0:	e5943004 	ldr	r3, [r4, #4]
    8da4:	eaffffec 	b	8d5c <CGPIOPin::Read() const+0x40>
    8da8:	00010144 	.word	0x00010144
    8dac:	00010104 	.word	0x00010104
    8db0:	0808000d 	.word	0x0808000d
    8db4:	00010130 	.word	0x00010130

00008db8 <CGPIOPin::Invert()>:
    8db8:	e5903008 	ldr	r3, [r0, #8]
    8dbc:	e92d4010 	push	{r4, lr}
    8dc0:	e3530001 	cmp	r3, #1
    8dc4:	e1a04000 	mov	r4, r0
    8dc8:	0a000003 	beq	8ddc <CGPIOPin::Invert()+0x24>
    8dcc:	e59f001c 	ldr	r0, [pc, #28]	; 8df0 <CGPIOPin::Invert()+0x38>
    8dd0:	e59f101c 	ldr	r1, [pc, #28]	; 8df4 <CGPIOPin::Invert()+0x3c>
    8dd4:	e3a020a2 	mov	r2, #162	; 0xa2
    8dd8:	eb000f34 	bl	cab0 <assertion_failed>
    8ddc:	e594100c 	ldr	r1, [r4, #12]
    8de0:	e1a00004 	mov	r0, r4
    8de4:	e8bd4010 	pop	{r4, lr}
    8de8:	e2211001 	eor	r1, r1, #1
    8dec:	eaffff99 	b	8c58 <CGPIOPin::Write(unsigned int)>
    8df0:	000101a0 	.word	0x000101a0
    8df4:	00010104 	.word	0x00010104

00008df8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8df8:	e5903008 	ldr	r3, [r0, #8]
    8dfc:	e92d4070 	push	{r4, r5, r6, lr}
    8e00:	e1a05001 	mov	r5, r1
    8e04:	e2431002 	sub	r1, r3, #2
    8e08:	e3530000 	cmp	r3, #0
    8e0c:	13510001 	cmpne	r1, #1
    8e10:	e1a04000 	mov	r4, r0
    8e14:	e1a06002 	mov	r6, r2
    8e18:	9a000003 	bls	8e2c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    8e1c:	e59f00b8 	ldr	r0, [pc, #184]	; 8edc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    8e20:	e59f10b8 	ldr	r1, [pc, #184]	; 8ee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8e24:	e3a020ab 	mov	r2, #171	; 0xab
    8e28:	eb000f20 	bl	cab0 <assertion_failed>
    8e2c:	e594301c 	ldr	r3, [r4, #28]
    8e30:	e3530006 	cmp	r3, #6
    8e34:	0a000003 	beq	8e48 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    8e38:	e59f00a4 	ldr	r0, [pc, #164]	; 8ee4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    8e3c:	e59f109c 	ldr	r1, [pc, #156]	; 8ee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8e40:	e3a020ad 	mov	r2, #173	; 0xad
    8e44:	eb000f19 	bl	cab0 <assertion_failed>
    8e48:	e5943020 	ldr	r3, [r4, #32]
    8e4c:	e3530006 	cmp	r3, #6
    8e50:	0a000003 	beq	8e64 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    8e54:	e59f008c 	ldr	r0, [pc, #140]	; 8ee8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    8e58:	e59f1080 	ldr	r1, [pc, #128]	; 8ee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8e5c:	e3a020ae 	mov	r2, #174	; 0xae
    8e60:	eb000f12 	bl	cab0 <assertion_failed>
    8e64:	e3550000 	cmp	r5, #0
    8e68:	0a000016 	beq	8ec8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    8e6c:	e5943014 	ldr	r3, [r4, #20]
    8e70:	e3530000 	cmp	r3, #0
    8e74:	0a000003 	beq	8e88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    8e78:	e59f006c 	ldr	r0, [pc, #108]	; 8eec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    8e7c:	e59f105c 	ldr	r1, [pc, #92]	; 8ee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8e80:	e3a020b1 	mov	r2, #177	; 0xb1
    8e84:	eb000f09 	bl	cab0 <assertion_failed>
    8e88:	e5940010 	ldr	r0, [r4, #16]
    8e8c:	e5845014 	str	r5, [r4, #20]
    8e90:	e3500000 	cmp	r0, #0
    8e94:	e5846018 	str	r6, [r4, #24]
    8e98:	0a000002 	beq	8ea8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    8e9c:	e1a01004 	mov	r1, r4
    8ea0:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ea4:	ea001576 	b	e484 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8ea8:	e59f0040 	ldr	r0, [pc, #64]	; 8ef0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    8eac:	e59f102c 	ldr	r1, [pc, #44]	; 8ee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8eb0:	e3a020b6 	mov	r2, #182	; 0xb6
    8eb4:	eb000efd 	bl	cab0 <assertion_failed>
    8eb8:	e5940010 	ldr	r0, [r4, #16]
    8ebc:	e1a01004 	mov	r1, r4
    8ec0:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ec4:	ea00156e 	b	e484 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8ec8:	e59f0024 	ldr	r0, [pc, #36]	; 8ef4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    8ecc:	e59f100c 	ldr	r1, [pc, #12]	; 8ee0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8ed0:	e3a020b0 	mov	r2, #176	; 0xb0
    8ed4:	eb000ef5 	bl	cab0 <assertion_failed>
    8ed8:	eaffffe3 	b	8e6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    8edc:	00010144 	.word	0x00010144
    8ee0:	00010104 	.word	0x00010104
    8ee4:	000101bc 	.word	0x000101bc
    8ee8:	000101e0 	.word	0x000101e0
    8eec:	00010218 	.word	0x00010218
    8ef0:	00010228 	.word	0x00010228
    8ef4:	00010208 	.word	0x00010208

00008ef8 <CGPIOPin::DisconnectInterrupt()>:
    8ef8:	e5903008 	ldr	r3, [r0, #8]
    8efc:	e92d4010 	push	{r4, lr}
    8f00:	e2432002 	sub	r2, r3, #2
    8f04:	e3530000 	cmp	r3, #0
    8f08:	13520001 	cmpne	r2, #1
    8f0c:	e1a04000 	mov	r4, r0
    8f10:	9a000003 	bls	8f24 <CGPIOPin::DisconnectInterrupt()+0x2c>
    8f14:	e59f00a0 	ldr	r0, [pc, #160]	; 8fbc <CGPIOPin::DisconnectInterrupt()+0xc4>
    8f18:	e59f10a0 	ldr	r1, [pc, #160]	; 8fc0 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8f1c:	e3a020be 	mov	r2, #190	; 0xbe
    8f20:	eb000ee2 	bl	cab0 <assertion_failed>
    8f24:	e594301c 	ldr	r3, [r4, #28]
    8f28:	e3530006 	cmp	r3, #6
    8f2c:	0a000003 	beq	8f40 <CGPIOPin::DisconnectInterrupt()+0x48>
    8f30:	e59f008c 	ldr	r0, [pc, #140]	; 8fc4 <CGPIOPin::DisconnectInterrupt()+0xcc>
    8f34:	e59f1084 	ldr	r1, [pc, #132]	; 8fc0 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8f38:	e3a020c0 	mov	r2, #192	; 0xc0
    8f3c:	eb000edb 	bl	cab0 <assertion_failed>
    8f40:	e5943020 	ldr	r3, [r4, #32]
    8f44:	e3530006 	cmp	r3, #6
    8f48:	0a000003 	beq	8f5c <CGPIOPin::DisconnectInterrupt()+0x64>
    8f4c:	e59f0074 	ldr	r0, [pc, #116]	; 8fc8 <CGPIOPin::DisconnectInterrupt()+0xd0>
    8f50:	e59f1068 	ldr	r1, [pc, #104]	; 8fc0 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8f54:	e3a020c1 	mov	r2, #193	; 0xc1
    8f58:	eb000ed4 	bl	cab0 <assertion_failed>
    8f5c:	e5943014 	ldr	r3, [r4, #20]
    8f60:	e3530000 	cmp	r3, #0
    8f64:	0a00000f 	beq	8fa8 <CGPIOPin::DisconnectInterrupt()+0xb0>
    8f68:	e3a03000 	mov	r3, #0
    8f6c:	e5940010 	ldr	r0, [r4, #16]
    8f70:	e5843014 	str	r3, [r4, #20]
    8f74:	e1500003 	cmp	r0, r3
    8f78:	0a000002 	beq	8f88 <CGPIOPin::DisconnectInterrupt()+0x90>
    8f7c:	e1a01004 	mov	r1, r4
    8f80:	e8bd4010 	pop	{r4, lr}
    8f84:	ea001567 	b	e528 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8f88:	e59f003c 	ldr	r0, [pc, #60]	; 8fcc <CGPIOPin::DisconnectInterrupt()+0xd4>
    8f8c:	e59f102c 	ldr	r1, [pc, #44]	; 8fc0 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8f90:	e3a020c6 	mov	r2, #198	; 0xc6
    8f94:	eb000ec5 	bl	cab0 <assertion_failed>
    8f98:	e5940010 	ldr	r0, [r4, #16]
    8f9c:	e1a01004 	mov	r1, r4
    8fa0:	e8bd4010 	pop	{r4, lr}
    8fa4:	ea00155f 	b	e528 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8fa8:	e59f0020 	ldr	r0, [pc, #32]	; 8fd0 <CGPIOPin::DisconnectInterrupt()+0xd8>
    8fac:	e59f100c 	ldr	r1, [pc, #12]	; 8fc0 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8fb0:	e3a020c3 	mov	r2, #195	; 0xc3
    8fb4:	eb000ebd 	bl	cab0 <assertion_failed>
    8fb8:	eaffffea 	b	8f68 <CGPIOPin::DisconnectInterrupt()+0x70>
    8fbc:	00010144 	.word	0x00010144
    8fc0:	00010104 	.word	0x00010104
    8fc4:	000101bc 	.word	0x000101bc
    8fc8:	000101e0 	.word	0x000101e0
    8fcc:	00010228 	.word	0x00010228
    8fd0:	00010238 	.word	0x00010238

00008fd4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8fd4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    8fd8:	e5903008 	ldr	r3, [r0, #8]
    8fdc:	e1a05000 	mov	r5, r0
    8fe0:	e2432002 	sub	r2, r3, #2
    8fe4:	e3530000 	cmp	r3, #0
    8fe8:	13520001 	cmpne	r2, #1
    8fec:	e1a04001 	mov	r4, r1
    8ff0:	9a000003 	bls	9004 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    8ff4:	e59f0128 	ldr	r0, [pc, #296]	; 9124 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x150>
    8ff8:	e59f1128 	ldr	r1, [pc, #296]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    8ffc:	e3a020ce 	mov	r2, #206	; 0xce
    9000:	eb000eaa 	bl	cab0 <assertion_failed>
    9004:	e5953010 	ldr	r3, [r5, #16]
    9008:	e3530000 	cmp	r3, #0
    900c:	0a00003a 	beq	90fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x128>
    9010:	e5953014 	ldr	r3, [r5, #20]
    9014:	e3530000 	cmp	r3, #0
    9018:	0a00003c 	beq	9110 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x13c>
    901c:	e595301c 	ldr	r3, [r5, #28]
    9020:	e3530006 	cmp	r3, #6
    9024:	0a000003 	beq	9038 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x64>
    9028:	e59f00fc 	ldr	r0, [pc, #252]	; 912c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x158>
    902c:	e59f10f4 	ldr	r1, [pc, #244]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9030:	e3a020d2 	mov	r2, #210	; 0xd2
    9034:	eb000e9d 	bl	cab0 <assertion_failed>
    9038:	e3540005 	cmp	r4, #5
    903c:	ca000022 	bgt	90cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf8>
    9040:	e5953020 	ldr	r3, [r5, #32]
    9044:	e1530004 	cmp	r3, r4
    9048:	0a000026 	beq	90e8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    904c:	e5953004 	ldr	r3, [r5, #4]
    9050:	e585401c 	str	r4, [r5, #28]
    9054:	e3530035 	cmp	r3, #53	; 0x35
    9058:	8a000015 	bhi	90b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe0>
    905c:	e3a02001 	mov	r2, #1
    9060:	e59f70c8 	ldr	r7, [pc, #200]	; 9130 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x15c>
    9064:	e59f60c8 	ldr	r6, [pc, #200]	; 9134 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x160>
    9068:	e5971000 	ldr	r1, [r7]
    906c:	e203501f 	and	r5, r3, #31
    9070:	e0844084 	add	r4, r4, r4, lsl #1
    9074:	e1a032a3 	lsr	r3, r3, #5
    9078:	e3510000 	cmp	r1, #0
    907c:	e1a04104 	lsl	r4, r4, #2
    9080:	e1a05512 	lsl	r5, r2, r5
    9084:	e0836006 	add	r6, r3, r6
    9088:	1a000007 	bne	90ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
    908c:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    9090:	e1835005 	orr	r5, r3, r5
    9094:	e7845106 	str	r5, [r4, r6, lsl #2]
    9098:	e5973000 	ldr	r3, [r7]
    909c:	e3530000 	cmp	r3, #0
    90a0:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    90a4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    90a8:	ea00035a 	b	9e18 <LeaveCritical>
    90ac:	eb00034a 	bl	9ddc <EnterCritical>
    90b0:	eafffff5 	b	908c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    90b4:	e59f007c 	ldr	r0, [pc, #124]	; 9138 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x164>
    90b8:	e59f1068 	ldr	r1, [pc, #104]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    90bc:	e3a020d7 	mov	r2, #215	; 0xd7
    90c0:	eb000e7a 	bl	cab0 <assertion_failed>
    90c4:	e5953004 	ldr	r3, [r5, #4]
    90c8:	eaffffe3 	b	905c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    90cc:	e59f0068 	ldr	r0, [pc, #104]	; 913c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x168>
    90d0:	e59f1050 	ldr	r1, [pc, #80]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    90d4:	e3a020d3 	mov	r2, #211	; 0xd3
    90d8:	eb000e74 	bl	cab0 <assertion_failed>
    90dc:	e5953020 	ldr	r3, [r5, #32]
    90e0:	e1530004 	cmp	r3, r4
    90e4:	1affffd8 	bne	904c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    90e8:	e59f0050 	ldr	r0, [pc, #80]	; 9140 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x16c>
    90ec:	e59f1034 	ldr	r1, [pc, #52]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    90f0:	e3a020d4 	mov	r2, #212	; 0xd4
    90f4:	eb000e6d 	bl	cab0 <assertion_failed>
    90f8:	eaffffd3 	b	904c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    90fc:	e59f0040 	ldr	r0, [pc, #64]	; 9144 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    9100:	e59f1020 	ldr	r1, [pc, #32]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9104:	e3a020cf 	mov	r2, #207	; 0xcf
    9108:	eb000e68 	bl	cab0 <assertion_failed>
    910c:	eaffffbf 	b	9010 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    9110:	e59f0030 	ldr	r0, [pc, #48]	; 9148 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x174>
    9114:	e59f100c 	ldr	r1, [pc, #12]	; 9128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9118:	e3a020d0 	mov	r2, #208	; 0xd0
    911c:	eb000e63 	bl	cab0 <assertion_failed>
    9120:	eaffffbd 	b	901c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x48>
    9124:	00010144 	.word	0x00010144
    9128:	00010104 	.word	0x00010104
    912c:	000101bc 	.word	0x000101bc
    9130:	00050ff4 	.word	0x00050ff4
    9134:	08080013 	.word	0x08080013
    9138:	00010130 	.word	0x00010130
    913c:	00010248 	.word	0x00010248
    9140:	0001026c 	.word	0x0001026c
    9144:	00010228 	.word	0x00010228
    9148:	00010238 	.word	0x00010238

0000914c <CGPIOPin::DisableInterrupt()>:
    914c:	e5903008 	ldr	r3, [r0, #8]
    9150:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9154:	e2432002 	sub	r2, r3, #2
    9158:	e3530000 	cmp	r3, #0
    915c:	13520001 	cmpne	r2, #1
    9160:	e1a05000 	mov	r5, r0
    9164:	9a000003 	bls	9178 <CGPIOPin::DisableInterrupt()+0x2c>
    9168:	e59f00b0 	ldr	r0, [pc, #176]	; 9220 <CGPIOPin::DisableInterrupt()+0xd4>
    916c:	e59f10b0 	ldr	r1, [pc, #176]	; 9224 <CGPIOPin::DisableInterrupt()+0xd8>
    9170:	e3a020e8 	mov	r2, #232	; 0xe8
    9174:	eb000e4d 	bl	cab0 <assertion_failed>
    9178:	e595301c 	ldr	r3, [r5, #28]
    917c:	e3530005 	cmp	r3, #5
    9180:	ca000021 	bgt	920c <CGPIOPin::DisableInterrupt()+0xc0>
    9184:	e5953004 	ldr	r3, [r5, #4]
    9188:	e3530035 	cmp	r3, #53	; 0x35
    918c:	8a000018 	bhi	91f4 <CGPIOPin::DisableInterrupt()+0xa8>
    9190:	e3a02001 	mov	r2, #1
    9194:	e59f808c 	ldr	r8, [pc, #140]	; 9228 <CGPIOPin::DisableInterrupt()+0xdc>
    9198:	e595401c 	ldr	r4, [r5, #28]
    919c:	e5981000 	ldr	r1, [r8]
    91a0:	e59f6084 	ldr	r6, [pc, #132]	; 922c <CGPIOPin::DisableInterrupt()+0xe0>
    91a4:	e203701f 	and	r7, r3, #31
    91a8:	e0844084 	add	r4, r4, r4, lsl #1
    91ac:	e1a032a3 	lsr	r3, r3, #5
    91b0:	e3510000 	cmp	r1, #0
    91b4:	e1a04104 	lsl	r4, r4, #2
    91b8:	e1a07712 	lsl	r7, r2, r7
    91bc:	e0836006 	add	r6, r3, r6
    91c0:	1a000009 	bne	91ec <CGPIOPin::DisableInterrupt()+0xa0>
    91c4:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    91c8:	e1c33007 	bic	r3, r3, r7
    91cc:	e7843106 	str	r3, [r4, r6, lsl #2]
    91d0:	e5983000 	ldr	r3, [r8]
    91d4:	e3530000 	cmp	r3, #0
    91d8:	0a000000 	beq	91e0 <CGPIOPin::DisableInterrupt()+0x94>
    91dc:	eb00030d 	bl	9e18 <LeaveCritical>
    91e0:	e3a03006 	mov	r3, #6
    91e4:	e585301c 	str	r3, [r5, #28]
    91e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    91ec:	eb0002fa 	bl	9ddc <EnterCritical>
    91f0:	eafffff3 	b	91c4 <CGPIOPin::DisableInterrupt()+0x78>
    91f4:	e59f0034 	ldr	r0, [pc, #52]	; 9230 <CGPIOPin::DisableInterrupt()+0xe4>
    91f8:	e59f1024 	ldr	r1, [pc, #36]	; 9224 <CGPIOPin::DisableInterrupt()+0xd8>
    91fc:	e3a020ec 	mov	r2, #236	; 0xec
    9200:	eb000e2a 	bl	cab0 <assertion_failed>
    9204:	e5953004 	ldr	r3, [r5, #4]
    9208:	eaffffe0 	b	9190 <CGPIOPin::DisableInterrupt()+0x44>
    920c:	e59f0020 	ldr	r0, [pc, #32]	; 9234 <CGPIOPin::DisableInterrupt()+0xe8>
    9210:	e59f100c 	ldr	r1, [pc, #12]	; 9224 <CGPIOPin::DisableInterrupt()+0xd8>
    9214:	e3a020ea 	mov	r2, #234	; 0xea
    9218:	eb000e24 	bl	cab0 <assertion_failed>
    921c:	eaffffd8 	b	9184 <CGPIOPin::DisableInterrupt()+0x38>
    9220:	00010144 	.word	0x00010144
    9224:	00010104 	.word	0x00010104
    9228:	00050ff4 	.word	0x00050ff4
    922c:	08080013 	.word	0x08080013
    9230:	00010130 	.word	0x00010130
    9234:	00010288 	.word	0x00010288

00009238 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    9238:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    923c:	e5903008 	ldr	r3, [r0, #8]
    9240:	e1a05000 	mov	r5, r0
    9244:	e2432002 	sub	r2, r3, #2
    9248:	e3530000 	cmp	r3, #0
    924c:	13520001 	cmpne	r2, #1
    9250:	e1a04001 	mov	r4, r1
    9254:	9a000003 	bls	9268 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    9258:	e59f0128 	ldr	r0, [pc, #296]	; 9388 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x150>
    925c:	e59f1128 	ldr	r1, [pc, #296]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9260:	e3a020fe 	mov	r2, #254	; 0xfe
    9264:	eb000e11 	bl	cab0 <assertion_failed>
    9268:	e5953010 	ldr	r3, [r5, #16]
    926c:	e3530000 	cmp	r3, #0
    9270:	0a00003a 	beq	9360 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    9274:	e5953014 	ldr	r3, [r5, #20]
    9278:	e3530000 	cmp	r3, #0
    927c:	0a00003c 	beq	9374 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x13c>
    9280:	e5953020 	ldr	r3, [r5, #32]
    9284:	e3530006 	cmp	r3, #6
    9288:	0a000003 	beq	929c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x64>
    928c:	e59f00fc 	ldr	r0, [pc, #252]	; 9390 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x158>
    9290:	e59f10f4 	ldr	r1, [pc, #244]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9294:	e59f20f8 	ldr	r2, [pc, #248]	; 9394 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x15c>
    9298:	eb000e04 	bl	cab0 <assertion_failed>
    929c:	e3540005 	cmp	r4, #5
    92a0:	ca000022 	bgt	9330 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
    92a4:	e595301c 	ldr	r3, [r5, #28]
    92a8:	e1530004 	cmp	r3, r4
    92ac:	0a000026 	beq	934c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    92b0:	e5953004 	ldr	r3, [r5, #4]
    92b4:	e5854020 	str	r4, [r5, #32]
    92b8:	e3530035 	cmp	r3, #53	; 0x35
    92bc:	8a000015 	bhi	9318 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe0>
    92c0:	e3a02001 	mov	r2, #1
    92c4:	e59f70cc 	ldr	r7, [pc, #204]	; 9398 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x160>
    92c8:	e59f60cc 	ldr	r6, [pc, #204]	; 939c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x164>
    92cc:	e5971000 	ldr	r1, [r7]
    92d0:	e203501f 	and	r5, r3, #31
    92d4:	e0844084 	add	r4, r4, r4, lsl #1
    92d8:	e1a032a3 	lsr	r3, r3, #5
    92dc:	e3510000 	cmp	r1, #0
    92e0:	e1a04104 	lsl	r4, r4, #2
    92e4:	e1a05512 	lsl	r5, r2, r5
    92e8:	e0836006 	add	r6, r3, r6
    92ec:	1a000007 	bne	9310 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
    92f0:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    92f4:	e1835005 	orr	r5, r3, r5
    92f8:	e7845106 	str	r5, [r4, r6, lsl #2]
    92fc:	e5973000 	ldr	r3, [r7]
    9300:	e3530000 	cmp	r3, #0
    9304:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    9308:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    930c:	ea0002c1 	b	9e18 <LeaveCritical>
    9310:	eb0002b1 	bl	9ddc <EnterCritical>
    9314:	eafffff5 	b	92f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    9318:	e59f0080 	ldr	r0, [pc, #128]	; 93a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x168>
    931c:	e59f1068 	ldr	r1, [pc, #104]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9320:	e59f207c 	ldr	r2, [pc, #124]	; 93a4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x16c>
    9324:	eb000de1 	bl	cab0 <assertion_failed>
    9328:	e5953004 	ldr	r3, [r5, #4]
    932c:	eaffffe3 	b	92c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    9330:	e59f0070 	ldr	r0, [pc, #112]	; 93a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    9334:	e59f1050 	ldr	r1, [pc, #80]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9338:	e59f206c 	ldr	r2, [pc, #108]	; 93ac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x174>
    933c:	eb000ddb 	bl	cab0 <assertion_failed>
    9340:	e595301c 	ldr	r3, [r5, #28]
    9344:	e1530004 	cmp	r3, r4
    9348:	1affffd8 	bne	92b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    934c:	e59f005c 	ldr	r0, [pc, #92]	; 93b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x178>
    9350:	e59f1034 	ldr	r1, [pc, #52]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9354:	e3a02f41 	mov	r2, #260	; 0x104
    9358:	eb000dd4 	bl	cab0 <assertion_failed>
    935c:	eaffffd3 	b	92b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    9360:	e59f004c 	ldr	r0, [pc, #76]	; 93b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x17c>
    9364:	e59f1020 	ldr	r1, [pc, #32]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9368:	e3a020ff 	mov	r2, #255	; 0xff
    936c:	eb000dcf 	bl	cab0 <assertion_failed>
    9370:	eaffffbf 	b	9274 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    9374:	e59f003c 	ldr	r0, [pc, #60]	; 93b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x180>
    9378:	e59f100c 	ldr	r1, [pc, #12]	; 938c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    937c:	e3a02c01 	mov	r2, #256	; 0x100
    9380:	eb000dca 	bl	cab0 <assertion_failed>
    9384:	eaffffbd 	b	9280 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x48>
    9388:	00010144 	.word	0x00010144
    938c:	00010104 	.word	0x00010104
    9390:	000101e0 	.word	0x000101e0
    9394:	00000102 	.word	0x00000102
    9398:	00050ff4 	.word	0x00050ff4
    939c:	08080013 	.word	0x08080013
    93a0:	00010130 	.word	0x00010130
    93a4:	00000107 	.word	0x00000107
    93a8:	00010248 	.word	0x00010248
    93ac:	00000103 	.word	0x00000103
    93b0:	000102ac 	.word	0x000102ac
    93b4:	00010228 	.word	0x00010228
    93b8:	00010238 	.word	0x00010238

000093bc <CGPIOPin::DisableInterrupt2()>:
    93bc:	e5903008 	ldr	r3, [r0, #8]
    93c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    93c4:	e2432002 	sub	r2, r3, #2
    93c8:	e3530000 	cmp	r3, #0
    93cc:	13520001 	cmpne	r2, #1
    93d0:	e1a05000 	mov	r5, r0
    93d4:	9a000003 	bls	93e8 <CGPIOPin::DisableInterrupt2()+0x2c>
    93d8:	e59f00b0 	ldr	r0, [pc, #176]	; 9490 <CGPIOPin::DisableInterrupt2()+0xd4>
    93dc:	e59f10b0 	ldr	r1, [pc, #176]	; 9494 <CGPIOPin::DisableInterrupt2()+0xd8>
    93e0:	e3a02f46 	mov	r2, #280	; 0x118
    93e4:	eb000db1 	bl	cab0 <assertion_failed>
    93e8:	e5953020 	ldr	r3, [r5, #32]
    93ec:	e3530005 	cmp	r3, #5
    93f0:	ca000021 	bgt	947c <CGPIOPin::DisableInterrupt2()+0xc0>
    93f4:	e5953004 	ldr	r3, [r5, #4]
    93f8:	e3530035 	cmp	r3, #53	; 0x35
    93fc:	8a000018 	bhi	9464 <CGPIOPin::DisableInterrupt2()+0xa8>
    9400:	e3a02001 	mov	r2, #1
    9404:	e59f808c 	ldr	r8, [pc, #140]	; 9498 <CGPIOPin::DisableInterrupt2()+0xdc>
    9408:	e5954020 	ldr	r4, [r5, #32]
    940c:	e5981000 	ldr	r1, [r8]
    9410:	e59f6084 	ldr	r6, [pc, #132]	; 949c <CGPIOPin::DisableInterrupt2()+0xe0>
    9414:	e203701f 	and	r7, r3, #31
    9418:	e0844084 	add	r4, r4, r4, lsl #1
    941c:	e1a032a3 	lsr	r3, r3, #5
    9420:	e3510000 	cmp	r1, #0
    9424:	e1a04104 	lsl	r4, r4, #2
    9428:	e1a07712 	lsl	r7, r2, r7
    942c:	e0836006 	add	r6, r3, r6
    9430:	1a000009 	bne	945c <CGPIOPin::DisableInterrupt2()+0xa0>
    9434:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    9438:	e1c33007 	bic	r3, r3, r7
    943c:	e7843106 	str	r3, [r4, r6, lsl #2]
    9440:	e5983000 	ldr	r3, [r8]
    9444:	e3530000 	cmp	r3, #0
    9448:	0a000000 	beq	9450 <CGPIOPin::DisableInterrupt2()+0x94>
    944c:	eb000271 	bl	9e18 <LeaveCritical>
    9450:	e3a03006 	mov	r3, #6
    9454:	e5853020 	str	r3, [r5, #32]
    9458:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    945c:	eb00025e 	bl	9ddc <EnterCritical>
    9460:	eafffff3 	b	9434 <CGPIOPin::DisableInterrupt2()+0x78>
    9464:	e59f0034 	ldr	r0, [pc, #52]	; 94a0 <CGPIOPin::DisableInterrupt2()+0xe4>
    9468:	e59f1024 	ldr	r1, [pc, #36]	; 9494 <CGPIOPin::DisableInterrupt2()+0xd8>
    946c:	e3a02f47 	mov	r2, #284	; 0x11c
    9470:	eb000d8e 	bl	cab0 <assertion_failed>
    9474:	e5953004 	ldr	r3, [r5, #4]
    9478:	eaffffe0 	b	9400 <CGPIOPin::DisableInterrupt2()+0x44>
    947c:	e59f0020 	ldr	r0, [pc, #32]	; 94a4 <CGPIOPin::DisableInterrupt2()+0xe8>
    9480:	e59f100c 	ldr	r1, [pc, #12]	; 9494 <CGPIOPin::DisableInterrupt2()+0xd8>
    9484:	e59f201c 	ldr	r2, [pc, #28]	; 94a8 <CGPIOPin::DisableInterrupt2()+0xec>
    9488:	eb000d88 	bl	cab0 <assertion_failed>
    948c:	eaffffd8 	b	93f4 <CGPIOPin::DisableInterrupt2()+0x38>
    9490:	00010144 	.word	0x00010144
    9494:	00010104 	.word	0x00010104
    9498:	00050ff4 	.word	0x00050ff4
    949c:	08080013 	.word	0x08080013
    94a0:	00010130 	.word	0x00010130
    94a4:	000102c8 	.word	0x000102c8
    94a8:	0000011a 	.word	0x0000011a

000094ac <CGPIOPin::SetPullUpMode(unsigned int)>:
    94ac:	e5903004 	ldr	r3, [r0, #4]
    94b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    94b4:	e3530035 	cmp	r3, #53	; 0x35
    94b8:	e1a04000 	mov	r4, r0
    94bc:	e1a08001 	mov	r8, r1
    94c0:	8a000022 	bhi	9550 <CGPIOPin::SetPullUpMode(unsigned int)+0xa4>
    94c4:	e59f609c 	ldr	r6, [pc, #156]	; 9568 <CGPIOPin::SetPullUpMode(unsigned int)+0xbc>
    94c8:	e59f209c 	ldr	r2, [pc, #156]	; 956c <CGPIOPin::SetPullUpMode(unsigned int)+0xc0>
    94cc:	e5960000 	ldr	r0, [r6]
    94d0:	e1a012a3 	lsr	r1, r3, #5
    94d4:	e0812002 	add	r2, r1, r2
    94d8:	e3500000 	cmp	r0, #0
    94dc:	e1a05102 	lsl	r5, r2, #2
    94e0:	e203401f 	and	r4, r3, #31
    94e4:	1a000017 	bne	9548 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    94e8:	e3580002 	cmp	r8, #2
    94ec:	8a000010 	bhi	9534 <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    94f0:	e59f7078 	ldr	r7, [pc, #120]	; 9570 <CGPIOPin::SetPullUpMode(unsigned int)+0xc4>
    94f4:	e3a00005 	mov	r0, #5
    94f8:	e5878094 	str	r8, [r7, #148]	; 0x94
    94fc:	eb000563 	bl	aa90 <CTimer::SimpleusDelay(unsigned int)>
    9500:	e3a03001 	mov	r3, #1
    9504:	e1a03413 	lsl	r3, r3, r4
    9508:	e5853000 	str	r3, [r5]
    950c:	e3a00005 	mov	r0, #5
    9510:	eb00055e 	bl	aa90 <CTimer::SimpleusDelay(unsigned int)>
    9514:	e3a03000 	mov	r3, #0
    9518:	e5873094 	str	r3, [r7, #148]	; 0x94
    951c:	e5853000 	str	r3, [r5]
    9520:	e5963000 	ldr	r3, [r6]
    9524:	e3530000 	cmp	r3, #0
    9528:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    952c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9530:	ea000238 	b	9e18 <LeaveCritical>
    9534:	e59f0038 	ldr	r0, [pc, #56]	; 9574 <CGPIOPin::SetPullUpMode(unsigned int)+0xc8>
    9538:	e59f1038 	ldr	r1, [pc, #56]	; 9578 <CGPIOPin::SetPullUpMode(unsigned int)+0xcc>
    953c:	e59f2038 	ldr	r2, [pc, #56]	; 957c <CGPIOPin::SetPullUpMode(unsigned int)+0xd0>
    9540:	eb000d5a 	bl	cab0 <assertion_failed>
    9544:	eaffffe9 	b	94f0 <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    9548:	eb000223 	bl	9ddc <EnterCritical>
    954c:	eaffffe5 	b	94e8 <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    9550:	e59f0028 	ldr	r0, [pc, #40]	; 9580 <CGPIOPin::SetPullUpMode(unsigned int)+0xd4>
    9554:	e59f101c 	ldr	r1, [pc, #28]	; 9578 <CGPIOPin::SetPullUpMode(unsigned int)+0xcc>
    9558:	e59f2024 	ldr	r2, [pc, #36]	; 9584 <CGPIOPin::SetPullUpMode(unsigned int)+0xd8>
    955c:	eb000d53 	bl	cab0 <assertion_failed>
    9560:	e5943004 	ldr	r3, [r4, #4]
    9564:	eaffffd6 	b	94c4 <CGPIOPin::SetPullUpMode(unsigned int)+0x18>
    9568:	00050ff4 	.word	0x00050ff4
    956c:	08080026 	.word	0x08080026
    9570:	20200000 	.word	0x20200000
    9574:	000102ec 	.word	0x000102ec
    9578:	00010104 	.word	0x00010104
    957c:	00000133 	.word	0x00000133
    9580:	00010130 	.word	0x00010130
    9584:	0000012d 	.word	0x0000012d

00009588 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9588:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    958c:	e5903004 	ldr	r3, [r0, #4]
    9590:	e1a04000 	mov	r4, r0
    9594:	e3530035 	cmp	r3, #53	; 0x35
    9598:	e1a06001 	mov	r6, r1
    959c:	8a000021 	bhi	9628 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    95a0:	e59f4098 	ldr	r4, [pc, #152]	; 9640 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    95a4:	e3560005 	cmp	r6, #5
    95a8:	e0842394 	umull	r2, r4, r4, r3
    95ac:	e1a041a4 	lsr	r4, r4, #3
    95b0:	e2845302 	add	r5, r4, #134217728	; 0x8000000
    95b4:	e0844104 	add	r4, r4, r4, lsl #2
    95b8:	e2855702 	add	r5, r5, #524288	; 0x80000
    95bc:	e0434084 	sub	r4, r3, r4, lsl #1
    95c0:	e1a05105 	lsl	r5, r5, #2
    95c4:	e0844084 	add	r4, r4, r4, lsl #1
    95c8:	8a000011 	bhi	9614 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    95cc:	e59f7070 	ldr	r7, [pc, #112]	; 9644 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    95d0:	e5973000 	ldr	r3, [r7]
    95d4:	e3530000 	cmp	r3, #0
    95d8:	1a00000b 	bne	960c <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    95dc:	e3a03007 	mov	r3, #7
    95e0:	e59f1060 	ldr	r1, [pc, #96]	; 9648 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    95e4:	e5952000 	ldr	r2, [r5]
    95e8:	e7911106 	ldr	r1, [r1, r6, lsl #2]
    95ec:	e1c23413 	bic	r3, r2, r3, lsl r4
    95f0:	e1834411 	orr	r4, r3, r1, lsl r4
    95f4:	e5854000 	str	r4, [r5]
    95f8:	e5973000 	ldr	r3, [r7]
    95fc:	e3530000 	cmp	r3, #0
    9600:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    9604:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    9608:	ea000202 	b	9e18 <LeaveCritical>
    960c:	eb0001f2 	bl	9ddc <EnterCritical>
    9610:	eafffff1 	b	95dc <CGPIOPin::SetAlternateFunction(unsigned int)+0x54>
    9614:	e59f0030 	ldr	r0, [pc, #48]	; 964c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    9618:	e59f1030 	ldr	r1, [pc, #48]	; 9650 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    961c:	e3a02f51 	mov	r2, #324	; 0x144
    9620:	eb000d22 	bl	cab0 <assertion_failed>
    9624:	eaffffe8 	b	95cc <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    9628:	e59f0024 	ldr	r0, [pc, #36]	; 9654 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    962c:	e59f101c 	ldr	r1, [pc, #28]	; 9650 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    9630:	e3a02d05 	mov	r2, #320	; 0x140
    9634:	eb000d1d 	bl	cab0 <assertion_failed>
    9638:	e5943004 	ldr	r3, [r4, #4]
    963c:	eaffffd7 	b	95a0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x18>
    9640:	cccccccd 	.word	0xcccccccd
    9644:	00050ff4 	.word	0x00050ff4
    9648:	000100b8 	.word	0x000100b8
    964c:	000102f8 	.word	0x000102f8
    9650:	00010104 	.word	0x00010104
    9654:	00010130 	.word	0x00010130

00009658 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9658:	e3510009 	cmp	r1, #9
    965c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9660:	e1a05001 	mov	r5, r1
    9664:	e1a04000 	mov	r4, r0
    9668:	e1a07002 	mov	r7, r2
    966c:	ca000040 	bgt	9774 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    9670:	e5845008 	str	r5, [r4, #8]
    9674:	e3a00000 	mov	r0, #0
    9678:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    967c:	e5943008 	ldr	r3, [r4, #8]
    9680:	e2431004 	sub	r1, r3, #4
    9684:	e3510005 	cmp	r1, #5
    9688:	9a000032 	bls	9758 <CGPIOPin::SetMode(TGPIOMode, int)+0x100>
    968c:	e2977000 	adds	r7, r7, #0
    9690:	13a07001 	movne	r7, #1
    9694:	e3530001 	cmp	r3, #1
    9698:	13a03000 	movne	r3, #0
    969c:	02073001 	andeq	r3, r7, #1
    96a0:	e3530000 	cmp	r3, #0
    96a4:	1a000055 	bne	9800 <CGPIOPin::SetMode(TGPIOMode, int)+0x1a8>
    96a8:	e5943004 	ldr	r3, [r4, #4]
    96ac:	e3530035 	cmp	r3, #53	; 0x35
    96b0:	8a00003a 	bhi	97a0 <CGPIOPin::SetMode(TGPIOMode, int)+0x148>
    96b4:	e59f5154 	ldr	r5, [pc, #340]	; 9810 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b8>
    96b8:	e59f8154 	ldr	r8, [pc, #340]	; 9814 <CGPIOPin::SetMode(TGPIOMode, int)+0x1bc>
    96bc:	e0852395 	umull	r2, r5, r5, r3
    96c0:	e5982000 	ldr	r2, [r8]
    96c4:	e1a051a5 	lsr	r5, r5, #3
    96c8:	e2856302 	add	r6, r5, #134217728	; 0x8000000
    96cc:	e0855105 	add	r5, r5, r5, lsl #2
    96d0:	e2866702 	add	r6, r6, #524288	; 0x80000
    96d4:	e0435085 	sub	r5, r3, r5, lsl #1
    96d8:	e3520000 	cmp	r2, #0
    96dc:	e1a06106 	lsl	r6, r6, #2
    96e0:	e0855085 	add	r5, r5, r5, lsl #1
    96e4:	1a000033 	bne	97b8 <CGPIOPin::SetMode(TGPIOMode, int)+0x160>
    96e8:	e5941008 	ldr	r1, [r4, #8]
    96ec:	e3a03007 	mov	r3, #7
    96f0:	e2411001 	sub	r1, r1, #1
    96f4:	e16f1f11 	clz	r1, r1
    96f8:	e5962000 	ldr	r2, [r6]
    96fc:	e1a012a1 	lsr	r1, r1, #5
    9700:	e1c23513 	bic	r3, r2, r3, lsl r5
    9704:	e1835511 	orr	r5, r3, r1, lsl r5
    9708:	e5865000 	str	r5, [r6]
    970c:	e5983000 	ldr	r3, [r8]
    9710:	e3530000 	cmp	r3, #0
    9714:	1a000029 	bne	97c0 <CGPIOPin::SetMode(TGPIOMode, int)+0x168>
    9718:	e3570000 	cmp	r7, #0
    971c:	0a00000a 	beq	974c <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9720:	e5943008 	ldr	r3, [r4, #8]
    9724:	e3530003 	cmp	r3, #3
    9728:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    972c:	ea000006 	b	974c <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9730:	000097f0 	.word	0x000097f0
    9734:	000097e0 	.word	0x000097e0
    9738:	000097d0 	.word	0x000097d0
    973c:	00009740 	.word	0x00009740
    9740:	e1a00004 	mov	r0, r4
    9744:	e3a01001 	mov	r1, #1
    9748:	ebffff57 	bl	94ac <CGPIOPin::SetPullUpMode(unsigned int)>
    974c:	e3a03000 	mov	r3, #0
    9750:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9758:	e1570000 	cmp	r7, r0
    975c:	1a000009 	bne	9788 <CGPIOPin::SetMode(TGPIOMode, int)+0x130>
    9760:	e1a00004 	mov	r0, r4
    9764:	ebffff87 	bl	9588 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9768:	e3a03000 	mov	r3, #0
    976c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9770:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9774:	e59f009c 	ldr	r0, [pc, #156]	; 9818 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c0>
    9778:	e59f109c 	ldr	r1, [pc, #156]	; 981c <CGPIOPin::SetMode(TGPIOMode, int)+0x1c4>
    977c:	e3a0203a 	mov	r2, #58	; 0x3a
    9780:	eb000cca 	bl	cab0 <assertion_failed>
    9784:	eaffffb9 	b	9670 <CGPIOPin::SetMode(TGPIOMode, int)+0x18>
    9788:	e1a01000 	mov	r1, r0
    978c:	e1a00004 	mov	r0, r4
    9790:	ebffff45 	bl	94ac <CGPIOPin::SetPullUpMode(unsigned int)>
    9794:	e5943008 	ldr	r3, [r4, #8]
    9798:	e2431004 	sub	r1, r3, #4
    979c:	eaffffef 	b	9760 <CGPIOPin::SetMode(TGPIOMode, int)+0x108>
    97a0:	e59f0078 	ldr	r0, [pc, #120]	; 9820 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c8>
    97a4:	e59f1070 	ldr	r1, [pc, #112]	; 981c <CGPIOPin::SetMode(TGPIOMode, int)+0x1c4>
    97a8:	e3a02053 	mov	r2, #83	; 0x53
    97ac:	eb000cbf 	bl	cab0 <assertion_failed>
    97b0:	e5943004 	ldr	r3, [r4, #4]
    97b4:	eaffffbe 	b	96b4 <CGPIOPin::SetMode(TGPIOMode, int)+0x5c>
    97b8:	eb000187 	bl	9ddc <EnterCritical>
    97bc:	eaffffc9 	b	96e8 <CGPIOPin::SetMode(TGPIOMode, int)+0x90>
    97c0:	eb000194 	bl	9e18 <LeaveCritical>
    97c4:	e3570000 	cmp	r7, #0
    97c8:	0affffdf 	beq	974c <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    97cc:	eaffffd3 	b	9720 <CGPIOPin::SetMode(TGPIOMode, int)+0xc8>
    97d0:	e1a00004 	mov	r0, r4
    97d4:	e3a01002 	mov	r1, #2
    97d8:	ebffff33 	bl	94ac <CGPIOPin::SetPullUpMode(unsigned int)>
    97dc:	eaffffda 	b	974c <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    97e0:	e1a00004 	mov	r0, r4
    97e4:	e3a01000 	mov	r1, #0
    97e8:	ebfffd1a 	bl	8c58 <CGPIOPin::Write(unsigned int)>
    97ec:	eaffffd6 	b	974c <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    97f0:	e1a00004 	mov	r0, r4
    97f4:	e3a01000 	mov	r1, #0
    97f8:	ebffff2b 	bl	94ac <CGPIOPin::SetPullUpMode(unsigned int)>
    97fc:	eaffffd2 	b	974c <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9800:	e1a01000 	mov	r1, r0
    9804:	e1a00004 	mov	r0, r4
    9808:	ebffff27 	bl	94ac <CGPIOPin::SetPullUpMode(unsigned int)>
    980c:	eaffffa5 	b	96a8 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9810:	cccccccd 	.word	0xcccccccd
    9814:	00050ff4 	.word	0x00050ff4
    9818:	00010308 	.word	0x00010308
    981c:	00010104 	.word	0x00010104
    9820:	00010130 	.word	0x00010130

00009824 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9824:	e92d4070 	push	{r4, r5, r6, lr}
    9828:	e1a05001 	mov	r5, r1
    982c:	e1a04000 	mov	r4, r0
    9830:	e3a0c00a 	mov	ip, #10
    9834:	e3a00006 	mov	r0, #6
    9838:	e3a01000 	mov	r1, #0
    983c:	e59fe068 	ldr	lr, [pc, #104]	; 98ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x88>
    9840:	e3550035 	cmp	r5, #53	; 0x35
    9844:	e5845004 	str	r5, [r4, #4]
    9848:	e5843010 	str	r3, [r4, #16]
    984c:	e1a06002 	mov	r6, r2
    9850:	e584e000 	str	lr, [r4]
    9854:	e584c008 	str	ip, [r4, #8]
    9858:	e5841014 	str	r1, [r4, #20]
    985c:	e584001c 	str	r0, [r4, #28]
    9860:	e5840020 	str	r0, [r4, #32]
    9864:	8a000005 	bhi	9880 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    9868:	e1a00004 	mov	r0, r4
    986c:	e1a01006 	mov	r1, r6
    9870:	e3a02001 	mov	r2, #1
    9874:	ebffff77 	bl	9658 <CGPIOPin::SetMode(TGPIOMode, int)>
    9878:	e1a00004 	mov	r0, r4
    987c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9880:	eb001501 	bl	ec8c <CMachineInfo::Get()>
    9884:	e1a01005 	mov	r1, r5
    9888:	eb0014d3 	bl	ebdc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    988c:	e3500035 	cmp	r0, #53	; 0x35
    9890:	e5840004 	str	r0, [r4, #4]
    9894:	9afffff3 	bls	9868 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9898:	e59f0010 	ldr	r0, [pc, #16]	; 98b0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x8c>
    989c:	e59f1010 	ldr	r1, [pc, #16]	; 98b4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    98a0:	e3a0202b 	mov	r2, #43	; 0x2b
    98a4:	eb000c81 	bl	cab0 <assertion_failed>
    98a8:	eaffffee 	b	9868 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    98ac:	000100d8 	.word	0x000100d8
    98b0:	00010130 	.word	0x00010130
    98b4:	00010104 	.word	0x00010104

000098b8 <CGPIOPin::InterruptHandler()>:
    98b8:	e5903008 	ldr	r3, [r0, #8]
    98bc:	e92d4010 	push	{r4, lr}
    98c0:	e2432002 	sub	r2, r3, #2
    98c4:	e3530000 	cmp	r3, #0
    98c8:	13520001 	cmpne	r2, #1
    98cc:	e1a04000 	mov	r4, r0
    98d0:	9a000003 	bls	98e4 <CGPIOPin::InterruptHandler()+0x2c>
    98d4:	e59f0074 	ldr	r0, [pc, #116]	; 9950 <CGPIOPin::InterruptHandler()+0x98>
    98d8:	e59f1074 	ldr	r1, [pc, #116]	; 9954 <CGPIOPin::InterruptHandler()+0x9c>
    98dc:	e59f2074 	ldr	r2, [pc, #116]	; 9958 <CGPIOPin::InterruptHandler()+0xa0>
    98e0:	eb000c72 	bl	cab0 <assertion_failed>
    98e4:	e594301c 	ldr	r3, [r4, #28]
    98e8:	e3530005 	cmp	r3, #5
    98ec:	da000002 	ble	98fc <CGPIOPin::InterruptHandler()+0x44>
    98f0:	e5943020 	ldr	r3, [r4, #32]
    98f4:	e3530005 	cmp	r3, #5
    98f8:	ca000005 	bgt	9914 <CGPIOPin::InterruptHandler()+0x5c>
    98fc:	e5943014 	ldr	r3, [r4, #20]
    9900:	e3530000 	cmp	r3, #0
    9904:	0a000009 	beq	9930 <CGPIOPin::InterruptHandler()+0x78>
    9908:	e5940018 	ldr	r0, [r4, #24]
    990c:	e8bd4010 	pop	{r4, lr}
    9910:	e12fff13 	bx	r3
    9914:	e59f0040 	ldr	r0, [pc, #64]	; 995c <CGPIOPin::InterruptHandler()+0xa4>
    9918:	e59f1034 	ldr	r1, [pc, #52]	; 9954 <CGPIOPin::InterruptHandler()+0x9c>
    991c:	e59f203c 	ldr	r2, [pc, #60]	; 9960 <CGPIOPin::InterruptHandler()+0xa8>
    9920:	eb000c62 	bl	cab0 <assertion_failed>
    9924:	e5943014 	ldr	r3, [r4, #20]
    9928:	e3530000 	cmp	r3, #0
    992c:	1afffff5 	bne	9908 <CGPIOPin::InterruptHandler()+0x50>
    9930:	e59f002c 	ldr	r0, [pc, #44]	; 9964 <CGPIOPin::InterruptHandler()+0xac>
    9934:	e59f1018 	ldr	r1, [pc, #24]	; 9954 <CGPIOPin::InterruptHandler()+0x9c>
    9938:	e59f2028 	ldr	r2, [pc, #40]	; 9968 <CGPIOPin::InterruptHandler()+0xb0>
    993c:	eb000c5b 	bl	cab0 <assertion_failed>
    9940:	e5943014 	ldr	r3, [r4, #20]
    9944:	e5940018 	ldr	r0, [r4, #24]
    9948:	e8bd4010 	pop	{r4, lr}
    994c:	e12fff13 	bx	r3
    9950:	00010144 	.word	0x00010144
    9954:	00010104 	.word	0x00010104
    9958:	00000153 	.word	0x00000153
    995c:	00010320 	.word	0x00010320
    9960:	00000155 	.word	0x00000155
    9964:	00010238 	.word	0x00010238
    9968:	00000157 	.word	0x00000157

0000996c <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    996c:	e3500035 	cmp	r0, #53	; 0x35
    9970:	e92d4070 	push	{r4, r5, r6, lr}
    9974:	e1a05000 	mov	r5, r0
    9978:	8a00001e 	bhi	99f8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    997c:	e3a03001 	mov	r3, #1
    9980:	e59f6088 	ldr	r6, [pc, #136]	; 9a10 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    9984:	e59f4088 	ldr	r4, [pc, #136]	; 9a14 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    9988:	e5961000 	ldr	r1, [r6]
    998c:	e1a022a5 	lsr	r2, r5, #5
    9990:	e0824004 	add	r4, r2, r4
    9994:	e205501f 	and	r5, r5, #31
    9998:	e3510000 	cmp	r1, #0
    999c:	e1a04104 	lsl	r4, r4, #2
    99a0:	e1a05513 	lsl	r5, r3, r5
    99a4:	1a00000e 	bne	99e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    99a8:	e59f3068 	ldr	r3, [pc, #104]	; 9a18 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    99ac:	e1540003 	cmp	r4, r3
    99b0:	8a000015 	bhi	9a0c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    99b4:	e1e02005 	mvn	r2, r5
    99b8:	e59f1058 	ldr	r1, [pc, #88]	; 9a18 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    99bc:	e5943000 	ldr	r3, [r4]
    99c0:	e0033002 	and	r3, r3, r2
    99c4:	e484300c 	str	r3, [r4], #12
    99c8:	e1540001 	cmp	r4, r1
    99cc:	9afffffa 	bls	99bc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    99d0:	e5963000 	ldr	r3, [r6]
    99d4:	e3530000 	cmp	r3, #0
    99d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    99dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    99e0:	ea00010c 	b	9e18 <LeaveCritical>
    99e4:	eb0000fc 	bl	9ddc <EnterCritical>
    99e8:	e59f3028 	ldr	r3, [pc, #40]	; 9a18 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    99ec:	e1540003 	cmp	r4, r3
    99f0:	9affffef 	bls	99b4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    99f4:	eafffff5 	b	99d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
    99f8:	e59f001c 	ldr	r0, [pc, #28]	; 9a1c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    99fc:	e59f101c 	ldr	r1, [pc, #28]	; 9a20 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    9a00:	e59f201c 	ldr	r2, [pc, #28]	; 9a24 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb8>
    9a04:	eb000c29 	bl	cab0 <assertion_failed>
    9a08:	eaffffdb 	b	997c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    9a0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a10:	00050ff4 	.word	0x00050ff4
    9a14:	08080013 	.word	0x08080013
    9a18:	2020008b 	.word	0x2020008b
    9a1c:	0001036c 	.word	0x0001036c
    9a20:	00010104 	.word	0x00010104
    9a24:	0000015d 	.word	0x0000015d

00009a28 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9a28:	e3a02001 	mov	r2, #1
    9a2c:	e59f3004 	ldr	r3, [pc, #4]	; 9a38 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    9a30:	e5832000 	str	r2, [r3]
    9a34:	e12fff1e 	bx	lr
    9a38:	00050ff4 	.word	0x00050ff4

00009a3c <CMemorySystem::~CMemorySystem()>:
    9a3c:	e92d4038 	push	{r3, r4, r5, lr}
    9a40:	e5903000 	ldr	r3, [r0]
    9a44:	e1a04000 	mov	r4, r0
    9a48:	e3530000 	cmp	r3, #0
    9a4c:	0a000005 	beq	9a68 <CMemorySystem::~CMemorySystem()+0x2c>
    9a50:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
    9a54:	e59f3054 	ldr	r3, [pc, #84]	; 9ab0 <CMemorySystem::~CMemorySystem()+0x74>
    9a58:	e0033002 	and	r3, r3, r2
    9a5c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9a60:	e3a03000 	mov	r3, #0
    9a64:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9a68:	e594500c 	ldr	r5, [r4, #12]
    9a6c:	e3550000 	cmp	r5, #0
    9a70:	0a000003 	beq	9a84 <CMemorySystem::~CMemorySystem()+0x48>
    9a74:	e1a00005 	mov	r0, r5
    9a78:	eb00074e 	bl	b7b8 <CPageTable::~CPageTable()>
    9a7c:	e1a00005 	mov	r0, r5
    9a80:	eb0000d3 	bl	9dd4 <operator delete(void*)>
    9a84:	e3a03000 	mov	r3, #0
    9a88:	e5945008 	ldr	r5, [r4, #8]
    9a8c:	e584300c 	str	r3, [r4, #12]
    9a90:	e1550003 	cmp	r5, r3
    9a94:	0a000003 	beq	9aa8 <CMemorySystem::~CMemorySystem()+0x6c>
    9a98:	e1a00005 	mov	r0, r5
    9a9c:	eb000745 	bl	b7b8 <CPageTable::~CPageTable()>
    9aa0:	e1a00005 	mov	r0, r5
    9aa4:	eb0000ca 	bl	9dd4 <operator delete(void*)>
    9aa8:	e1a00004 	mov	r0, r4
    9aac:	e8bd8038 	pop	{r3, r4, r5, pc}
    9ab0:	ff7fe7fa 	.word	0xff7fe7fa

00009ab4 <CMemorySystem::GetMemSize() const>:
    9ab4:	e5900004 	ldr	r0, [r0, #4]
    9ab8:	e12fff1e 	bx	lr

00009abc <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)>:
    9abc:	e5903000 	ldr	r3, [r0]
    9ac0:	e92d4070 	push	{r4, r5, r6, lr}
    9ac4:	e3530000 	cmp	r3, #0
    9ac8:	e1a04000 	mov	r4, r0
    9acc:	e1a05001 	mov	r5, r1
    9ad0:	e1a06002 	mov	r6, r2
    9ad4:	0a00000c 	beq	9b0c <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x50>
    9ad8:	e3550000 	cmp	r5, #0
    9adc:	05945008 	ldreq	r5, [r4, #8]
    9ae0:	ee1d4f30 	mrc	15, 0, r4, cr13, cr0, {1}
    9ae4:	e1a00005 	mov	r0, r5
    9ae8:	eb00073b 	bl	b7dc <CPageTable::GetBaseAddress() const>
    9aec:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9af0:	e3a03000 	mov	r3, #0
    9af4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9af8:	ee0d6f30 	mcr	15, 0, r6, cr13, cr0, {1}
    9afc:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    9b00:	e6ef4074 	uxtb	r4, r4
    9b04:	ee084f57 	mcr	15, 0, r4, cr8, cr7, {2}
    9b08:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b0c:	e59f000c 	ldr	r0, [pc, #12]	; 9b20 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x64>
    9b10:	e59f100c 	ldr	r1, [pc, #12]	; 9b24 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x68>
    9b14:	e3a02083 	mov	r2, #131	; 0x83
    9b18:	eb000be4 	bl	cab0 <assertion_failed>
    9b1c:	eaffffed 	b	9ad8 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x1c>
    9b20:	00010380 	.word	0x00010380
    9b24:	00010390 	.word	0x00010390

00009b28 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)>:
    9b28:	e92d4038 	push	{r3, r4, r5, lr}
    9b2c:	e5903000 	ldr	r3, [r0]
    9b30:	e1a05001 	mov	r5, r1
    9b34:	e3530000 	cmp	r3, #0
    9b38:	e1a04002 	mov	r4, r2
    9b3c:	1a000003 	bne	9b50 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)+0x28>
    9b40:	e59f002c 	ldr	r0, [pc, #44]	; 9b74 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)+0x4c>
    9b44:	e59f102c 	ldr	r1, [pc, #44]	; 9b78 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)+0x50>
    9b48:	e3a02099 	mov	r2, #153	; 0x99
    9b4c:	eb000bd7 	bl	cab0 <assertion_failed>
    9b50:	ee1d3f30 	mrc	15, 0, r3, cr13, cr0, {1}
    9b54:	ee025f10 	mcr	15, 0, r5, cr2, cr0, {0}
    9b58:	e3a01000 	mov	r1, #0
    9b5c:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    9b60:	ee0d4f30 	mcr	15, 0, r4, cr13, cr0, {1}
    9b64:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
    9b68:	e6ef3073 	uxtb	r3, r3
    9b6c:	ee083f57 	mcr	15, 0, r3, cr8, cr7, {2}
    9b70:	e8bd8038 	pop	{r3, r4, r5, pc}
    9b74:	00010380 	.word	0x00010380
    9b78:	00010390 	.word	0x00010390

00009b7c <CMemorySystem::GetTTBR0() const>:
    9b7c:	e92d4008 	push	{r3, lr}
    9b80:	e5903000 	ldr	r3, [r0]
    9b84:	e3530000 	cmp	r3, #0
    9b88:	1a000003 	bne	9b9c <CMemorySystem::GetTTBR0() const+0x20>
    9b8c:	e59f0010 	ldr	r0, [pc, #16]	; 9ba4 <CMemorySystem::GetTTBR0() const+0x28>
    9b90:	e59f1010 	ldr	r1, [pc, #16]	; 9ba8 <CMemorySystem::GetTTBR0() const+0x2c>
    9b94:	e3a020aa 	mov	r2, #170	; 0xaa
    9b98:	eb000bc4 	bl	cab0 <assertion_failed>
    9b9c:	ee120f10 	mrc	15, 0, r0, cr2, cr0, {0}
    9ba0:	e8bd8008 	pop	{r3, pc}
    9ba4:	00010380 	.word	0x00010380
    9ba8:	00010390 	.word	0x00010390

00009bac <CMemorySystem::GetContextID() const>:
    9bac:	e92d4008 	push	{r3, lr}
    9bb0:	e5903000 	ldr	r3, [r0]
    9bb4:	e3530000 	cmp	r3, #0
    9bb8:	1a000003 	bne	9bcc <CMemorySystem::GetContextID() const+0x20>
    9bbc:	e59f0010 	ldr	r0, [pc, #16]	; 9bd4 <CMemorySystem::GetContextID() const+0x28>
    9bc0:	e59f1010 	ldr	r1, [pc, #16]	; 9bd8 <CMemorySystem::GetContextID() const+0x2c>
    9bc4:	e3a020b4 	mov	r2, #180	; 0xb4
    9bc8:	eb000bb8 	bl	cab0 <assertion_failed>
    9bcc:	ee1d0f30 	mrc	15, 0, r0, cr13, cr0, {1}
    9bd0:	e8bd8008 	pop	{r3, pc}
    9bd4:	00010380 	.word	0x00010380
    9bd8:	00010390 	.word	0x00010390

00009bdc <CMemorySystem::EnableMMU()>:
    9bdc:	e5903000 	ldr	r3, [r0]
    9be0:	e92d4010 	push	{r4, lr}
    9be4:	e3530000 	cmp	r3, #0
    9be8:	e1a04000 	mov	r4, r0
    9bec:	0a000021 	beq	9c78 <CMemorySystem::EnableMMU()+0x9c>
    9bf0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    9bf4:	e3833040 	orr	r3, r3, #64	; 0x40
    9bf8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    9bfc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9c00:	e3130001 	tst	r3, #1
    9c04:	1a000020 	bne	9c8c <CMemorySystem::EnableMMU()+0xb0>
    9c08:	e3a03003 	mov	r3, #3
    9c0c:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9c10:	e5940008 	ldr	r0, [r4, #8]
    9c14:	e3500000 	cmp	r0, #0
    9c18:	0a000026 	beq	9cb8 <CMemorySystem::EnableMMU()+0xdc>
    9c1c:	eb0006ee 	bl	b7dc <CPageTable::GetBaseAddress() const>
    9c20:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9c24:	e594000c 	ldr	r0, [r4, #12]
    9c28:	e3500000 	cmp	r0, #0
    9c2c:	0a00001b 	beq	9ca0 <CMemorySystem::EnableMMU()+0xc4>
    9c30:	eb0006e9 	bl	b7dc <CPageTable::GetBaseAddress() const>
    9c34:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9c38:	e3a03005 	mov	r3, #5
    9c3c:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9c40:	e3a03000 	mov	r3, #0
    9c44:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    9c48:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9c4c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9c50:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9c54:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9c58:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9c5c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    9c60:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9c64:	e59f2064 	ldr	r2, [pc, #100]	; 9cd0 <CMemorySystem::EnableMMU()+0xf4>
    9c68:	e3c33002 	bic	r3, r3, #2
    9c6c:	e1832002 	orr	r2, r3, r2
    9c70:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
    9c74:	e8bd8010 	pop	{r4, pc}
    9c78:	e59f0054 	ldr	r0, [pc, #84]	; 9cd4 <CMemorySystem::EnableMMU()+0xf8>
    9c7c:	e59f1054 	ldr	r1, [pc, #84]	; 9cd8 <CMemorySystem::EnableMMU()+0xfc>
    9c80:	e3a020c0 	mov	r2, #192	; 0xc0
    9c84:	eb000b89 	bl	cab0 <assertion_failed>
    9c88:	eaffffd8 	b	9bf0 <CMemorySystem::EnableMMU()+0x14>
    9c8c:	e59f0048 	ldr	r0, [pc, #72]	; 9cdc <CMemorySystem::EnableMMU()+0x100>
    9c90:	e59f1040 	ldr	r1, [pc, #64]	; 9cd8 <CMemorySystem::EnableMMU()+0xfc>
    9c94:	e3a020cd 	mov	r2, #205	; 0xcd
    9c98:	eb000b84 	bl	cab0 <assertion_failed>
    9c9c:	eaffffd9 	b	9c08 <CMemorySystem::EnableMMU()+0x2c>
    9ca0:	e59f0038 	ldr	r0, [pc, #56]	; 9ce0 <CMemorySystem::EnableMMU()+0x104>
    9ca4:	e59f102c 	ldr	r1, [pc, #44]	; 9cd8 <CMemorySystem::EnableMMU()+0xfc>
    9ca8:	e3a020d7 	mov	r2, #215	; 0xd7
    9cac:	eb000b7f 	bl	cab0 <assertion_failed>
    9cb0:	e594000c 	ldr	r0, [r4, #12]
    9cb4:	eaffffdd 	b	9c30 <CMemorySystem::EnableMMU()+0x54>
    9cb8:	e59f0024 	ldr	r0, [pc, #36]	; 9ce4 <CMemorySystem::EnableMMU()+0x108>
    9cbc:	e59f1014 	ldr	r1, [pc, #20]	; 9cd8 <CMemorySystem::EnableMMU()+0xfc>
    9cc0:	e3a020d3 	mov	r2, #211	; 0xd3
    9cc4:	eb000b79 	bl	cab0 <assertion_failed>
    9cc8:	e5940008 	ldr	r0, [r4, #8]
    9ccc:	eaffffd2 	b	9c1c <CMemorySystem::EnableMMU()+0x40>
    9cd0:	00c01805 	.word	0x00c01805
    9cd4:	00010380 	.word	0x00010380
    9cd8:	00010390 	.word	0x00010390
    9cdc:	0001039c 	.word	0x0001039c
    9ce0:	000103e4 	.word	0x000103e4
    9ce4:	000103c8 	.word	0x000103c8

00009ce8 <CMemorySystem::CMemorySystem(int)>:
    9ce8:	e92d4030 	push	{r4, r5, lr}
    9cec:	e3a05000 	mov	r5, #0
    9cf0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9cf4:	e8800022 	stm	r0, {r1, r5}
    9cf8:	e5805008 	str	r5, [r0, #8]
    9cfc:	e580500c 	str	r5, [r0, #12]
    9d00:	e1a04000 	mov	r4, r0
    9d04:	e28d000c 	add	r0, sp, #12
    9d08:	ebfffb59 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    9d0c:	e58d5000 	str	r5, [sp]
    9d10:	e28d000c 	add	r0, sp, #12
    9d14:	e59f10a4 	ldr	r1, [pc, #164]	; 9dc0 <CMemorySystem::CMemorySystem(int)+0xd8>
    9d18:	e28d2014 	add	r2, sp, #20
    9d1c:	e3a03014 	mov	r3, #20
    9d20:	ebfffb9b 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9d24:	e3500000 	cmp	r0, #0
    9d28:	0a000012 	beq	9d78 <CMemorySystem::CMemorySystem(int)+0x90>
    9d2c:	e59d0020 	ldr	r0, [sp, #32]
    9d30:	e1500005 	cmp	r0, r5
    9d34:	0a000004 	beq	9d4c <CMemorySystem::CMemorySystem(int)+0x64>
    9d38:	e59f0084 	ldr	r0, [pc, #132]	; 9dc4 <CMemorySystem::CMemorySystem(int)+0xdc>
    9d3c:	e59f1084 	ldr	r1, [pc, #132]	; 9dc8 <CMemorySystem::CMemorySystem(int)+0xe0>
    9d40:	e3a02042 	mov	r2, #66	; 0x42
    9d44:	eb000b59 	bl	cab0 <assertion_failed>
    9d48:	e59d0020 	ldr	r0, [sp, #32]
    9d4c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    9d50:	e5841004 	str	r1, [r4, #4]
    9d54:	eb001505 	bl	f170 <mem_init>
    9d58:	e5943000 	ldr	r3, [r4]
    9d5c:	e3530000 	cmp	r3, #0
    9d60:	1a000008 	bne	9d88 <CMemorySystem::CMemorySystem(int)+0xa0>
    9d64:	e28d000c 	add	r0, sp, #12
    9d68:	ebfffb47 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    9d6c:	e1a00004 	mov	r0, r4
    9d70:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9d74:	e8bd8030 	pop	{r4, r5, pc}
    9d78:	e3a03303 	mov	r3, #201326592	; 0xc000000
    9d7c:	e58d0020 	str	r0, [sp, #32]
    9d80:	e58d3024 	str	r3, [sp, #36]	; 0x24
    9d84:	eafffff0 	b	9d4c <CMemorySystem::CMemorySystem(int)+0x64>
    9d88:	e3a00008 	mov	r0, #8
    9d8c:	eb00000e 	bl	9dcc <operator new(unsigned int)>
    9d90:	e1a05000 	mov	r5, r0
    9d94:	e5941004 	ldr	r1, [r4, #4]
    9d98:	eb00063d 	bl	b694 <CPageTable::CPageTable(unsigned int)>
    9d9c:	e5845008 	str	r5, [r4, #8]
    9da0:	e3a00008 	mov	r0, #8
    9da4:	eb000008 	bl	9dcc <operator new(unsigned int)>
    9da8:	e1a05000 	mov	r5, r0
    9dac:	eb000611 	bl	b5f8 <CPageTable::CPageTable()>
    9db0:	e584500c 	str	r5, [r4, #12]
    9db4:	e1a00004 	mov	r0, r4
    9db8:	ebffff87 	bl	9bdc <CMemorySystem::EnableMMU()>
    9dbc:	eaffffe8 	b	9d64 <CMemorySystem::CMemorySystem(int)+0x7c>
    9dc0:	00010005 	.word	0x00010005
    9dc4:	000103f8 	.word	0x000103f8
    9dc8:	00010390 	.word	0x00010390

00009dcc <operator new(unsigned int)>:
    9dcc:	ea001500 	b	f1d4 <malloc>

00009dd0 <operator new[](unsigned int)>:
    9dd0:	ea0014ff 	b	f1d4 <malloc>

00009dd4 <operator delete(void*)>:
    9dd4:	ea00156f 	b	f398 <free>

00009dd8 <operator delete[](void*)>:
    9dd8:	ea00156e 	b	f398 <free>

00009ddc <EnterCritical>:
    9ddc:	e10f3000 	mrs	r3, CPSR
    9de0:	f10c0080 	cpsid	i
    9de4:	e59f1028 	ldr	r1, [pc, #40]	; 9e14 <EnterCritical+0x38>
    9de8:	e5912000 	ldr	r2, [r1]
    9dec:	e3520000 	cmp	r2, #0
    9df0:	01a033a3 	lsreq	r3, r3, #7
    9df4:	02233001 	eoreq	r3, r3, #1
    9df8:	02033001 	andeq	r3, r3, #1
    9dfc:	e2822001 	add	r2, r2, #1
    9e00:	e5812000 	str	r2, [r1]
    9e04:	05813004 	streq	r3, [r1, #4]
    9e08:	e3a03000 	mov	r3, #0
    9e0c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9e10:	e12fff1e 	bx	lr
    9e14:	00050ff8 	.word	0x00050ff8

00009e18 <LeaveCritical>:
    9e18:	e92d4010 	push	{r4, lr}
    9e1c:	e3a03000 	mov	r3, #0
    9e20:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9e24:	e59f4048 	ldr	r4, [pc, #72]	; 9e74 <LeaveCritical+0x5c>
    9e28:	e5943000 	ldr	r3, [r4]
    9e2c:	e3530000 	cmp	r3, #0
    9e30:	0a00000a 	beq	9e60 <LeaveCritical+0x48>
    9e34:	e5943000 	ldr	r3, [r4]
    9e38:	e59f2034 	ldr	r2, [pc, #52]	; 9e74 <LeaveCritical+0x5c>
    9e3c:	e2433001 	sub	r3, r3, #1
    9e40:	e3530000 	cmp	r3, #0
    9e44:	e5843000 	str	r3, [r4]
    9e48:	18bd8010 	popne	{r4, pc}
    9e4c:	e5923004 	ldr	r3, [r2, #4]
    9e50:	e3530000 	cmp	r3, #0
    9e54:	08bd8010 	popeq	{r4, pc}
    9e58:	f1080080 	cpsie	i
    9e5c:	e8bd8010 	pop	{r4, pc}
    9e60:	e59f0010 	ldr	r0, [pc, #16]	; 9e78 <LeaveCritical+0x60>
    9e64:	e59f1010 	ldr	r1, [pc, #16]	; 9e7c <LeaveCritical+0x64>
    9e68:	e3a0205b 	mov	r2, #91	; 0x5b
    9e6c:	eb000b0f 	bl	cab0 <assertion_failed>
    9e70:	eaffffef 	b	9e34 <LeaveCritical+0x1c>
    9e74:	00050ff8 	.word	0x00050ff8
    9e78:	00010414 	.word	0x00010414
    9e7c:	0001042c 	.word	0x0001042c

00009e80 <CleanAndInvalidateDataCacheRange>:
    9e80:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    9e84:	e2813020 	add	r3, r1, #32
    9e88:	e353001f 	cmp	r3, #31
    9e8c:	82800020 	addhi	r0, r0, #32
    9e90:	83c1101f 	bichi	r1, r1, #31
    9e94:	80801001 	addhi	r1, r0, r1
    9e98:	8a000001 	bhi	9ea4 <CleanAndInvalidateDataCacheRange+0x24>
    9e9c:	ea000003 	b	9eb0 <CleanAndInvalidateDataCacheRange+0x30>
    9ea0:	e2800020 	add	r0, r0, #32
    9ea4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    9ea8:	e1500001 	cmp	r0, r1
    9eac:	1afffffb 	bne	9ea0 <CleanAndInvalidateDataCacheRange+0x20>
    9eb0:	e3a03000 	mov	r3, #0
    9eb4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9eb8:	e12fff1e 	bx	lr

00009ebc <SyncDataAndInstructionCache>:
    9ebc:	e3a03000 	mov	r3, #0
    9ec0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    9ec4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9ec8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9ecc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9ed0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9ed4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    9ed8:	e12fff1e 	bx	lr

00009edc <__aeabi_atexit>:
    9edc:	e12fff1e 	bx	lr

00009ee0 <halt>:
    9ee0:	f10c0080 	cpsid	i
    9ee4:	eafffffe 	b	9ee4 <halt+0x4>

00009ee8 <reboot>:
    9ee8:	e3a03000 	mov	r3, #0
    9eec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9ef0:	e59f3010 	ldr	r3, [pc, #16]	; 9f08 <reboot+0x20>
    9ef4:	e59f1010 	ldr	r1, [pc, #16]	; 9f0c <reboot+0x24>
    9ef8:	e59f2010 	ldr	r2, [pc, #16]	; 9f10 <reboot+0x28>
    9efc:	e5831024 	str	r1, [r3, #36]	; 0x24
    9f00:	e583201c 	str	r2, [r3, #28]
    9f04:	eafffffe 	b	9f04 <reboot+0x1c>
    9f08:	20100000 	.word	0x20100000
    9f0c:	5a000001 	.word	0x5a000001
    9f10:	5a000020 	.word	0x5a000020

00009f14 <sysinit>:
    9f14:	e92d4070 	push	{r4, r5, r6, lr}
    9f18:	e24dd018 	sub	sp, sp, #24
    9f1c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9f20:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9f24:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9f28:	e3a02000 	mov	r2, #0
    9f2c:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
    9f30:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    9f34:	eee83a10 	vmsr	fpexc, r3
    9f38:	eee12a10 	vmsr	fpscr, r2
    9f3c:	e59f3070 	ldr	r3, [pc, #112]	; 9fb4 <sysinit+0xa0>
    9f40:	e59f1070 	ldr	r1, [pc, #112]	; 9fb8 <sysinit+0xa4>
    9f44:	e1530001 	cmp	r3, r1
    9f48:	2a000002 	bcs	9f58 <sysinit+0x44>
    9f4c:	e4c32001 	strb	r2, [r3], #1
    9f50:	e1530001 	cmp	r3, r1
    9f54:	1afffffc 	bne	9f4c <sysinit+0x38>
    9f58:	e1a0000d 	mov	r0, sp
    9f5c:	eb001258 	bl	e8c4 <CMachineInfo::CMachineInfo()>
    9f60:	e59f4054 	ldr	r4, [pc, #84]	; 9fbc <sysinit+0xa8>
    9f64:	e59f2054 	ldr	r2, [pc, #84]	; 9fc0 <sysinit+0xac>
    9f68:	e1520004 	cmp	r2, r4
    9f6c:	2a00000a 	bcs	9f9c <sysinit+0x88>
    9f70:	e1e03002 	mvn	r3, r2
    9f74:	e1a05002 	mov	r5, r2
    9f78:	e3a06000 	mov	r6, #0
    9f7c:	e0834004 	add	r4, r3, r4
    9f80:	e1a04124 	lsr	r4, r4, #2
    9f84:	e2844001 	add	r4, r4, #1
    9f88:	e2866001 	add	r6, r6, #1
    9f8c:	e4953004 	ldr	r3, [r5], #4
    9f90:	e12fff33 	blx	r3
    9f94:	e1560004 	cmp	r6, r4
    9f98:	1afffffa 	bne	9f88 <sysinit+0x74>
    9f9c:	ebfff82e 	bl	805c <main>
    9fa0:	e3500001 	cmp	r0, #1
    9fa4:	0a000001 	beq	9fb0 <sysinit+0x9c>
    9fa8:	f10c0080 	cpsid	i
    9fac:	eafffffe 	b	9fac <sysinit+0x98>
    9fb0:	ebffffcc 	bl	9ee8 <reboot>
    9fb4:	000127f0 	.word	0x000127f0
    9fb8:	00051044 	.word	0x00051044
    9fbc:	00011d30 	.word	0x00011d30
    9fc0:	00011d24 	.word	0x00011d24

00009fc4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    9fc4:	e2800001 	add	r0, r0, #1
    9fc8:	e3a03000 	mov	r3, #0
    9fcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9fd0:	e59f3020 	ldr	r3, [pc, #32]	; 9ff8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
    9fd4:	e1a01003 	mov	r1, r3
    9fd8:	e5932004 	ldr	r2, [r3, #4]
    9fdc:	e5913004 	ldr	r3, [r1, #4]
    9fe0:	e0623003 	rsb	r3, r2, r3
    9fe4:	e1500003 	cmp	r0, r3
    9fe8:	8afffffb 	bhi	9fdc <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
    9fec:	e3a03000 	mov	r3, #0
    9ff0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9ff4:	e12fff1e 	bx	lr
    9ff8:	20003000 	.word	0x20003000

00009ffc <CTimer::CTimer(CInterruptSystem*)>:
    9ffc:	e92d4070 	push	{r4, r5, r6, lr}
    a000:	e3a03000 	mov	r3, #0
    a004:	e3a06001 	mov	r6, #1
    a008:	e1a04000 	mov	r4, r0
    a00c:	e59f5058 	ldr	r5, [pc, #88]	; a06c <CTimer::CTimer(CInterruptSystem*)+0x70>
    a010:	e5803004 	str	r3, [r0, #4]
    a014:	e5801000 	str	r1, [r0]
    a018:	e5803008 	str	r3, [r0, #8]
    a01c:	e5803014 	str	r3, [r0, #20]
    a020:	e580300c 	str	r3, [r0, #12]
    a024:	e5806010 	str	r6, [r0, #16]
    a028:	e2800018 	add	r0, r0, #24
    a02c:	eb001325 	bl	ecc8 <CPtrList::CPtrList()>
    a030:	e5951000 	ldr	r1, [r5]
    a034:	e59f2034 	ldr	r2, [pc, #52]	; a070 <CTimer::CTimer(CInterruptSystem*)+0x74>
    a038:	e59f3034 	ldr	r3, [pc, #52]	; a074 <CTimer::CTimer(CInterruptSystem*)+0x78>
    a03c:	e3510000 	cmp	r1, #0
    a040:	e584601c 	str	r6, [r4, #28]
    a044:	e5842020 	str	r2, [r4, #32]
    a048:	e5843024 	str	r3, [r4, #36]	; 0x24
    a04c:	0a000003 	beq	a060 <CTimer::CTimer(CInterruptSystem*)+0x64>
    a050:	e59f0020 	ldr	r0, [pc, #32]	; a078 <CTimer::CTimer(CInterruptSystem*)+0x7c>
    a054:	e59f1020 	ldr	r1, [pc, #32]	; a07c <CTimer::CTimer(CInterruptSystem*)+0x80>
    a058:	e3a0203b 	mov	r2, #59	; 0x3b
    a05c:	eb000a93 	bl	cab0 <assertion_failed>
    a060:	e5854000 	str	r4, [r5]
    a064:	e1a00004 	mov	r0, r4
    a068:	e8bd8070 	pop	{r4, r5, r6, pc}
    a06c:	00051004 	.word	0x00051004
    a070:	00055730 	.word	0x00055730
    a074:	0000015e 	.word	0x0000015e
    a078:	00010474 	.word	0x00010474
    a07c:	00010484 	.word	0x00010484

0000a080 <CTimer::~CTimer()>:
    a080:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a084:	e1a08000 	mov	r8, r0
    a088:	e5900000 	ldr	r0, [r0]
    a08c:	e3500000 	cmp	r0, #0
    a090:	0a000024 	beq	a128 <CTimer::~CTimer()+0xa8>
    a094:	e3a01003 	mov	r1, #3
    a098:	eb001031 	bl	e164 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a09c:	e2884018 	add	r4, r8, #24
    a0a0:	e59f7098 	ldr	r7, [pc, #152]	; a140 <CTimer::~CTimer()+0xc0>
    a0a4:	ea000010 	b	a0ec <CTimer::~CTimer()+0x6c>
    a0a8:	e1a00004 	mov	r0, r4
    a0ac:	e1a01005 	mov	r1, r5
    a0b0:	eb00132c 	bl	ed68 <CPtrList::GetPtr(TPtrListElement*)>
    a0b4:	e2506000 	subs	r6, r0, #0
    a0b8:	0a000015 	beq	a114 <CTimer::~CTimer()+0x94>
    a0bc:	e5963000 	ldr	r3, [r6]
    a0c0:	e59f007c 	ldr	r0, [pc, #124]	; a144 <CTimer::~CTimer()+0xc4>
    a0c4:	e1530007 	cmp	r3, r7
    a0c8:	e59f1078 	ldr	r1, [pc, #120]	; a148 <CTimer::~CTimer()+0xc8>
    a0cc:	0a000001 	beq	a0d8 <CTimer::~CTimer()+0x58>
    a0d0:	e3a02049 	mov	r2, #73	; 0x49
    a0d4:	eb000a75 	bl	cab0 <assertion_failed>
    a0d8:	e1a00004 	mov	r0, r4
    a0dc:	e1a01005 	mov	r1, r5
    a0e0:	eb0013b5 	bl	efbc <CPtrList::Remove(TPtrListElement*)>
    a0e4:	e1a00006 	mov	r0, r6
    a0e8:	ebffff39 	bl	9dd4 <operator delete(void*)>
    a0ec:	e1a00004 	mov	r0, r4
    a0f0:	eb001304 	bl	ed08 <CPtrList::GetFirst()>
    a0f4:	e2505000 	subs	r5, r0, #0
    a0f8:	1affffea 	bne	a0a8 <CTimer::~CTimer()+0x28>
    a0fc:	e59f3048 	ldr	r3, [pc, #72]	; a14c <CTimer::~CTimer()+0xcc>
    a100:	e1a00004 	mov	r0, r4
    a104:	e5835000 	str	r5, [r3]
    a108:	eb0012f1 	bl	ecd4 <CPtrList::~CPtrList()>
    a10c:	e1a00008 	mov	r0, r8
    a110:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a114:	e59f0034 	ldr	r0, [pc, #52]	; a150 <CTimer::~CTimer()+0xd0>
    a118:	e59f1028 	ldr	r1, [pc, #40]	; a148 <CTimer::~CTimer()+0xc8>
    a11c:	e3a02048 	mov	r2, #72	; 0x48
    a120:	eb000a62 	bl	cab0 <assertion_failed>
    a124:	eaffffe4 	b	a0bc <CTimer::~CTimer()+0x3c>
    a128:	e59f0024 	ldr	r0, [pc, #36]	; a154 <CTimer::~CTimer()+0xd4>
    a12c:	e59f1014 	ldr	r1, [pc, #20]	; a148 <CTimer::~CTimer()+0xc8>
    a130:	e3a02041 	mov	r2, #65	; 0x41
    a134:	eb000a5d 	bl	cab0 <assertion_failed>
    a138:	e5980000 	ldr	r0, [r8]
    a13c:	eaffffd4 	b	a094 <CTimer::~CTimer()+0x14>
    a140:	4b544d43 	.word	0x4b544d43
    a144:	000104b4 	.word	0x000104b4
    a148:	00010484 	.word	0x00010484
    a14c:	00051004 	.word	0x00051004
    a150:	000104a8 	.word	0x000104a8
    a154:	00010490 	.word	0x00010490

0000a158 <CTimer::SetTimeZone(int)>:
    a158:	e59f2018 	ldr	r2, [pc, #24]	; a178 <CTimer::SetTimeZone(int)+0x20>
    a15c:	e2813e59 	add	r3, r1, #1424	; 0x590
    a160:	e283300f 	add	r3, r3, #15
    a164:	e1530002 	cmp	r3, r2
    a168:	95801014 	strls	r1, [r0, #20]
    a16c:	93a00001 	movls	r0, #1
    a170:	83a00000 	movhi	r0, #0
    a174:	e12fff1e 	bx	lr
    a178:	00000b3e 	.word	0x00000b3e

0000a17c <CTimer::GetTimeZone() const>:
    a17c:	e5900014 	ldr	r0, [r0, #20]
    a180:	e12fff1e 	bx	lr

0000a184 <CTimer::SetTime(unsigned int, int)>:
    a184:	e3520000 	cmp	r2, #0
    a188:	e92d4038 	push	{r3, r4, r5, lr}
    a18c:	e1a04000 	mov	r4, r0
    a190:	e1a05001 	mov	r5, r1
    a194:	1a000004 	bne	a1ac <CTimer::SetTime(unsigned int, int)+0x28>
    a198:	e5903014 	ldr	r3, [r0, #20]
    a19c:	e0633203 	rsb	r3, r3, r3, lsl #4
    a1a0:	e1b03103 	lsls	r3, r3, #2
    a1a4:	4a00000e 	bmi	a1e4 <CTimer::SetTime(unsigned int, int)+0x60>
    a1a8:	e0855003 	add	r5, r5, r3
    a1ac:	e5943010 	ldr	r3, [r4, #16]
    a1b0:	e3530000 	cmp	r3, #0
    a1b4:	1a000002 	bne	a1c4 <CTimer::SetTime(unsigned int, int)+0x40>
    a1b8:	e3a00001 	mov	r0, #1
    a1bc:	e584500c 	str	r5, [r4, #12]
    a1c0:	e8bd8038 	pop	{r3, r4, r5, pc}
    a1c4:	ebffff04 	bl	9ddc <EnterCritical>
    a1c8:	e5943010 	ldr	r3, [r4, #16]
    a1cc:	e584500c 	str	r5, [r4, #12]
    a1d0:	e3530000 	cmp	r3, #0
    a1d4:	0a000007 	beq	a1f8 <CTimer::SetTime(unsigned int, int)+0x74>
    a1d8:	ebffff0e 	bl	9e18 <LeaveCritical>
    a1dc:	e3a00001 	mov	r0, #1
    a1e0:	e8bd8038 	pop	{r3, r4, r5, pc}
    a1e4:	e2631000 	rsb	r1, r3, #0
    a1e8:	e1510005 	cmp	r1, r5
    a1ec:	daffffed 	ble	a1a8 <CTimer::SetTime(unsigned int, int)+0x24>
    a1f0:	e1a00002 	mov	r0, r2
    a1f4:	e8bd8038 	pop	{r3, r4, r5, pc}
    a1f8:	e3a00001 	mov	r0, #1
    a1fc:	e8bd8038 	pop	{r3, r4, r5, pc}

0000a200 <CTimer::GetClockTicks()>:
    a200:	e3a03000 	mov	r3, #0
    a204:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a208:	e59f2008 	ldr	r2, [pc, #8]	; a218 <CTimer::GetClockTicks()+0x18>
    a20c:	e5920004 	ldr	r0, [r2, #4]
    a210:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a214:	e12fff1e 	bx	lr
    a218:	20003000 	.word	0x20003000

0000a21c <CTimer::GetTicks() const>:
    a21c:	e5900004 	ldr	r0, [r0, #4]
    a220:	e12fff1e 	bx	lr

0000a224 <CTimer::GetUptime() const>:
    a224:	e5900008 	ldr	r0, [r0, #8]
    a228:	e12fff1e 	bx	lr

0000a22c <CTimer::GetTime() const>:
    a22c:	e590000c 	ldr	r0, [r0, #12]
    a230:	e12fff1e 	bx	lr

0000a234 <CTimer::GetUniversalTime() const>:
    a234:	e5903014 	ldr	r3, [r0, #20]
    a238:	e590000c 	ldr	r0, [r0, #12]
    a23c:	e0633203 	rsb	r3, r3, r3, lsl #4
    a240:	e1a03103 	lsl	r3, r3, #2
    a244:	e1530000 	cmp	r3, r0
    a248:	d0630000 	rsble	r0, r3, r0
    a24c:	c3a00000 	movgt	r0, #0
    a250:	e12fff1e 	bx	lr

0000a254 <CTimer::GetTimeString()>:
    a254:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a258:	e5903010 	ldr	r3, [r0, #16]
    a25c:	e24dd014 	sub	sp, sp, #20
    a260:	e3530000 	cmp	r3, #0
    a264:	e1a04000 	mov	r4, r0
    a268:	1a00006b 	bne	a41c <CTimer::GetTimeString()+0x1c8>
    a26c:	e590500c 	ldr	r5, [r0, #12]
    a270:	e590a004 	ldr	sl, [r0, #4]
    a274:	e19a0005 	orrs	r0, sl, r5
    a278:	0a00005c 	beq	a3f0 <CTimer::GetTimeString()+0x19c>
    a27c:	e59f71c8 	ldr	r7, [pc, #456]	; a44c <CTimer::GetTimeString()+0x1f8>
    a280:	e3a02064 	mov	r2, #100	; 0x64
    a284:	e0883597 	umull	r3, r8, r7, r5
    a288:	e1a082a8 	lsr	r8, r8, #5
    a28c:	e1a01008 	mov	r1, r8
    a290:	e0873897 	umull	r3, r7, r7, r8
    a294:	e59f31b4 	ldr	r3, [pc, #436]	; a450 <CTimer::GetTimeString()+0x1fc>
    a298:	e1a072a7 	lsr	r7, r7, #5
    a29c:	e0830793 	umull	r0, r3, r3, r7
    a2a0:	e1a09007 	mov	r9, r7
    a2a4:	e0688208 	rsb	r8, r8, r8, lsl #4
    a2a8:	e0677207 	rsb	r7, r7, r7, lsl #4
    a2ac:	e0458108 	sub	r8, r5, r8, lsl #2
    a2b0:	e3a0be19 	mov	fp, #400	; 0x190
    a2b4:	e59f4198 	ldr	r4, [pc, #408]	; a454 <CTimer::GetTimeString()+0x200>
    a2b8:	e59f6198 	ldr	r6, [pc, #408]	; a458 <CTimer::GetTimeString()+0x204>
    a2bc:	e59fe198 	ldr	lr, [pc, #408]	; a45c <CTimer::GetTimeString()+0x208>
    a2c0:	e59fc198 	ldr	ip, [pc, #408]	; a460 <CTimer::GetTimeString()+0x20c>
    a2c4:	e0417107 	sub	r7, r1, r7, lsl #2
    a2c8:	e1a05223 	lsr	r5, r3, #4
    a2cc:	ea00000a 	b	a2fc <CTimer::GetTimeString()+0xa8>
    a2d0:	e001019b 	mul	r1, fp, r1
    a2d4:	e0611004 	rsb	r1, r1, r4
    a2d8:	e16f1f11 	clz	r1, r1
    a2dc:	e1a012a1 	lsr	r1, r1, #5
    a2e0:	e3510000 	cmp	r1, #0
    a2e4:	11a0100e 	movne	r1, lr
    a2e8:	01a0100c 	moveq	r1, ip
    a2ec:	e1550001 	cmp	r5, r1
    a2f0:	3a00000b 	bcc	a324 <CTimer::GetTimeString()+0xd0>
    a2f4:	e0615005 	rsb	r5, r1, r5
    a2f8:	e2844001 	add	r4, r4, #1
    a2fc:	e0813496 	umull	r3, r1, r6, r4
    a300:	e1a002a1 	lsr	r0, r1, #5
    a304:	e0000092 	mul	r0, r2, r0
    a308:	e0540000 	subs	r0, r4, r0
    a30c:	e1a013a1 	lsr	r1, r1, #7
    a310:	0affffee 	beq	a2d0 <CTimer::GetTimeString()+0x7c>
    a314:	e3140003 	tst	r4, #3
    a318:	03a01001 	moveq	r1, #1
    a31c:	13a01000 	movne	r1, #0
    a320:	eaffffee 	b	a2e0 <CTimer::GetTimeString()+0x8c>
    a324:	e3a02e19 	mov	r2, #400	; 0x190
    a328:	e3a06000 	mov	r6, #0
    a32c:	e59f3124 	ldr	r3, [pc, #292]	; a458 <CTimer::GetTimeString()+0x204>
    a330:	e3140003 	tst	r4, #3
    a334:	e0831493 	umull	r1, r3, r3, r4
    a338:	e1a033a3 	lsr	r3, r3, #7
    a33c:	e0030392 	mul	r3, r2, r3
    a340:	e0633004 	rsb	r3, r3, r4
    a344:	e16f3f13 	clz	r3, r3
    a348:	03a01001 	moveq	r1, #1
    a34c:	11a01006 	movne	r1, r6
    a350:	e1a032a3 	lsr	r3, r3, #5
    a354:	e1500006 	cmp	r0, r6
    a358:	e59f2104 	ldr	r2, [pc, #260]	; a464 <CTimer::GetTimeString()+0x210>
    a35c:	01a00003 	moveq	r0, r3
    a360:	11a00001 	movne	r0, r1
    a364:	ea000001 	b	a370 <CTimer::GetTimeString()+0x11c>
    a368:	e0635005 	rsb	r5, r3, r5
    a36c:	e2866001 	add	r6, r6, #1
    a370:	e3560001 	cmp	r6, #1
    a374:	0a000030 	beq	a43c <CTimer::GetTimeString()+0x1e8>
    a378:	e7923106 	ldr	r3, [r2, r6, lsl #2]
    a37c:	e1550003 	cmp	r5, r3
    a380:	2afffff8 	bcs	a368 <CTimer::GetTimeString()+0x114>
    a384:	e3a03064 	mov	r3, #100	; 0x64
    a388:	e59fb0c8 	ldr	fp, [pc, #200]	; a458 <CTimer::GetTimeString()+0x204>
    a38c:	e3a00010 	mov	r0, #16
    a390:	e08b2a9b 	umull	r2, fp, fp, sl
    a394:	e1a0b2ab 	lsr	fp, fp, #5
    a398:	e00b0b93 	mul	fp, r3, fp
    a39c:	ebfffe8a 	bl	9dcc <operator new(unsigned int)>
    a3a0:	e06bb00a 	rsb	fp, fp, sl
    a3a4:	e1a0a000 	mov	sl, r0
    a3a8:	eb000c68 	bl	d550 <CString::CString()>
    a3ac:	e59f30b4 	ldr	r3, [pc, #180]	; a468 <CTimer::GetTimeString()+0x214>
    a3b0:	e1540003 	cmp	r4, r3
    a3b4:	9a00000f 	bls	a3f8 <CTimer::GetTimeString()+0x1a4>
    a3b8:	e59f3090 	ldr	r3, [pc, #144]	; a450 <CTimer::GetTimeString()+0x1fc>
    a3bc:	e59f20a8 	ldr	r2, [pc, #168]	; a46c <CTimer::GetTimeString()+0x218>
    a3c0:	e0831993 	umull	r1, r3, r3, r9
    a3c4:	e1a03223 	lsr	r3, r3, #4
    a3c8:	e0833083 	add	r3, r3, r3, lsl #1
    a3cc:	e0499183 	sub	r9, r9, r3, lsl #3
    a3d0:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    a3d4:	e1a0000a 	mov	r0, sl
    a3d8:	e98d0980 	stmib	sp, {r7, r8, fp}
    a3dc:	e2853001 	add	r3, r5, #1
    a3e0:	e58d9000 	str	r9, [sp]
    a3e4:	e59f1084 	ldr	r1, [pc, #132]	; a470 <CTimer::GetTimeString()+0x21c>
    a3e8:	eb000ec8 	bl	df10 <CString::Format(char const*, ...)>
    a3ec:	e1a0000a 	mov	r0, sl
    a3f0:	e28dd014 	add	sp, sp, #20
    a3f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3f8:	e1a0000a 	mov	r0, sl
    a3fc:	e88d0900 	stm	sp, {r8, fp}
    a400:	e1a02009 	mov	r2, r9
    a404:	e1a03007 	mov	r3, r7
    a408:	e59f1064 	ldr	r1, [pc, #100]	; a474 <CTimer::GetTimeString()+0x220>
    a40c:	eb000ebf 	bl	df10 <CString::Format(char const*, ...)>
    a410:	e1a0000a 	mov	r0, sl
    a414:	e28dd014 	add	sp, sp, #20
    a418:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a41c:	ebfffe6e 	bl	9ddc <EnterCritical>
    a420:	e5943010 	ldr	r3, [r4, #16]
    a424:	e594500c 	ldr	r5, [r4, #12]
    a428:	e3530000 	cmp	r3, #0
    a42c:	e594a004 	ldr	sl, [r4, #4]
    a430:	0affff8f 	beq	a274 <CTimer::GetTimeString()+0x20>
    a434:	ebfffe77 	bl	9e18 <LeaveCritical>
    a438:	eaffff8d 	b	a274 <CTimer::GetTimeString()+0x20>
    a43c:	e3500000 	cmp	r0, #0
    a440:	0affffcc 	beq	a378 <CTimer::GetTimeString()+0x124>
    a444:	e3a0301d 	mov	r3, #29
    a448:	eaffffcb 	b	a37c <CTimer::GetTimeString()+0x128>
    a44c:	88888889 	.word	0x88888889
    a450:	aaaaaaab 	.word	0xaaaaaaab
    a454:	000007b2 	.word	0x000007b2
    a458:	51eb851f 	.word	0x51eb851f
    a45c:	0000016e 	.word	0x0000016e
    a460:	0000016d 	.word	0x0000016d
    a464:	0001043c 	.word	0x0001043c
    a468:	000007b7 	.word	0x000007b7
    a46c:	00012708 	.word	0x00012708
    a470:	000104dc 	.word	0x000104dc
    a474:	000104f8 	.word	0x000104f8

0000a478 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a478:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a47c:	e1a09000 	mov	r9, r0
    a480:	e1a04002 	mov	r4, r2
    a484:	e3a00014 	mov	r0, #20
    a488:	e1a06001 	mov	r6, r1
    a48c:	e1a07003 	mov	r7, r3
    a490:	e59d5020 	ldr	r5, [sp, #32]
    a494:	ebfffe4c 	bl	9dcc <operator new(unsigned int)>
    a498:	e5993004 	ldr	r3, [r9, #4]
    a49c:	e3540000 	cmp	r4, #0
    a4a0:	e1a08000 	mov	r8, r0
    a4a4:	e0866003 	add	r6, r6, r3
    a4a8:	0a000037 	beq	a58c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    a4ac:	e599301c 	ldr	r3, [r9, #28]
    a4b0:	e59f20e8 	ldr	r2, [pc, #232]	; a5a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a4b4:	e3530000 	cmp	r3, #0
    a4b8:	e98800d0 	stmib	r8, {r4, r6, r7}
    a4bc:	e5885010 	str	r5, [r8, #16]
    a4c0:	e5882000 	str	r2, [r8]
    a4c4:	1a00002e 	bne	a584 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a4c8:	e2895018 	add	r5, r9, #24
    a4cc:	e1a00005 	mov	r0, r5
    a4d0:	eb00120c 	bl	ed08 <CPtrList::GetFirst()>
    a4d4:	e2504000 	subs	r4, r0, #0
    a4d8:	0a00001c 	beq	a550 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd8>
    a4dc:	e59f70bc 	ldr	r7, [pc, #188]	; a5a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a4e0:	ea000010 	b	a528 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb0>
    a4e4:	e59a3000 	ldr	r3, [sl]
    a4e8:	e59f00b4 	ldr	r0, [pc, #180]	; a5a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    a4ec:	e1530007 	cmp	r3, r7
    a4f0:	e59f10b0 	ldr	r1, [pc, #176]	; a5a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a4f4:	e59f20b0 	ldr	r2, [pc, #176]	; a5ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    a4f8:	0a000000 	beq	a500 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x88>
    a4fc:	eb00096b 	bl	cab0 <assertion_failed>
    a500:	e59a3008 	ldr	r3, [sl, #8]
    a504:	e1a00005 	mov	r0, r5
    a508:	e0663003 	rsb	r3, r6, r3
    a50c:	e3530000 	cmp	r3, #0
    a510:	e1a01004 	mov	r1, r4
    a514:	ca000017 	bgt	a578 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
    a518:	eb0011fc 	bl	ed10 <CPtrList::GetNext(TPtrListElement*)>
    a51c:	e3500000 	cmp	r0, #0
    a520:	0a00000a 	beq	a550 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd8>
    a524:	e1a04000 	mov	r4, r0
    a528:	e1a00005 	mov	r0, r5
    a52c:	e1a01004 	mov	r1, r4
    a530:	eb00120c 	bl	ed68 <CPtrList::GetPtr(TPtrListElement*)>
    a534:	e250a000 	subs	sl, r0, #0
    a538:	1affffe9 	bne	a4e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    a53c:	e59f006c 	ldr	r0, [pc, #108]	; a5b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    a540:	e59f1060 	ldr	r1, [pc, #96]	; a5a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a544:	e59f2068 	ldr	r2, [pc, #104]	; a5b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    a548:	eb000958 	bl	cab0 <assertion_failed>
    a54c:	eaffffe4 	b	a4e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    a550:	e1a00005 	mov	r0, r5
    a554:	e1a01004 	mov	r1, r4
    a558:	e1a02008 	mov	r2, r8
    a55c:	eb001257 	bl	eec0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a560:	e599301c 	ldr	r3, [r9, #28]
    a564:	e3530000 	cmp	r3, #0
    a568:	0a000000 	beq	a570 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
    a56c:	ebfffe29 	bl	9e18 <LeaveCritical>
    a570:	e1a00008 	mov	r0, r8
    a574:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a578:	e1a02008 	mov	r2, r8
    a57c:	eb00120f 	bl	edc0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a580:	eafffff6 	b	a560 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe8>
    a584:	ebfffe14 	bl	9ddc <EnterCritical>
    a588:	eaffffce 	b	a4c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x50>
    a58c:	e59f0024 	ldr	r0, [pc, #36]	; a5b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    a590:	e59f1010 	ldr	r1, [pc, #16]	; a5a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a594:	e59f2020 	ldr	r2, [pc, #32]	; a5bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a598:	eb000944 	bl	cab0 <assertion_failed>
    a59c:	eaffffc2 	b	a4ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x34>
    a5a0:	4b544d43 	.word	0x4b544d43
    a5a4:	0001051c 	.word	0x0001051c
    a5a8:	00010484 	.word	0x00010484
    a5ac:	00000116 	.word	0x00000116
    a5b0:	0001050c 	.word	0x0001050c
    a5b4:	00000115 	.word	0x00000115
    a5b8:	00010208 	.word	0x00010208
    a5bc:	00000105 	.word	0x00000105

0000a5c0 <CTimer::CancelKernelTimer(unsigned int)>:
    a5c0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    a5c4:	e2514000 	subs	r4, r1, #0
    a5c8:	e1a05000 	mov	r5, r0
    a5cc:	0a00001e 	beq	a64c <CTimer::CancelKernelTimer(unsigned int)+0x8c>
    a5d0:	e595301c 	ldr	r3, [r5, #28]
    a5d4:	e3530000 	cmp	r3, #0
    a5d8:	1a000019 	bne	a644 <CTimer::CancelKernelTimer(unsigned int)+0x84>
    a5dc:	e2856018 	add	r6, r5, #24
    a5e0:	e1a00006 	mov	r0, r6
    a5e4:	e1a01004 	mov	r1, r4
    a5e8:	eb0012c5 	bl	f104 <CPtrList::Find(void*)>
    a5ec:	e2507000 	subs	r7, r0, #0
    a5f0:	0a00000e 	beq	a630 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    a5f4:	e59f3064 	ldr	r3, [pc, #100]	; a660 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
    a5f8:	e5942000 	ldr	r2, [r4]
    a5fc:	e1520003 	cmp	r2, r3
    a600:	0a000003 	beq	a614 <CTimer::CancelKernelTimer(unsigned int)+0x54>
    a604:	e59f0058 	ldr	r0, [pc, #88]	; a664 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
    a608:	e59f1058 	ldr	r1, [pc, #88]	; a668 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    a60c:	e59f2058 	ldr	r2, [pc, #88]	; a66c <CTimer::CancelKernelTimer(unsigned int)+0xac>
    a610:	eb000926 	bl	cab0 <assertion_failed>
    a614:	e1a00006 	mov	r0, r6
    a618:	e1a01007 	mov	r1, r7
    a61c:	eb001266 	bl	efbc <CPtrList::Remove(TPtrListElement*)>
    a620:	e3a03000 	mov	r3, #0
    a624:	e1a00004 	mov	r0, r4
    a628:	e5843000 	str	r3, [r4]
    a62c:	ebfffde8 	bl	9dd4 <operator delete(void*)>
    a630:	e595301c 	ldr	r3, [r5, #28]
    a634:	e3530000 	cmp	r3, #0
    a638:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    a63c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    a640:	eafffdf4 	b	9e18 <LeaveCritical>
    a644:	ebfffde4 	bl	9ddc <EnterCritical>
    a648:	eaffffe3 	b	a5dc <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    a64c:	e59f001c 	ldr	r0, [pc, #28]	; a670 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    a650:	e59f1010 	ldr	r1, [pc, #16]	; a668 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    a654:	e59f2018 	ldr	r2, [pc, #24]	; a674 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
    a658:	eb000914 	bl	cab0 <assertion_failed>
    a65c:	eaffffdb 	b	a5d0 <CTimer::CancelKernelTimer(unsigned int)+0x10>
    a660:	4b544d43 	.word	0x4b544d43
    a664:	000104b4 	.word	0x000104b4
    a668:	00010484 	.word	0x00010484
    a66c:	00000139 	.word	0x00000139
    a670:	000104a8 	.word	0x000104a8
    a674:	00000132 	.word	0x00000132

0000a678 <CTimer::PollKernelTimers()>:
    a678:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    a67c:	e590301c 	ldr	r3, [r0, #28]
    a680:	e1a06000 	mov	r6, r0
    a684:	e3530000 	cmp	r3, #0
    a688:	1a000048 	bne	a7b0 <CTimer::PollKernelTimers()+0x138>
    a68c:	e2867018 	add	r7, r6, #24
    a690:	e1a00007 	mov	r0, r7
    a694:	eb00119b 	bl	ed08 <CPtrList::GetFirst()>
    a698:	e2505000 	subs	r5, r0, #0
    a69c:	159f8114 	ldrne	r8, [pc, #276]	; a7b8 <CTimer::PollKernelTimers()+0x140>
    a6a0:	1a000011 	bne	a6ec <CTimer::PollKernelTimers()+0x74>
    a6a4:	ea000037 	b	a788 <CTimer::PollKernelTimers()+0x110>
    a6a8:	e5945004 	ldr	r5, [r4, #4]
    a6ac:	e3550000 	cmp	r5, #0
    a6b0:	0a00002c 	beq	a768 <CTimer::PollKernelTimers()+0xf0>
    a6b4:	e1a00004 	mov	r0, r4
    a6b8:	e594100c 	ldr	r1, [r4, #12]
    a6bc:	e5942010 	ldr	r2, [r4, #16]
    a6c0:	e12fff35 	blx	r5
    a6c4:	e3a03000 	mov	r3, #0
    a6c8:	e1a00004 	mov	r0, r4
    a6cc:	e5843000 	str	r3, [r4]
    a6d0:	ebfffdbf 	bl	9dd4 <operator delete(void*)>
    a6d4:	e596301c 	ldr	r3, [r6, #28]
    a6d8:	e3530000 	cmp	r3, #0
    a6dc:	1a000026 	bne	a77c <CTimer::PollKernelTimers()+0x104>
    a6e0:	e3590000 	cmp	r9, #0
    a6e4:	0a000027 	beq	a788 <CTimer::PollKernelTimers()+0x110>
    a6e8:	e1a05009 	mov	r5, r9
    a6ec:	e1a00007 	mov	r0, r7
    a6f0:	e1a01005 	mov	r1, r5
    a6f4:	eb00119b 	bl	ed68 <CPtrList::GetPtr(TPtrListElement*)>
    a6f8:	e2504000 	subs	r4, r0, #0
    a6fc:	0a000026 	beq	a79c <CTimer::PollKernelTimers()+0x124>
    a700:	e5943000 	ldr	r3, [r4]
    a704:	e1530008 	cmp	r3, r8
    a708:	0a000003 	beq	a71c <CTimer::PollKernelTimers()+0xa4>
    a70c:	e59f00a8 	ldr	r0, [pc, #168]	; a7bc <CTimer::PollKernelTimers()+0x144>
    a710:	e59f10a8 	ldr	r1, [pc, #168]	; a7c0 <CTimer::PollKernelTimers()+0x148>
    a714:	e59f20a8 	ldr	r2, [pc, #168]	; a7c4 <CTimer::PollKernelTimers()+0x14c>
    a718:	eb0008e4 	bl	cab0 <assertion_failed>
    a71c:	e5962004 	ldr	r2, [r6, #4]
    a720:	e5943008 	ldr	r3, [r4, #8]
    a724:	e0623003 	rsb	r3, r2, r3
    a728:	e3530000 	cmp	r3, #0
    a72c:	ca000015 	bgt	a788 <CTimer::PollKernelTimers()+0x110>
    a730:	e1a01005 	mov	r1, r5
    a734:	e1a00007 	mov	r0, r7
    a738:	eb001174 	bl	ed10 <CPtrList::GetNext(TPtrListElement*)>
    a73c:	e1a01005 	mov	r1, r5
    a740:	e1a09000 	mov	r9, r0
    a744:	e1a00007 	mov	r0, r7
    a748:	eb00121b 	bl	efbc <CPtrList::Remove(TPtrListElement*)>
    a74c:	e596301c 	ldr	r3, [r6, #28]
    a750:	e3530000 	cmp	r3, #0
    a754:	0affffd3 	beq	a6a8 <CTimer::PollKernelTimers()+0x30>
    a758:	ebfffdae 	bl	9e18 <LeaveCritical>
    a75c:	e5945004 	ldr	r5, [r4, #4]
    a760:	e3550000 	cmp	r5, #0
    a764:	1affffd2 	bne	a6b4 <CTimer::PollKernelTimers()+0x3c>
    a768:	e59f0058 	ldr	r0, [pc, #88]	; a7c8 <CTimer::PollKernelTimers()+0x150>
    a76c:	e59f104c 	ldr	r1, [pc, #76]	; a7c0 <CTimer::PollKernelTimers()+0x148>
    a770:	e59f2054 	ldr	r2, [pc, #84]	; a7cc <CTimer::PollKernelTimers()+0x154>
    a774:	eb0008cd 	bl	cab0 <assertion_failed>
    a778:	eaffffcd 	b	a6b4 <CTimer::PollKernelTimers()+0x3c>
    a77c:	ebfffd96 	bl	9ddc <EnterCritical>
    a780:	e3590000 	cmp	r9, #0
    a784:	1affffd7 	bne	a6e8 <CTimer::PollKernelTimers()+0x70>
    a788:	e596301c 	ldr	r3, [r6, #28]
    a78c:	e3530000 	cmp	r3, #0
    a790:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    a794:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    a798:	eafffd9e 	b	9e18 <LeaveCritical>
    a79c:	e59f002c 	ldr	r0, [pc, #44]	; a7d0 <CTimer::PollKernelTimers()+0x158>
    a7a0:	e59f1018 	ldr	r1, [pc, #24]	; a7c0 <CTimer::PollKernelTimers()+0x148>
    a7a4:	e59f2028 	ldr	r2, [pc, #40]	; a7d4 <CTimer::PollKernelTimers()+0x15c>
    a7a8:	eb0008c0 	bl	cab0 <assertion_failed>
    a7ac:	eaffffd3 	b	a700 <CTimer::PollKernelTimers()+0x88>
    a7b0:	ebfffd89 	bl	9ddc <EnterCritical>
    a7b4:	eaffffb4 	b	a68c <CTimer::PollKernelTimers()+0x14>
    a7b8:	4b544d43 	.word	0x4b544d43
    a7bc:	000104b4 	.word	0x000104b4
    a7c0:	00010484 	.word	0x00010484
    a7c4:	0000014f 	.word	0x0000014f
    a7c8:	00010208 	.word	0x00010208
    a7cc:	0000015d 	.word	0x0000015d
    a7d0:	000104a8 	.word	0x000104a8
    a7d4:	0000014e 	.word	0x0000014e

0000a7d8 <CTimer::InterruptHandler()>:
    a7d8:	e92d4010 	push	{r4, lr}
    a7dc:	e3a03000 	mov	r3, #0
    a7e0:	e1a04000 	mov	r4, r0
    a7e4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a7e8:	e59f3100 	ldr	r3, [pc, #256]	; a8f0 <CTimer::InterruptHandler()+0x118>
    a7ec:	e5933000 	ldr	r3, [r3]
    a7f0:	e3130008 	tst	r3, #8
    a7f4:	0a000038 	beq	a8dc <CTimer::InterruptHandler()+0x104>
    a7f8:	e59f20f0 	ldr	r2, [pc, #240]	; a8f0 <CTimer::InterruptHandler()+0x118>
    a7fc:	e5923018 	ldr	r3, [r2, #24]
    a800:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a804:	e2833010 	add	r3, r3, #16
    a808:	e5823018 	str	r3, [r2, #24]
    a80c:	e5921004 	ldr	r1, [r2, #4]
    a810:	e1530001 	cmp	r3, r1
    a814:	e3a01008 	mov	r1, #8
    a818:	35923004 	ldrcc	r3, [r2, #4]
    a81c:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    a820:	32833010 	addcc	r3, r3, #16
    a824:	35823018 	strcc	r3, [r2, #24]
    a828:	e59f20c0 	ldr	r2, [pc, #192]	; a8f0 <CTimer::InterruptHandler()+0x118>
    a82c:	e3a03000 	mov	r3, #0
    a830:	e5821000 	str	r1, [r2]
    a834:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a838:	e5941010 	ldr	r1, [r4, #16]
    a83c:	e1510003 	cmp	r1, r3
    a840:	1a000018 	bne	a8a8 <CTimer::InterruptHandler()+0xd0>
    a844:	e3a00064 	mov	r0, #100	; 0x64
    a848:	e5943004 	ldr	r3, [r4, #4]
    a84c:	e59f20a0 	ldr	r2, [pc, #160]	; a8f4 <CTimer::InterruptHandler()+0x11c>
    a850:	e2833001 	add	r3, r3, #1
    a854:	e082c392 	umull	ip, r2, r2, r3
    a858:	e1a022a2 	lsr	r2, r2, #5
    a85c:	e0020290 	mul	r2, r0, r2
    a860:	e1530002 	cmp	r3, r2
    a864:	e5843004 	str	r3, [r4, #4]
    a868:	1a000007 	bne	a88c <CTimer::InterruptHandler()+0xb4>
    a86c:	e5943008 	ldr	r3, [r4, #8]
    a870:	e2833001 	add	r3, r3, #1
    a874:	e5843008 	str	r3, [r4, #8]
    a878:	e594300c 	ldr	r3, [r4, #12]
    a87c:	e2833001 	add	r3, r3, #1
    a880:	e584300c 	str	r3, [r4, #12]
    a884:	e3510000 	cmp	r1, #0
    a888:	1a000002 	bne	a898 <CTimer::InterruptHandler()+0xc0>
    a88c:	e1a00004 	mov	r0, r4
    a890:	e8bd4010 	pop	{r4, lr}
    a894:	eaffff77 	b	a678 <CTimer::PollKernelTimers()>
    a898:	ebfffd5e 	bl	9e18 <LeaveCritical>
    a89c:	e1a00004 	mov	r0, r4
    a8a0:	e8bd4010 	pop	{r4, lr}
    a8a4:	eaffff73 	b	a678 <CTimer::PollKernelTimers()>
    a8a8:	ebfffd4b 	bl	9ddc <EnterCritical>
    a8ac:	e3a01064 	mov	r1, #100	; 0x64
    a8b0:	e5943004 	ldr	r3, [r4, #4]
    a8b4:	e59f2038 	ldr	r2, [pc, #56]	; a8f4 <CTimer::InterruptHandler()+0x11c>
    a8b8:	e2833001 	add	r3, r3, #1
    a8bc:	e0820392 	umull	r0, r2, r2, r3
    a8c0:	e1a022a2 	lsr	r2, r2, #5
    a8c4:	e0020291 	mul	r2, r1, r2
    a8c8:	e1530002 	cmp	r3, r2
    a8cc:	e5843004 	str	r3, [r4, #4]
    a8d0:	e5941010 	ldr	r1, [r4, #16]
    a8d4:	1affffea 	bne	a884 <CTimer::InterruptHandler()+0xac>
    a8d8:	eaffffe3 	b	a86c <CTimer::InterruptHandler()+0x94>
    a8dc:	e59f0014 	ldr	r0, [pc, #20]	; a8f8 <CTimer::InterruptHandler()+0x120>
    a8e0:	e59f1014 	ldr	r1, [pc, #20]	; a8fc <CTimer::InterruptHandler()+0x124>
    a8e4:	e59f2014 	ldr	r2, [pc, #20]	; a900 <CTimer::InterruptHandler()+0x128>
    a8e8:	eb000870 	bl	cab0 <assertion_failed>
    a8ec:	eaffffc1 	b	a7f8 <CTimer::InterruptHandler()+0x20>
    a8f0:	20003000 	.word	0x20003000
    a8f4:	51eb851f 	.word	0x51eb851f
    a8f8:	00010544 	.word	0x00010544
    a8fc:	00010484 	.word	0x00010484
    a900:	0000016f 	.word	0x0000016f

0000a904 <CTimer::InterruptHandler(void*)>:
    a904:	e92d4010 	push	{r4, lr}
    a908:	e2504000 	subs	r4, r0, #0
    a90c:	0a000002 	beq	a91c <CTimer::InterruptHandler(void*)+0x18>
    a910:	e1a00004 	mov	r0, r4
    a914:	e8bd4010 	pop	{r4, lr}
    a918:	eaffffae 	b	a7d8 <CTimer::InterruptHandler()>
    a91c:	e59f0014 	ldr	r0, [pc, #20]	; a938 <CTimer::InterruptHandler(void*)+0x34>
    a920:	e59f1014 	ldr	r1, [pc, #20]	; a93c <CTimer::InterruptHandler(void*)+0x38>
    a924:	e59f2014 	ldr	r2, [pc, #20]	; a940 <CTimer::InterruptHandler(void*)+0x3c>
    a928:	eb000860 	bl	cab0 <assertion_failed>
    a92c:	e1a00004 	mov	r0, r4
    a930:	e8bd4010 	pop	{r4, lr}
    a934:	eaffffa7 	b	a7d8 <CTimer::InterruptHandler()>
    a938:	00010568 	.word	0x00010568
    a93c:	00010484 	.word	0x00010484
    a940:	00000191 	.word	0x00000191

0000a944 <CTimer::TuneMsDelay()>:
    a944:	e92d4070 	push	{r4, r5, r6, lr}
    a948:	e1a05000 	mov	r5, r0
    a94c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a950:	e5953020 	ldr	r3, [r5, #32]
    a954:	e24dd008 	sub	sp, sp, #8
    a958:	e0000390 	mul	r0, r0, r3
    a95c:	e5954004 	ldr	r4, [r5, #4]
    a960:	eb000d76 	bl	df40 <DelayLoop>
    a964:	e5951004 	ldr	r1, [r5, #4]
    a968:	e59f0068 	ldr	r0, [pc, #104]	; a9d8 <CTimer::TuneMsDelay()+0x94>
    a96c:	e0641001 	rsb	r1, r4, r1
    a970:	eb001389 	bl	f79c <__aeabi_uidiv>
    a974:	e5953020 	ldr	r3, [r5, #32]
    a978:	e59f405c 	ldr	r4, [pc, #92]	; a9dc <CTimer::TuneMsDelay()+0x98>
    a97c:	e0030093 	mul	r3, r3, r0
    a980:	e0832394 	umull	r2, r3, r4, r3
    a984:	e59f1054 	ldr	r1, [pc, #84]	; a9e0 <CTimer::TuneMsDelay()+0x9c>
    a988:	e1a032a3 	lsr	r3, r3, #5
    a98c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    a990:	e0821291 	umull	r1, r2, r1, r2
    a994:	e1a06000 	mov	r6, r0
    a998:	e1a02322 	lsr	r2, r2, #6
    a99c:	e5852024 	str	r2, [r5, #36]	; 0x24
    a9a0:	e5853020 	str	r3, [r5, #32]
    a9a4:	eb0009b9 	bl	d090 <CLogger::Get()>
    a9a8:	e3a03064 	mov	r3, #100	; 0x64
    a9ac:	e0842694 	umull	r2, r4, r4, r6
    a9b0:	e1a042a4 	lsr	r4, r4, #5
    a9b4:	e0030493 	mul	r3, r3, r4
    a9b8:	e0636006 	rsb	r6, r3, r6
    a9bc:	e88d0050 	stm	sp, {r4, r6}
    a9c0:	e59f101c 	ldr	r1, [pc, #28]	; a9e4 <CTimer::TuneMsDelay()+0xa0>
    a9c4:	e3a02003 	mov	r2, #3
    a9c8:	e59f3018 	ldr	r3, [pc, #24]	; a9e8 <CTimer::TuneMsDelay()+0xa4>
    a9cc:	eb000a8e 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a9d0:	e28dd008 	add	sp, sp, #8
    a9d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a9d8:	00002710 	.word	0x00002710
    a9dc:	51eb851f 	.word	0x51eb851f
    a9e0:	10624dd3 	.word	0x10624dd3
    a9e4:	0001046c 	.word	0x0001046c
    a9e8:	00010574 	.word	0x00010574

0000a9ec <CTimer::Initialize()>:
    a9ec:	e92d4038 	push	{r3, r4, r5, lr}
    a9f0:	e1a04000 	mov	r4, r0
    a9f4:	e5900000 	ldr	r0, [r0]
    a9f8:	e3500000 	cmp	r0, #0
    a9fc:	0a000011 	beq	aa48 <CTimer::Initialize()+0x5c>
    aa00:	e3a01003 	mov	r1, #3
    aa04:	e59f2054 	ldr	r2, [pc, #84]	; aa60 <CTimer::Initialize()+0x74>
    aa08:	e1a03004 	mov	r3, r4
    aa0c:	eb000d98 	bl	e074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    aa10:	e3a05000 	mov	r5, #0
    aa14:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    aa18:	e59f2044 	ldr	r2, [pc, #68]	; aa64 <CTimer::Initialize()+0x78>
    aa1c:	e59f3044 	ldr	r3, [pc, #68]	; aa68 <CTimer::Initialize()+0x7c>
    aa20:	e1a00004 	mov	r0, r4
    aa24:	e5823004 	str	r3, [r2, #4]
    aa28:	e5923004 	ldr	r3, [r2, #4]
    aa2c:	e2833c27 	add	r3, r3, #9984	; 0x2700
    aa30:	e2833010 	add	r3, r3, #16
    aa34:	e5823018 	str	r3, [r2, #24]
    aa38:	ebffffc1 	bl	a944 <CTimer::TuneMsDelay()>
    aa3c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    aa40:	e3a00001 	mov	r0, #1
    aa44:	e8bd8038 	pop	{r3, r4, r5, pc}
    aa48:	e59f001c 	ldr	r0, [pc, #28]	; aa6c <CTimer::Initialize()+0x80>
    aa4c:	e59f101c 	ldr	r1, [pc, #28]	; aa70 <CTimer::Initialize()+0x84>
    aa50:	e3a02055 	mov	r2, #85	; 0x55
    aa54:	eb000815 	bl	cab0 <assertion_failed>
    aa58:	e5940000 	ldr	r0, [r4]
    aa5c:	eaffffe7 	b	aa00 <CTimer::Initialize()+0x14>
    aa60:	0000a904 	.word	0x0000a904
    aa64:	20003000 	.word	0x20003000
    aa68:	fe363c80 	.word	0xfe363c80
    aa6c:	00010490 	.word	0x00010490
    aa70:	00010484 	.word	0x00010484

0000aa74 <CTimer::SimpleMsDelay(unsigned int)>:
    aa74:	e3500000 	cmp	r0, #0
    aa78:	012fff1e 	bxeq	lr
    aa7c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    aa80:	e0000093 	mul	r0, r3, r0
    aa84:	e3500000 	cmp	r0, #0
    aa88:	012fff1e 	bxeq	lr
    aa8c:	eafffd4c 	b	9fc4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000aa90 <CTimer::SimpleusDelay(unsigned int)>:
    aa90:	e3500000 	cmp	r0, #0
    aa94:	012fff1e 	bxeq	lr
    aa98:	eafffd49 	b	9fc4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000aa9c <CTimer::IsLeapYear(unsigned int)>:
    aa9c:	e3a02064 	mov	r2, #100	; 0x64
    aaa0:	e59f303c 	ldr	r3, [pc, #60]	; aae4 <CTimer::IsLeapYear(unsigned int)+0x48>
    aaa4:	e0831093 	umull	r1, r3, r3, r0
    aaa8:	e1a012a3 	lsr	r1, r3, #5
    aaac:	e0020192 	mul	r2, r2, r1
    aab0:	e1500002 	cmp	r0, r2
    aab4:	0a000003 	beq	aac8 <CTimer::IsLeapYear(unsigned int)+0x2c>
    aab8:	e3100003 	tst	r0, #3
    aabc:	03a00001 	moveq	r0, #1
    aac0:	13a00000 	movne	r0, #0
    aac4:	e12fff1e 	bx	lr
    aac8:	e3a02e19 	mov	r2, #400	; 0x190
    aacc:	e1a033a3 	lsr	r3, r3, #7
    aad0:	e0030392 	mul	r3, r2, r3
    aad4:	e0630000 	rsb	r0, r3, r0
    aad8:	e16f0f10 	clz	r0, r0
    aadc:	e1a002a0 	lsr	r0, r0, #5
    aae0:	e12fff1e 	bx	lr
    aae4:	51eb851f 	.word	0x51eb851f

0000aae8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    aae8:	e3500001 	cmp	r0, #1
    aaec:	0a000002 	beq	aafc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
    aaf0:	e59f3058 	ldr	r3, [pc, #88]	; ab50 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
    aaf4:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    aaf8:	e12fff1e 	bx	lr
    aafc:	e3a02064 	mov	r2, #100	; 0x64
    ab00:	e59f304c 	ldr	r3, [pc, #76]	; ab54 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
    ab04:	e083c193 	umull	ip, r3, r3, r1
    ab08:	e1a0c2a3 	lsr	ip, r3, #5
    ab0c:	e0020c92 	mul	r2, r2, ip
    ab10:	e1510002 	cmp	r1, r2
    ab14:	0a000006 	beq	ab34 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
    ab18:	e3110003 	tst	r1, #3
    ab1c:	03a01001 	moveq	r1, #1
    ab20:	13a01000 	movne	r1, #0
    ab24:	e3510000 	cmp	r1, #0
    ab28:	0afffff0 	beq	aaf0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    ab2c:	e3a0001d 	mov	r0, #29
    ab30:	e12fff1e 	bx	lr
    ab34:	e3a02e19 	mov	r2, #400	; 0x190
    ab38:	e1a033a3 	lsr	r3, r3, #7
    ab3c:	e0030392 	mul	r3, r2, r3
    ab40:	e0631001 	rsb	r1, r3, r1
    ab44:	e16f1f11 	clz	r1, r1
    ab48:	e1a012a1 	lsr	r1, r1, #5
    ab4c:	eafffff4 	b	ab24 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
    ab50:	0001043c 	.word	0x0001043c
    ab54:	51eb851f 	.word	0x51eb851f

0000ab58 <CTimer::Get()>:
    ab58:	e92d4010 	push	{r4, lr}
    ab5c:	e59f4020 	ldr	r4, [pc, #32]	; ab84 <CTimer::Get()+0x2c>
    ab60:	e5940000 	ldr	r0, [r4]
    ab64:	e3500000 	cmp	r0, #0
    ab68:	18bd8010 	popne	{r4, pc}
    ab6c:	e59f0014 	ldr	r0, [pc, #20]	; ab88 <CTimer::Get()+0x30>
    ab70:	e59f1014 	ldr	r1, [pc, #20]	; ab8c <CTimer::Get()+0x34>
    ab74:	e59f2014 	ldr	r2, [pc, #20]	; ab90 <CTimer::Get()+0x38>
    ab78:	eb0007cc 	bl	cab0 <assertion_failed>
    ab7c:	e5940000 	ldr	r0, [r4]
    ab80:	e8bd8010 	pop	{r4, pc}
    ab84:	00051004 	.word	0x00051004
    ab88:	0001058c 	.word	0x0001058c
    ab8c:	00010484 	.word	0x00010484
    ab90:	000001d6 	.word	0x000001d6

0000ab94 <memset>:
    ab94:	e3520000 	cmp	r2, #0
    ab98:	012fff1e 	bxeq	lr
    ab9c:	e1a03000 	mov	r3, r0
    aba0:	e6ef1071 	uxtb	r1, r1
    aba4:	e0802002 	add	r2, r0, r2
    aba8:	e4c31001 	strb	r1, [r3], #1
    abac:	e1530002 	cmp	r3, r2
    abb0:	1afffffc 	bne	aba8 <memset+0x14>
    abb4:	e12fff1e 	bx	lr

0000abb8 <memcmp>:
    abb8:	e3520000 	cmp	r2, #0
    abbc:	0a00000e 	beq	abfc <memcmp+0x44>
    abc0:	e5d0c000 	ldrb	ip, [r0]
    abc4:	e5d13000 	ldrb	r3, [r1]
    abc8:	e15c0003 	cmp	ip, r3
    abcc:	8a00000c 	bhi	ac04 <memcmp+0x4c>
    abd0:	3a00000d 	bcc	ac0c <memcmp+0x54>
    abd4:	e0802002 	add	r2, r0, r2
    abd8:	e2800001 	add	r0, r0, #1
    abdc:	ea000004 	b	abf4 <memcmp+0x3c>
    abe0:	e4d0c001 	ldrb	ip, [r0], #1
    abe4:	e5f13001 	ldrb	r3, [r1, #1]!
    abe8:	e15c0003 	cmp	ip, r3
    abec:	8a000004 	bhi	ac04 <memcmp+0x4c>
    abf0:	3a000005 	bcc	ac0c <memcmp+0x54>
    abf4:	e1500002 	cmp	r0, r2
    abf8:	1afffff8 	bne	abe0 <memcmp+0x28>
    abfc:	e3a00000 	mov	r0, #0
    ac00:	e12fff1e 	bx	lr
    ac04:	e3a00001 	mov	r0, #1
    ac08:	e12fff1e 	bx	lr
    ac0c:	e3e00000 	mvn	r0, #0
    ac10:	e12fff1e 	bx	lr

0000ac14 <strlen>:
    ac14:	e1d010d0 	ldrsb	r1, [r0]
    ac18:	e2803001 	add	r3, r0, #1
    ac1c:	e3510000 	cmp	r1, #0
    ac20:	0a000003 	beq	ac34 <strlen+0x20>
    ac24:	e0601003 	rsb	r1, r0, r3
    ac28:	e0d320d1 	ldrsb	r2, [r3], #1
    ac2c:	e3520000 	cmp	r2, #0
    ac30:	1afffffb 	bne	ac24 <strlen+0x10>
    ac34:	e1a00001 	mov	r0, r1
    ac38:	e12fff1e 	bx	lr

0000ac3c <strcmp>:
    ac3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac40:	e5d03000 	ldrb	r3, [r0]
    ac44:	e5d12000 	ldrb	r2, [r1]
    ac48:	e3530000 	cmp	r3, #0
    ac4c:	0a000013 	beq	aca0 <strcmp+0x64>
    ac50:	e3520000 	cmp	r2, #0
    ac54:	0a000011 	beq	aca0 <strcmp+0x64>
    ac58:	e6af2072 	sxtb	r2, r2
    ac5c:	e6af3073 	sxtb	r3, r3
    ac60:	e1520003 	cmp	r2, r3
    ac64:	ba000014 	blt	acbc <strcmp+0x80>
    ac68:	da000007 	ble	ac8c <strcmp+0x50>
    ac6c:	ea000014 	b	acc4 <strcmp+0x88>
    ac70:	e5f12001 	ldrb	r2, [r1, #1]!
    ac74:	e3520000 	cmp	r2, #0
    ac78:	e6afe072 	sxtb	lr, r2
    ac7c:	0a000007 	beq	aca0 <strcmp+0x64>
    ac80:	e15c000e 	cmp	ip, lr
    ac84:	ca00000c 	bgt	acbc <strcmp+0x80>
    ac88:	ba00000d 	blt	acc4 <strcmp+0x88>
    ac8c:	e5f03001 	ldrb	r3, [r0, #1]!
    ac90:	e3530000 	cmp	r3, #0
    ac94:	e6afc073 	sxtb	ip, r3
    ac98:	1afffff4 	bne	ac70 <strcmp+0x34>
    ac9c:	e5d12001 	ldrb	r2, [r1, #1]
    aca0:	e6af2072 	sxtb	r2, r2
    aca4:	e6af3073 	sxtb	r3, r3
    aca8:	e1520003 	cmp	r2, r3
    acac:	ba000002 	blt	acbc <strcmp+0x80>
    acb0:	c3e00000 	mvngt	r0, #0
    acb4:	d3a00000 	movle	r0, #0
    acb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    acbc:	e3a00001 	mov	r0, #1
    acc0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    acc4:	e3e00000 	mvn	r0, #0
    acc8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000accc <strcpy>:
    accc:	e5d13000 	ldrb	r3, [r1]
    acd0:	e1a02000 	mov	r2, r0
    acd4:	e3530000 	cmp	r3, #0
    acd8:	0a000003 	beq	acec <strcpy+0x20>
    acdc:	e4c23001 	strb	r3, [r2], #1
    ace0:	e5f13001 	ldrb	r3, [r1, #1]!
    ace4:	e3530000 	cmp	r3, #0
    ace8:	1afffffb 	bne	acdc <strcpy+0x10>
    acec:	e3a03000 	mov	r3, #0
    acf0:	e5c23000 	strb	r3, [r2]
    acf4:	e12fff1e 	bx	lr

0000acf8 <strncpy>:
    acf8:	e3520000 	cmp	r2, #0
    acfc:	012fff1e 	bxeq	lr
    ad00:	e5d13000 	ldrb	r3, [r1]
    ad04:	e3530000 	cmp	r3, #0
    ad08:	0a00000a 	beq	ad38 <strncpy+0x40>
    ad0c:	e0812002 	add	r2, r1, r2
    ad10:	e1a0c000 	mov	ip, r0
    ad14:	e2811001 	add	r1, r1, #1
    ad18:	ea000002 	b	ad28 <strncpy+0x30>
    ad1c:	e4d13001 	ldrb	r3, [r1], #1
    ad20:	e3530000 	cmp	r3, #0
    ad24:	0a000004 	beq	ad3c <strncpy+0x44>
    ad28:	e1510002 	cmp	r1, r2
    ad2c:	e4cc3001 	strb	r3, [ip], #1
    ad30:	1afffff9 	bne	ad1c <strncpy+0x24>
    ad34:	e12fff1e 	bx	lr
    ad38:	e1a0c000 	mov	ip, r0
    ad3c:	e3a03000 	mov	r3, #0
    ad40:	e5cc3000 	strb	r3, [ip]
    ad44:	e12fff1e 	bx	lr

0000ad48 <strcat>:
    ad48:	e1d030d0 	ldrsb	r3, [r0]
    ad4c:	e3530000 	cmp	r3, #0
    ad50:	e1a03000 	mov	r3, r0
    ad54:	0a000002 	beq	ad64 <strcat+0x1c>
    ad58:	e1f320d1 	ldrsb	r2, [r3, #1]!
    ad5c:	e3520000 	cmp	r2, #0
    ad60:	1afffffc 	bne	ad58 <strcat+0x10>
    ad64:	e5d12000 	ldrb	r2, [r1]
    ad68:	e3520000 	cmp	r2, #0
    ad6c:	0a000003 	beq	ad80 <strcat+0x38>
    ad70:	e4c32001 	strb	r2, [r3], #1
    ad74:	e5f12001 	ldrb	r2, [r1, #1]!
    ad78:	e3520000 	cmp	r2, #0
    ad7c:	1afffffb 	bne	ad70 <strcat+0x28>
    ad80:	e3a02000 	mov	r2, #0
    ad84:	e5c32000 	strb	r2, [r3]
    ad88:	e12fff1e 	bx	lr

0000ad8c <strchr>:
    ad8c:	e5d03000 	ldrb	r3, [r0]
    ad90:	e3530000 	cmp	r3, #0
    ad94:	0a000009 	beq	adc0 <strchr+0x34>
    ad98:	e6af3073 	sxtb	r3, r3
    ad9c:	e1530001 	cmp	r3, r1
    ada0:	1a000002 	bne	adb0 <strchr+0x24>
    ada4:	ea000007 	b	adc8 <strchr+0x3c>
    ada8:	e1520001 	cmp	r2, r1
    adac:	012fff1e 	bxeq	lr
    adb0:	e5f03001 	ldrb	r3, [r0, #1]!
    adb4:	e3530000 	cmp	r3, #0
    adb8:	e6af2073 	sxtb	r2, r3
    adbc:	1afffff9 	bne	ada8 <strchr+0x1c>
    adc0:	e1a00003 	mov	r0, r3
    adc4:	e12fff1e 	bx	lr
    adc8:	e12fff1e 	bx	lr

0000adcc <strtok_r>:
    adcc:	e3500000 	cmp	r0, #0
    add0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    add4:	0a000031 	beq	aea0 <strtok_r+0xd4>
    add8:	e5d05000 	ldrb	r5, [r0]
    addc:	e3550000 	cmp	r5, #0
    ade0:	0a00002b 	beq	ae94 <strtok_r+0xc8>
    ade4:	e5d17000 	ldrb	r7, [r1]
    ade8:	e6af6077 	sxtb	r6, r7
    adec:	e3570000 	cmp	r7, #0
    adf0:	0a00000a 	beq	ae20 <strtok_r+0x54>
    adf4:	e6af4075 	sxtb	r4, r5
    adf8:	e1560004 	cmp	r6, r4
    adfc:	0a00001d 	beq	ae78 <strtok_r+0xac>
    ae00:	e1a0c001 	mov	ip, r1
    ae04:	ea000001 	b	ae10 <strtok_r+0x44>
    ae08:	e15e0004 	cmp	lr, r4
    ae0c:	0a000019 	beq	ae78 <strtok_r+0xac>
    ae10:	e5fc3001 	ldrb	r3, [ip, #1]!
    ae14:	e3530000 	cmp	r3, #0
    ae18:	e6afe073 	sxtb	lr, r3
    ae1c:	1afffff9 	bne	ae08 <strtok_r+0x3c>
    ae20:	e3550000 	cmp	r5, #0
    ae24:	0a00001a 	beq	ae94 <strtok_r+0xc8>
    ae28:	e1a06000 	mov	r6, r0
    ae2c:	e6af8077 	sxtb	r8, r7
    ae30:	e3570000 	cmp	r7, #0
    ae34:	0a00000a 	beq	ae64 <strtok_r+0x98>
    ae38:	e6af4075 	sxtb	r4, r5
    ae3c:	e1540008 	cmp	r4, r8
    ae40:	0a00000e 	beq	ae80 <strtok_r+0xb4>
    ae44:	e1a0c001 	mov	ip, r1
    ae48:	ea000001 	b	ae54 <strtok_r+0x88>
    ae4c:	e154000e 	cmp	r4, lr
    ae50:	0a00000a 	beq	ae80 <strtok_r+0xb4>
    ae54:	e5fc3001 	ldrb	r3, [ip, #1]!
    ae58:	e3530000 	cmp	r3, #0
    ae5c:	e6afe073 	sxtb	lr, r3
    ae60:	1afffff9 	bne	ae4c <strtok_r+0x80>
    ae64:	e5f65001 	ldrb	r5, [r6, #1]!
    ae68:	e3550000 	cmp	r5, #0
    ae6c:	1affffef 	bne	ae30 <strtok_r+0x64>
    ae70:	e5826000 	str	r6, [r2]
    ae74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ae78:	e5f05001 	ldrb	r5, [r0, #1]!
    ae7c:	eaffffda 	b	adec <strtok_r+0x20>
    ae80:	e3a03000 	mov	r3, #0
    ae84:	e2866001 	add	r6, r6, #1
    ae88:	e5463001 	strb	r3, [r6, #-1]
    ae8c:	e5826000 	str	r6, [r2]
    ae90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ae94:	e3a00000 	mov	r0, #0
    ae98:	e5820000 	str	r0, [r2]
    ae9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aea0:	e5920000 	ldr	r0, [r2]
    aea4:	e3500000 	cmp	r0, #0
    aea8:	1affffca 	bne	add8 <strtok_r+0xc>
    aeac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000aeb0 <strtoul>:
    aeb0:	e3510000 	cmp	r1, #0
    aeb4:	e2423002 	sub	r3, r2, #2
    aeb8:	15810000 	strne	r0, [r1]
    aebc:	e3520000 	cmp	r2, #0
    aec0:	13530022 	cmpne	r3, #34	; 0x22
    aec4:	8a000038 	bhi	afac <strtoul+0xfc>
    aec8:	e92d4070 	push	{r4, r5, r6, lr}
    aecc:	e5d03000 	ldrb	r3, [r0]
    aed0:	e1a0c000 	mov	ip, r0
    aed4:	e6afe073 	sxtb	lr, r3
    aed8:	e35e0020 	cmp	lr, #32
    aedc:	e2800001 	add	r0, r0, #1
    aee0:	e2434009 	sub	r4, r3, #9
    aee4:	0afffff8 	beq	aecc <strtoul+0x1c>
    aee8:	e3540004 	cmp	r4, #4
    aeec:	e1a04003 	mov	r4, r3
    aef0:	9afffff5 	bls	aecc <strtoul+0x1c>
    aef4:	e244402b 	sub	r4, r4, #43	; 0x2b
    aef8:	e31400fd 	tst	r4, #253	; 0xfd
    aefc:	e1a0400c 	mov	r4, ip
    af00:	024e502d 	subeq	r5, lr, #45	; 0x2d
    af04:	016f5f15 	clzeq	r5, r5
    af08:	05d43001 	ldrbeq	r3, [r4, #1]
    af0c:	13a05000 	movne	r5, #0
    af10:	e6af3073 	sxtb	r3, r3
    af14:	01a0c000 	moveq	ip, r0
    af18:	01a052a5 	lsreq	r5, r5, #5
    af1c:	e3530030 	cmp	r3, #48	; 0x30
    af20:	0a00002c 	beq	afd8 <strtoul+0x128>
    af24:	e3520000 	cmp	r2, #0
    af28:	03a0200a 	moveq	r2, #10
    af2c:	e353002f 	cmp	r3, #47	; 0x2f
    af30:	da00003d 	ble	b02c <strtoul+0x17c>
    af34:	e3a06001 	mov	r6, #1
    af38:	e3a00000 	mov	r0, #0
    af3c:	e1a0e003 	mov	lr, r3
    af40:	ea000008 	b	af68 <strtoul+0xb8>
    af44:	e0243092 	mla	r4, r2, r0, r3
    af48:	e1540000 	cmp	r4, r0
    af4c:	3a000018 	bcc	afb4 <strtoul+0x104>
    af50:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    af54:	e3a06000 	mov	r6, #0
    af58:	e353002f 	cmp	r3, #47	; 0x2f
    af5c:	e1a0e003 	mov	lr, r3
    af60:	da000018 	ble	afc8 <strtoul+0x118>
    af64:	e1a00004 	mov	r0, r4
    af68:	e24ee061 	sub	lr, lr, #97	; 0x61
    af6c:	e35e0019 	cmp	lr, #25
    af70:	92433020 	subls	r3, r3, #32
    af74:	e3530040 	cmp	r3, #64	; 0x40
    af78:	c2433007 	subgt	r3, r3, #7
    af7c:	e2433030 	sub	r3, r3, #48	; 0x30
    af80:	e1530002 	cmp	r3, r2
    af84:	baffffee 	blt	af44 <strtoul+0x94>
    af88:	e3510000 	cmp	r1, #0
    af8c:	0a000000 	beq	af94 <strtoul+0xe4>
    af90:	e581c000 	str	ip, [r1]
    af94:	e3560000 	cmp	r6, #0
    af98:	18bd8070 	popne	{r4, r5, r6, pc}
    af9c:	e2653000 	rsb	r3, r5, #0
    afa0:	e0200003 	eor	r0, r0, r3
    afa4:	e0800005 	add	r0, r0, r5
    afa8:	e8bd8070 	pop	{r4, r5, r6, pc}
    afac:	e3a00000 	mov	r0, #0
    afb0:	e12fff1e 	bx	lr
    afb4:	e3510000 	cmp	r1, #0
    afb8:	0a000019 	beq	b024 <strtoul+0x174>
    afbc:	e581c000 	str	ip, [r1]
    afc0:	e3e00000 	mvn	r0, #0
    afc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    afc8:	e3510000 	cmp	r1, #0
    afcc:	e1a00004 	mov	r0, r4
    afd0:	1affffee 	bne	af90 <strtoul+0xe0>
    afd4:	eafffff0 	b	af9c <strtoul+0xec>
    afd8:	e5dc3001 	ldrb	r3, [ip, #1]
    afdc:	e28ce001 	add	lr, ip, #1
    afe0:	e3c30020 	bic	r0, r3, #32
    afe4:	e3500058 	cmp	r0, #88	; 0x58
    afe8:	1a000006 	bne	b008 <strtoul+0x158>
    afec:	e3d23010 	bics	r3, r2, #16
    aff0:	1a000009 	bne	b01c <strtoul+0x16c>
    aff4:	e5dc3002 	ldrb	r3, [ip, #2]
    aff8:	e3a02010 	mov	r2, #16
    affc:	e6af3073 	sxtb	r3, r3
    b000:	e28cc002 	add	ip, ip, #2
    b004:	eaffffc8 	b	af2c <strtoul+0x7c>
    b008:	e3520000 	cmp	r2, #0
    b00c:	e1a0c00e 	mov	ip, lr
    b010:	e6af3073 	sxtb	r3, r3
    b014:	03a02008 	moveq	r2, #8
    b018:	eaffffc3 	b	af2c <strtoul+0x7c>
    b01c:	e3a00000 	mov	r0, #0
    b020:	e8bd8070 	pop	{r4, r5, r6, pc}
    b024:	e3e00000 	mvn	r0, #0
    b028:	e8bd8070 	pop	{r4, r5, r6, pc}
    b02c:	e3510000 	cmp	r1, #0
    b030:	13a06001 	movne	r6, #1
    b034:	13a00000 	movne	r0, #0
    b038:	1affffd4 	bne	af90 <strtoul+0xe0>
    b03c:	e1a00001 	mov	r0, r1
    b040:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b044 <char2int>:
    b044:	e12fff1e 	bx	lr

0000b048 <sign>:
    b048:	e1a03fc0 	asr	r3, r0, #31
    b04c:	e3500000 	cmp	r0, #0
    b050:	01a00003 	moveq	r0, r3
    b054:	13830001 	orrne	r0, r3, #1
    b058:	e12fff1e 	bx	lr

0000b05c <abs>:
    b05c:	e1a03fc0 	asr	r3, r0, #31
    b060:	e3500000 	cmp	r0, #0
    b064:	13833001 	orrne	r3, r3, #1
    b068:	e0000093 	mul	r0, r3, r0
    b06c:	e12fff1e 	bx	lr

0000b070 <sqrt3>:
    b070:	ee103a10 	vmov	r3, s0
    b074:	e1a030c3 	asr	r3, r3, #1
    b078:	e283357f 	add	r3, r3, #532676608	; 0x1fc00000
    b07c:	ee073a10 	vmov	s14, r3
    b080:	eec06a07 	vdiv.f32	s13, s0, s14
    b084:	eddf7a0a 	vldr	s15, [pc, #40]	; b0b4 <sqrt3+0x44>
    b088:	ee377a26 	vadd.f32	s14, s14, s13
    b08c:	ee277a27 	vmul.f32	s14, s14, s15
    b090:	eec06a07 	vdiv.f32	s13, s0, s14
    b094:	ee377a26 	vadd.f32	s14, s14, s13
    b098:	ee677a27 	vmul.f32	s15, s14, s15
    b09c:	ee807a27 	vdiv.f32	s14, s0, s15
    b0a0:	ee777a87 	vadd.f32	s15, s15, s14
    b0a4:	ed9f7a03 	vldr	s14, [pc, #12]	; b0b8 <sqrt3+0x48>
    b0a8:	ee800a27 	vdiv.f32	s0, s0, s15
    b0ac:	ee070a87 	vmla.f32	s0, s15, s14
    b0b0:	e12fff1e 	bx	lr
    b0b4:	3f000000 	.word	0x3f000000
    b0b8:	3e800000 	.word	0x3e800000

0000b0bc <memcpy>:
    b0bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0c0:	e352007f 	cmp	r2, #127	; 0x7f
    b0c4:	9a00000b 	bls	b0f8 <memcpy+0x3c>
    b0c8:	e3110003 	tst	r1, #3
    b0cc:	1a000009 	bne	b0f8 <memcpy+0x3c>
    b0d0:	e3100003 	tst	r0, #3
    b0d4:	1a000007 	bne	b0f8 <memcpy+0x3c>
    b0d8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    b0dc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b0e0:	e2422020 	sub	r2, r2, #32
    b0e4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b0e8:	f5d1f040 	pld	[r1, #64]	; 0x40
    b0ec:	e352001f 	cmp	r2, #31
    b0f0:	8afffff9 	bhi	b0dc <memcpy+0x20>
    b0f4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    b0f8:	e3520000 	cmp	r2, #0
    b0fc:	0a000003 	beq	b110 <memcpy+0x54>
    b100:	e4d13001 	ldrb	r3, [r1], #1
    b104:	e2522001 	subs	r2, r2, #1
    b108:	e4c03001 	strb	r3, [r0], #1
    b10c:	1afffffb 	bne	b100 <memcpy+0x44>
    b110:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b114:	e12fff1e 	bx	lr

0000b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    b118:	e3a01000 	mov	r1, #0
    b11c:	ea00000a 	b	b14c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    b120:	e3520009 	cmp	r2, #9
    b124:	8a000012 	bhi	b174 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x5c>
    b128:	e3730001 	cmn	r3, #1
    b12c:	13a02000 	movne	r2, #0
    b130:	03a02001 	moveq	r2, #1
    b134:	e1510003 	cmp	r1, r3
    b138:	91a01002 	movls	r1, r2
    b13c:	83821001 	orrhi	r1, r2, #1
    b140:	e3510000 	cmp	r1, #0
    b144:	1a00000a 	bne	b174 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x5c>
    b148:	e1a01003 	mov	r1, r3
    b14c:	e4d0c001 	ldrb	ip, [r0], #1
    b150:	e0813101 	add	r3, r1, r1, lsl #2
    b154:	e6af207c 	sxtb	r2, ip
    b158:	e2422030 	sub	r2, r2, #48	; 0x30
    b15c:	e35c0000 	cmp	ip, #0
    b160:	e0823083 	add	r3, r2, r3, lsl #1
    b164:	e24c2030 	sub	r2, ip, #48	; 0x30
    b168:	1affffec 	bne	b120 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    b16c:	e1a00001 	mov	r0, r1
    b170:	e12fff1e 	bx	lr
    b174:	e3e00000 	mvn	r0, #0
    b178:	e12fff1e 	bx	lr

0000b17c <CKernelOptions::~CKernelOptions()>:
    b17c:	e3a02000 	mov	r2, #0
    b180:	e59f3004 	ldr	r3, [pc, #4]	; b18c <CKernelOptions::~CKernelOptions()+0x10>
    b184:	e5832000 	str	r2, [r3]
    b188:	e12fff1e 	bx	lr
    b18c:	00051008 	.word	0x00051008

0000b190 <CKernelOptions::GetWidth() const>:
    b190:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    b194:	e12fff1e 	bx	lr

0000b198 <CKernelOptions::GetHeight() const>:
    b198:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    b19c:	e12fff1e 	bx	lr

0000b1a0 <CKernelOptions::GetLogDevice() const>:
    b1a0:	e2800e81 	add	r0, r0, #2064	; 0x810
    b1a4:	e2800008 	add	r0, r0, #8
    b1a8:	e12fff1e 	bx	lr

0000b1ac <CKernelOptions::GetLogLevel() const>:
    b1ac:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    b1b0:	e12fff1e 	bx	lr

0000b1b4 <CKernelOptions::GetKeyMap() const>:
    b1b4:	e2800e83 	add	r0, r0, #2096	; 0x830
    b1b8:	e12fff1e 	bx	lr

0000b1bc <CKernelOptions::GetUSBPowerDelay() const>:
    b1bc:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    b1c0:	e12fff1e 	bx	lr

0000b1c4 <CKernelOptions::GetCPUSpeed() const>:
    b1c4:	e5900838 	ldr	r0, [r0, #2104]	; 0x838
    b1c8:	e12fff1e 	bx	lr

0000b1cc <CKernelOptions::GetSoCMaxTemp() const>:
    b1cc:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    b1d0:	e12fff1e 	bx	lr

0000b1d4 <CKernelOptions::Get()>:
    b1d4:	e59f3004 	ldr	r3, [pc, #4]	; b1e0 <CKernelOptions::Get()+0xc>
    b1d8:	e5930000 	ldr	r0, [r3]
    b1dc:	e12fff1e 	bx	lr
    b1e0:	00051008 	.word	0x00051008

0000b1e4 <CKernelOptions::GetToken()>:
    b1e4:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    b1e8:	e5d32000 	ldrb	r2, [r3]
    b1ec:	e3520000 	cmp	r2, #0
    b1f0:	1a000005 	bne	b20c <CKernelOptions::GetToken()+0x28>
    b1f4:	ea000014 	b	b24c <CKernelOptions::GetToken()+0x68>
    b1f8:	e2833001 	add	r3, r3, #1
    b1fc:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    b200:	e5d32000 	ldrb	r2, [r3]
    b204:	e3520000 	cmp	r2, #0
    b208:	0a00000f 	beq	b24c <CKernelOptions::GetToken()+0x68>
    b20c:	e3520020 	cmp	r2, #32
    b210:	0afffff8 	beq	b1f8 <CKernelOptions::GetToken()+0x14>
    b214:	e1a02003 	mov	r2, r3
    b218:	e2822001 	add	r2, r2, #1
    b21c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    b220:	e5d21000 	ldrb	r1, [r2]
    b224:	e3510000 	cmp	r1, #0
    b228:	0a000008 	beq	b250 <CKernelOptions::GetToken()+0x6c>
    b22c:	e3510020 	cmp	r1, #32
    b230:	1afffff8 	bne	b218 <CKernelOptions::GetToken()+0x34>
    b234:	e3a01000 	mov	r1, #0
    b238:	e282c001 	add	ip, r2, #1
    b23c:	e580c80c 	str	ip, [r0, #2060]	; 0x80c
    b240:	e5c21000 	strb	r1, [r2]
    b244:	e1a00003 	mov	r0, r3
    b248:	e12fff1e 	bx	lr
    b24c:	e3a03000 	mov	r3, #0
    b250:	e1a00003 	mov	r0, r3
    b254:	e12fff1e 	bx	lr

0000b258 <CKernelOptions::CKernelOptions()>:
    b258:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b25c:	e3a02004 	mov	r2, #4
    b260:	e1a05000 	mov	r5, r0
    b264:	e3a04000 	mov	r4, #0
    b268:	e3a0303c 	mov	r3, #60	; 0x3c
    b26c:	e2808e81 	add	r8, r0, #2064	; 0x810
    b270:	e2888008 	add	r8, r8, #8
    b274:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    b278:	e580383c 	str	r3, [r0, #2108]	; 0x83c
    b27c:	e24dd014 	sub	sp, sp, #20
    b280:	e59f12d8 	ldr	r1, [pc, #728]	; b560 <CKernelOptions::CKernelOptions()+0x308>
    b284:	e1a00008 	mov	r0, r8
    b288:	e5854810 	str	r4, [r5, #2064]	; 0x810
    b28c:	e5854814 	str	r4, [r5, #2068]	; 0x814
    b290:	e5854834 	str	r4, [r5, #2100]	; 0x834
    b294:	e5854838 	str	r4, [r5, #2104]	; 0x838
    b298:	e2859e83 	add	r9, r5, #2096	; 0x830
    b29c:	ebfffe8a 	bl	accc <strcpy>
    b2a0:	e59f12bc 	ldr	r1, [pc, #700]	; b564 <CKernelOptions::CKernelOptions()+0x30c>
    b2a4:	e1a00009 	mov	r0, r9
    b2a8:	ebfffe87 	bl	accc <strcpy>
    b2ac:	e59f32b4 	ldr	r3, [pc, #692]	; b568 <CKernelOptions::CKernelOptions()+0x310>
    b2b0:	e28d0008 	add	r0, sp, #8
    b2b4:	e5835000 	str	r5, [r3]
    b2b8:	ebfff5ed 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    b2bc:	e58d4000 	str	r4, [sp]
    b2c0:	e28d0008 	add	r0, sp, #8
    b2c4:	e1a02005 	mov	r2, r5
    b2c8:	e59f129c 	ldr	r1, [pc, #668]	; b56c <CKernelOptions::CKernelOptions()+0x314>
    b2cc:	e59f329c 	ldr	r3, [pc, #668]	; b570 <CKernelOptions::CKernelOptions()+0x318>
    b2d0:	ebfff62f 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b2d4:	e1500004 	cmp	r0, r4
    b2d8:	0a00002b 	beq	b38c <CKernelOptions::CKernelOptions()+0x134>
    b2dc:	e5953008 	ldr	r3, [r5, #8]
    b2e0:	e3530b02 	cmp	r3, #2048	; 0x800
    b2e4:	2a000028 	bcs	b38c <CKernelOptions::CKernelOptions()+0x134>
    b2e8:	e0853003 	add	r3, r5, r3
    b2ec:	e285200c 	add	r2, r5, #12
    b2f0:	e5c3400c 	strb	r4, [r3, #12]
    b2f4:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    b2f8:	e1a00005 	mov	r0, r5
    b2fc:	ebffffb8 	bl	b1e4 <CKernelOptions::GetToken()>
    b300:	e2506000 	subs	r6, r0, #0
    b304:	0a000020 	beq	b38c <CKernelOptions::CKernelOptions()+0x134>
    b308:	e5d63000 	ldrb	r3, [r6]
    b30c:	e3530000 	cmp	r3, #0
    b310:	0a000022 	beq	b3a0 <CKernelOptions::CKernelOptions()+0x148>
    b314:	e1a04006 	mov	r4, r6
    b318:	ea000002 	b	b328 <CKernelOptions::CKernelOptions()+0xd0>
    b31c:	e5f43001 	ldrb	r3, [r4, #1]!
    b320:	e3530000 	cmp	r3, #0
    b324:	0a00001d 	beq	b3a0 <CKernelOptions::CKernelOptions()+0x148>
    b328:	e353003d 	cmp	r3, #61	; 0x3d
    b32c:	1afffffa 	bne	b31c <CKernelOptions::CKernelOptions()+0xc4>
    b330:	e3a03000 	mov	r3, #0
    b334:	e1a00006 	mov	r0, r6
    b338:	e5c43000 	strb	r3, [r4]
    b33c:	e59f1230 	ldr	r1, [pc, #560]	; b574 <CKernelOptions::CKernelOptions()+0x31c>
    b340:	ebfffe3d 	bl	ac3c <strcmp>
    b344:	e3500000 	cmp	r0, #0
    b348:	e2847001 	add	r7, r4, #1
    b34c:	1a000032 	bne	b41c <CKernelOptions::CKernelOptions()+0x1c4>
    b350:	e3570000 	cmp	r7, #0
    b354:	0affffe7 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b358:	e1d430d1 	ldrsb	r3, [r4, #1]
    b35c:	e3530000 	cmp	r3, #0
    b360:	0affffe4 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b364:	e1a00007 	mov	r0, r7
    b368:	ebffff6a 	bl	b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b36c:	e59f3204 	ldr	r3, [pc, #516]	; b578 <CKernelOptions::CKernelOptions()+0x320>
    b370:	e2402d0a 	sub	r2, r0, #640	; 0x280
    b374:	e1520003 	cmp	r2, r3
    b378:	95850810 	strls	r0, [r5, #2064]	; 0x810
    b37c:	e1a00005 	mov	r0, r5
    b380:	ebffff97 	bl	b1e4 <CKernelOptions::GetToken()>
    b384:	e2506000 	subs	r6, r0, #0
    b388:	1affffde 	bne	b308 <CKernelOptions::CKernelOptions()+0xb0>
    b38c:	e28d0008 	add	r0, sp, #8
    b390:	ebfff5bd 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    b394:	e1a00005 	mov	r0, r5
    b398:	e28dd014 	add	sp, sp, #20
    b39c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b3a0:	e1a00006 	mov	r0, r6
    b3a4:	e59f11c8 	ldr	r1, [pc, #456]	; b574 <CKernelOptions::CKernelOptions()+0x31c>
    b3a8:	ebfffe23 	bl	ac3c <strcmp>
    b3ac:	e3500000 	cmp	r0, #0
    b3b0:	0affffd0 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b3b4:	e1a00006 	mov	r0, r6
    b3b8:	e59f11bc 	ldr	r1, [pc, #444]	; b57c <CKernelOptions::CKernelOptions()+0x324>
    b3bc:	ebfffe1e 	bl	ac3c <strcmp>
    b3c0:	e3500000 	cmp	r0, #0
    b3c4:	13a07000 	movne	r7, #0
    b3c8:	0affffca 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b3cc:	e1a00006 	mov	r0, r6
    b3d0:	e59f11a8 	ldr	r1, [pc, #424]	; b580 <CKernelOptions::CKernelOptions()+0x328>
    b3d4:	ebfffe18 	bl	ac3c <strcmp>
    b3d8:	e2504000 	subs	r4, r0, #0
    b3dc:	0a00001e 	beq	b45c <CKernelOptions::CKernelOptions()+0x204>
    b3e0:	e1a00006 	mov	r0, r6
    b3e4:	e59f1198 	ldr	r1, [pc, #408]	; b584 <CKernelOptions::CKernelOptions()+0x32c>
    b3e8:	ebfffe13 	bl	ac3c <strcmp>
    b3ec:	e3500000 	cmp	r0, #0
    b3f0:	1a00001f 	bne	b474 <CKernelOptions::CKernelOptions()+0x21c>
    b3f4:	e3570000 	cmp	r7, #0
    b3f8:	0affffbe 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b3fc:	e1d730d0 	ldrsb	r3, [r7]
    b400:	e3530000 	cmp	r3, #0
    b404:	0affffbb 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b408:	e1a00007 	mov	r0, r7
    b40c:	ebffff41 	bl	b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b410:	e3500004 	cmp	r0, #4
    b414:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    b418:	eaffffb6 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b41c:	e1a00006 	mov	r0, r6
    b420:	e59f1154 	ldr	r1, [pc, #340]	; b57c <CKernelOptions::CKernelOptions()+0x324>
    b424:	ebfffe04 	bl	ac3c <strcmp>
    b428:	e3500000 	cmp	r0, #0
    b42c:	1affffe6 	bne	b3cc <CKernelOptions::CKernelOptions()+0x174>
    b430:	e3570000 	cmp	r7, #0
    b434:	0affffaf 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b438:	e1d430d1 	ldrsb	r3, [r4, #1]
    b43c:	e3530000 	cmp	r3, #0
    b440:	0affffac 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b444:	e1a00007 	mov	r0, r7
    b448:	ebffff32 	bl	b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b44c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b450:	e3530f96 	cmp	r3, #600	; 0x258
    b454:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b458:	eaffffa6 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b45c:	e1a01007 	mov	r1, r7
    b460:	e1a00008 	mov	r0, r8
    b464:	e3a02013 	mov	r2, #19
    b468:	ebfffe22 	bl	acf8 <strncpy>
    b46c:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    b470:	eaffffa0 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b474:	e1a00006 	mov	r0, r6
    b478:	e59f1108 	ldr	r1, [pc, #264]	; b588 <CKernelOptions::CKernelOptions()+0x330>
    b47c:	ebfffdee 	bl	ac3c <strcmp>
    b480:	e2504000 	subs	r4, r0, #0
    b484:	1a000005 	bne	b4a0 <CKernelOptions::CKernelOptions()+0x248>
    b488:	e1a01007 	mov	r1, r7
    b48c:	e1a00009 	mov	r0, r9
    b490:	e3a02002 	mov	r2, #2
    b494:	ebfffe17 	bl	acf8 <strncpy>
    b498:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    b49c:	eaffff95 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b4a0:	e1a00006 	mov	r0, r6
    b4a4:	e59f10e0 	ldr	r1, [pc, #224]	; b58c <CKernelOptions::CKernelOptions()+0x334>
    b4a8:	ebfffde3 	bl	ac3c <strcmp>
    b4ac:	e3500000 	cmp	r0, #0
    b4b0:	1a00000b 	bne	b4e4 <CKernelOptions::CKernelOptions()+0x28c>
    b4b4:	e3570000 	cmp	r7, #0
    b4b8:	0affff8e 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b4bc:	e1d730d0 	ldrsb	r3, [r7]
    b4c0:	e3530000 	cmp	r3, #0
    b4c4:	0affff8b 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b4c8:	e1a00007 	mov	r0, r7
    b4cc:	ebffff11 	bl	b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b4d0:	e59f30b8 	ldr	r3, [pc, #184]	; b590 <CKernelOptions::CKernelOptions()+0x338>
    b4d4:	e24020c8 	sub	r2, r0, #200	; 0xc8
    b4d8:	e1520003 	cmp	r2, r3
    b4dc:	95850834 	strls	r0, [r5, #2100]	; 0x834
    b4e0:	eaffff84 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b4e4:	e1a00006 	mov	r0, r6
    b4e8:	e59f10a4 	ldr	r1, [pc, #164]	; b594 <CKernelOptions::CKernelOptions()+0x33c>
    b4ec:	ebfffdd2 	bl	ac3c <strcmp>
    b4f0:	e3500000 	cmp	r0, #0
    b4f4:	1a000006 	bne	b514 <CKernelOptions::CKernelOptions()+0x2bc>
    b4f8:	e1a00007 	mov	r0, r7
    b4fc:	e59f1094 	ldr	r1, [pc, #148]	; b598 <CKernelOptions::CKernelOptions()+0x340>
    b500:	ebfffdcd 	bl	ac3c <strcmp>
    b504:	e3500000 	cmp	r0, #0
    b508:	03a03001 	moveq	r3, #1
    b50c:	05853838 	streq	r3, [r5, #2104]	; 0x838
    b510:	eaffff78 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b514:	e1a00006 	mov	r0, r6
    b518:	e59f107c 	ldr	r1, [pc, #124]	; b59c <CKernelOptions::CKernelOptions()+0x344>
    b51c:	ebfffdc6 	bl	ac3c <strcmp>
    b520:	e16f3f17 	clz	r3, r7
    b524:	e1a032a3 	lsr	r3, r3, #5
    b528:	e3500000 	cmp	r0, #0
    b52c:	01a00003 	moveq	r0, r3
    b530:	13830001 	orrne	r0, r3, #1
    b534:	e3500000 	cmp	r0, #0
    b538:	1affff6e 	bne	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b53c:	e1d730d0 	ldrsb	r3, [r7]
    b540:	e3530000 	cmp	r3, #0
    b544:	0affff6b 	beq	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b548:	e1a00007 	mov	r0, r7
    b54c:	ebfffef1 	bl	b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b550:	e2403028 	sub	r3, r0, #40	; 0x28
    b554:	e3530026 	cmp	r3, #38	; 0x26
    b558:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b55c:	eaffff65 	b	b2f8 <CKernelOptions::CKernelOptions()+0xa0>
    b560:	000105cc 	.word	0x000105cc
    b564:	000105d4 	.word	0x000105d4
    b568:	00051008 	.word	0x00051008
    b56c:	00050001 	.word	0x00050001
    b570:	0000080c 	.word	0x0000080c
    b574:	00010628 	.word	0x00010628
    b578:	0000053c 	.word	0x0000053c
    b57c:	000105d8 	.word	0x000105d8
    b580:	000105e0 	.word	0x000105e0
    b584:	000105e8 	.word	0x000105e8
    b588:	000105f4 	.word	0x000105f4
    b58c:	000105fc 	.word	0x000105fc
    b590:	00001e78 	.word	0x00001e78
    b594:	0001060c 	.word	0x0001060c
    b598:	00010614 	.word	0x00010614
    b59c:	0001061c 	.word	0x0001061c

0000b5a0 <CKernelOptions::GetOptionValue(char*)>:
    b5a0:	e5d03000 	ldrb	r3, [r0]
    b5a4:	e3530000 	cmp	r3, #0
    b5a8:	1a000003 	bne	b5bc <CKernelOptions::GetOptionValue(char*)+0x1c>
    b5ac:	ea000007 	b	b5d0 <CKernelOptions::GetOptionValue(char*)+0x30>
    b5b0:	e5f03001 	ldrb	r3, [r0, #1]!
    b5b4:	e3530000 	cmp	r3, #0
    b5b8:	0a000004 	beq	b5d0 <CKernelOptions::GetOptionValue(char*)+0x30>
    b5bc:	e353003d 	cmp	r3, #61	; 0x3d
    b5c0:	1afffffa 	bne	b5b0 <CKernelOptions::GetOptionValue(char*)+0x10>
    b5c4:	e3a02000 	mov	r2, #0
    b5c8:	e2803001 	add	r3, r0, #1
    b5cc:	e5c02000 	strb	r2, [r0]
    b5d0:	e1a00003 	mov	r0, r3
    b5d4:	e12fff1e 	bx	lr

0000b5d8 <CKernelOptions::GetDecimal(char*)>:
    b5d8:	e2503000 	subs	r3, r0, #0
    b5dc:	0a000002 	beq	b5ec <CKernelOptions::GetDecimal(char*)+0x14>
    b5e0:	e1d330d0 	ldrsb	r3, [r3]
    b5e4:	e3530000 	cmp	r3, #0
    b5e8:	1a000001 	bne	b5f4 <CKernelOptions::GetDecimal(char*)+0x1c>
    b5ec:	e3e00000 	mvn	r0, #0
    b5f0:	e12fff1e 	bx	lr
    b5f4:	eafffec7 	b	b118 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b5f8 <CPageTable::CPageTable()>:
    b5f8:	e3a01000 	mov	r1, #0
    b5fc:	e3a0298e 	mov	r2, #2326528	; 0x238000
    b600:	e1a0c001 	mov	ip, r1
    b604:	e1a03002 	mov	r3, r2
    b608:	e8800006 	stm	r0, {r1, r2}
    b60c:	e92d4030 	push	{r4, r5, lr}
    b610:	e59f4078 	ldr	r4, [pc, #120]	; b690 <CPageTable::CPageTable()+0x98>
    b614:	e3a0e004 	mov	lr, #4
    b618:	e5d32002 	ldrb	r2, [r3, #2]
    b61c:	e5d31000 	ldrb	r1, [r3]
    b620:	e3822001 	orr	r2, r2, #1
    b624:	e20220f1 	and	r2, r2, #241	; 0xf1
    b628:	e20110e0 	and	r1, r1, #224	; 0xe0
    b62c:	e5c32002 	strb	r2, [r3, #2]
    b630:	e3811006 	orr	r1, r1, #6
    b634:	e5c31000 	strb	r1, [r3]
    b638:	e1d320b2 	ldrh	r2, [r3, #2]
    b63c:	e1d310b0 	ldrh	r1, [r3]
    b640:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
    b644:	e1a05a0c 	lsl	r5, ip, #20
    b648:	e3c220f0 	bic	r2, r2, #240	; 0xf0
    b64c:	e3c11e1e 	bic	r1, r1, #480	; 0x1e0
    b650:	e15c0004 	cmp	ip, r4
    b654:	e1822825 	orr	r2, r2, r5, lsr #16
    b658:	e1c310b0 	strh	r1, [r3]
    b65c:	e1c320b2 	strh	r2, [r3, #2]
    b660:	85d32000 	ldrbhi	r2, [r3]
    b664:	e28cc001 	add	ip, ip, #1
    b668:	83822010 	orrhi	r2, r2, #16
    b66c:	85c32000 	strbhi	r2, [r3]
    b670:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b674:	e5c3e001 	strb	lr, [r3, #1]
    b678:	e2833004 	add	r3, r3, #4
    b67c:	1affffe4 	bne	b614 <CPageTable::CPageTable()+0x1c>
    b680:	e3a03000 	mov	r3, #0
    b684:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    b688:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b68c:	e8bd8030 	pop	{r4, r5, pc}
    b690:	000001ff 	.word	0x000001ff

0000b694 <CPageTable::CPageTable(unsigned int)>:
    b694:	e3a03001 	mov	r3, #1
    b698:	e92d4070 	push	{r4, r5, r6, lr}
    b69c:	e5803000 	str	r3, [r0]
    b6a0:	e1a05000 	mov	r5, r0
    b6a4:	e1a04001 	mov	r4, r1
    b6a8:	eb000f82 	bl	f4b8 <palloc>
    b6ac:	e3500000 	cmp	r0, #0
    b6b0:	e5850004 	str	r0, [r5, #4]
    b6b4:	11a03000 	movne	r3, r0
    b6b8:	0a000034 	beq	b790 <CPageTable::CPageTable(unsigned int)+0xfc>
    b6bc:	e1b02a03 	lsls	r2, r3, #20
    b6c0:	1a00002c 	bne	b778 <CPageTable::CPageTable(unsigned int)+0xe4>
    b6c4:	e3a02000 	mov	r2, #0
    b6c8:	e59f60d8 	ldr	r6, [pc, #216]	; b7a8 <CPageTable::CPageTable(unsigned int)+0x114>
    b6cc:	ea000009 	b	b6f8 <CPageTable::CPageTable(unsigned int)+0x64>
    b6d0:	e5d31002 	ldrb	r1, [r3, #2]
    b6d4:	e6ef007c 	uxtb	r0, ip
    b6d8:	e3c00008 	bic	r0, r0, #8
    b6dc:	e3811001 	orr	r1, r1, #1
    b6e0:	e5c30000 	strb	r0, [r3]
    b6e4:	e5c31002 	strb	r1, [r3, #2]
    b6e8:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b6ec:	e3520202 	cmp	r2, #536870912	; 0x20000000
    b6f0:	e2833004 	add	r3, r3, #4
    b6f4:	0a00001a 	beq	b764 <CPageTable::CPageTable(unsigned int)+0xd0>
    b6f8:	e3a0000e 	mov	r0, #14
    b6fc:	e3a01004 	mov	r1, #4
    b700:	e1a0c822 	lsr	ip, r2, #16
    b704:	e20cc0f0 	and	ip, ip, #240	; 0xf0
    b708:	e1a0ec22 	lsr	lr, r2, #24
    b70c:	e1520006 	cmp	r2, r6
    b710:	e5c3c002 	strb	ip, [r3, #2]
    b714:	e5c30000 	strb	r0, [r3]
    b718:	e5c31001 	strb	r1, [r3, #1]
    b71c:	e5c3e003 	strb	lr, [r3, #3]
    b720:	3afffff0 	bcc	b6e8 <CPageTable::CPageTable(unsigned int)+0x54>
    b724:	e6efc070 	uxtb	ip, r0
    b728:	e38cc010 	orr	ip, ip, #16
    b72c:	e1540002 	cmp	r4, r2
    b730:	e5c3c000 	strb	ip, [r3]
    b734:	9affffe5 	bls	b6d0 <CPageTable::CPageTable(unsigned int)+0x3c>
    b738:	e3520501 	cmp	r2, #4194304	; 0x400000
    b73c:	1affffe9 	bne	b6e8 <CPageTable::CPageTable(unsigned int)+0x54>
    b740:	e5d31000 	ldrb	r1, [r3]
    b744:	e5d32002 	ldrb	r2, [r3, #2]
    b748:	e20110f3 	and	r1, r1, #243	; 0xf3
    b74c:	e3822001 	orr	r2, r2, #1
    b750:	e5c32002 	strb	r2, [r3, #2]
    b754:	e5c31000 	strb	r1, [r3]
    b758:	e3a02605 	mov	r2, #5242880	; 0x500000
    b75c:	e2833004 	add	r3, r3, #4
    b760:	eaffffe4 	b	b6f8 <CPageTable::CPageTable(unsigned int)+0x64>
    b764:	e3a03000 	mov	r3, #0
    b768:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    b76c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b770:	e1a00005 	mov	r0, r5
    b774:	e8bd8070 	pop	{r4, r5, r6, pc}
    b778:	e59f002c 	ldr	r0, [pc, #44]	; b7ac <CPageTable::CPageTable(unsigned int)+0x118>
    b77c:	e59f102c 	ldr	r1, [pc, #44]	; b7b0 <CPageTable::CPageTable(unsigned int)+0x11c>
    b780:	e3a02051 	mov	r2, #81	; 0x51
    b784:	eb0004c9 	bl	cab0 <assertion_failed>
    b788:	e5953004 	ldr	r3, [r5, #4]
    b78c:	eaffffcc 	b	b6c4 <CPageTable::CPageTable(unsigned int)+0x30>
    b790:	e59f001c 	ldr	r0, [pc, #28]	; b7b4 <CPageTable::CPageTable(unsigned int)+0x120>
    b794:	e59f1014 	ldr	r1, [pc, #20]	; b7b0 <CPageTable::CPageTable(unsigned int)+0x11c>
    b798:	e3a02050 	mov	r2, #80	; 0x50
    b79c:	eb0004c3 	bl	cab0 <assertion_failed>
    b7a0:	e5953004 	ldr	r3, [r5, #4]
    b7a4:	eaffffc4 	b	b6bc <CPageTable::CPageTable(unsigned int)+0x28>
    b7a8:	0000ffc4 	.word	0x0000ffc4
    b7ac:	00010650 	.word	0x00010650
    b7b0:	00010640 	.word	0x00010640
    b7b4:	00010630 	.word	0x00010630

0000b7b8 <CPageTable::~CPageTable()>:
    b7b8:	e5903000 	ldr	r3, [r0]
    b7bc:	e92d4010 	push	{r4, lr}
    b7c0:	e3530000 	cmp	r3, #0
    b7c4:	e1a04000 	mov	r4, r0
    b7c8:	0a000001 	beq	b7d4 <CPageTable::~CPageTable()+0x1c>
    b7cc:	e5900004 	ldr	r0, [r0, #4]
    b7d0:	eb000f74 	bl	f5a8 <pfree>
    b7d4:	e1a00004 	mov	r0, r4
    b7d8:	e8bd8010 	pop	{r4, pc}

0000b7dc <CPageTable::GetBaseAddress() const>:
    b7dc:	e5900004 	ldr	r0, [r0, #4]
    b7e0:	e3800001 	orr	r0, r0, #1
    b7e4:	e12fff1e 	bx	lr

0000b7e8 <CScreenDevice::~CScreenDevice()>:
    b7e8:	e5902010 	ldr	r2, [r0, #16]
    b7ec:	e92d4038 	push	{r3, r4, r5, lr}
    b7f0:	e59f3060 	ldr	r3, [pc, #96]	; b858 <CScreenDevice::~CScreenDevice()+0x70>
    b7f4:	e3520000 	cmp	r2, #0
    b7f8:	e1a04000 	mov	r4, r0
    b7fc:	e5803000 	str	r3, [r0]
    b800:	0a000003 	beq	b814 <CScreenDevice::~CScreenDevice()+0x2c>
    b804:	e5900004 	ldr	r0, [r0, #4]
    b808:	e3500000 	cmp	r0, #0
    b80c:	0a000000 	beq	b814 <CScreenDevice::~CScreenDevice()+0x2c>
    b810:	ebfff970 	bl	9dd8 <operator delete[](void*)>
    b814:	e3a03000 	mov	r3, #0
    b818:	e5945014 	ldr	r5, [r4, #20]
    b81c:	e5843004 	str	r3, [r4, #4]
    b820:	e1550003 	cmp	r5, r3
    b824:	0a000003 	beq	b838 <CScreenDevice::~CScreenDevice()+0x50>
    b828:	e1a00005 	mov	r0, r5
    b82c:	eb00104e 	bl	f96c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b830:	e1a00005 	mov	r0, r5
    b834:	ebfff966 	bl	9dd4 <operator delete(void*)>
    b838:	e3a03000 	mov	r3, #0
    b83c:	e2840018 	add	r0, r4, #24
    b840:	e5843014 	str	r3, [r4, #20]
    b844:	eb0004be 	bl	cb44 <CCharGenerator::~CCharGenerator()>
    b848:	e1a00004 	mov	r0, r4
    b84c:	eb0010c6 	bl	fb6c <CDevice::~CDevice()>
    b850:	e1a00004 	mov	r0, r4
    b854:	e8bd8038 	pop	{r3, r4, r5, pc}
    b858:	00010678 	.word	0x00010678

0000b85c <CScreenDevice::~CScreenDevice()>:
    b85c:	e92d4010 	push	{r4, lr}
    b860:	e1a04000 	mov	r4, r0
    b864:	ebffffdf 	bl	b7e8 <CScreenDevice::~CScreenDevice()>
    b868:	e1a00004 	mov	r0, r4
    b86c:	ebfff958 	bl	9dd4 <operator delete(void*)>
    b870:	e1a00004 	mov	r0, r4
    b874:	e8bd8010 	pop	{r4, pc}

0000b878 <CScreenDevice::InvertCursor() [clone .part.6]>:
    b878:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b87c:	e2806018 	add	r6, r0, #24
    b880:	e1a05000 	mov	r5, r0
    b884:	e1a00006 	mov	r0, r6
    b888:	eb0004b2 	bl	cb58 <CCharGenerator::GetUnderline() const>
    b88c:	e1a07000 	mov	r7, r0
    b890:	e1a00006 	mov	r0, r6
    b894:	eb0004ad 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    b898:	e1570000 	cmp	r7, r0
    b89c:	e3a08000 	mov	r8, #0
    b8a0:	2a00001d 	bcs	b91c <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    b8a4:	e3a04000 	mov	r4, #0
    b8a8:	ea000012 	b	b8f8 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    b8ac:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    b8b0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    b8b4:	e0843003 	add	r3, r4, r3
    b8b8:	e1530002 	cmp	r3, r2
    b8bc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b8c0:	2a00000b 	bcs	b8f4 <CScreenDevice::InvertCursor() [clone .part.6]+0x7c>
    b8c4:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    b8c8:	e0872002 	add	r2, r7, r2
    b8cc:	e1520001 	cmp	r2, r1
    b8d0:	2a000007 	bcs	b8f4 <CScreenDevice::InvertCursor() [clone .part.6]+0x7c>
    b8d4:	e5950020 	ldr	r0, [r5, #32]
    b8d8:	e5951004 	ldr	r1, [r5, #4]
    b8dc:	e0223290 	mla	r2, r0, r2, r3
    b8e0:	e1a02082 	lsl	r2, r2, #1
    b8e4:	e19130b2 	ldrh	r3, [r1, r2]
    b8e8:	e3530000 	cmp	r3, #0
    b8ec:	0a00000b 	beq	b920 <CScreenDevice::InvertCursor() [clone .part.6]+0xa8>
    b8f0:	e18180b2 	strh	r8, [r1, r2]
    b8f4:	e2844001 	add	r4, r4, #1
    b8f8:	e1a00006 	mov	r0, r6
    b8fc:	eb000491 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    b900:	e1540000 	cmp	r4, r0
    b904:	3affffe8 	bcc	b8ac <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    b908:	e1a00006 	mov	r0, r6
    b90c:	eb00048f 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    b910:	e2877001 	add	r7, r7, #1
    b914:	e1570000 	cmp	r7, r0
    b918:	3affffe1 	bcc	b8a4 <CScreenDevice::InvertCursor() [clone .part.6]+0x2c>
    b91c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b920:	e1d534b8 	ldrh	r3, [r5, #72]	; 0x48
    b924:	e18130b2 	strh	r3, [r1, r2]
    b928:	eafffff1 	b	b8f4 <CScreenDevice::InvertCursor() [clone .part.6]+0x7c>

0000b92c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b92c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b930:	e1a04000 	mov	r4, r0
    b934:	e3a05000 	mov	r5, #0
    b938:	e1a07002 	mov	r7, r2
    b93c:	e1a06003 	mov	r6, r3
    b940:	e1a08001 	mov	r8, r1
    b944:	eb001095 	bl	fba0 <CDevice::CDevice()>
    b948:	e59f004c 	ldr	r0, [pc, #76]	; b99c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    b94c:	e5848008 	str	r8, [r4, #8]
    b950:	e8840021 	stm	r4, {r0, r5}
    b954:	e584700c 	str	r7, [r4, #12]
    b958:	e5846010 	str	r6, [r4, #16]
    b95c:	e5845014 	str	r5, [r4, #20]
    b960:	e2840018 	add	r0, r4, #24
    b964:	eb000473 	bl	cb38 <CCharGenerator::CCharGenerator()>
    b968:	e3a03001 	mov	r3, #1
    b96c:	e3e02020 	mvn	r2, #32
    b970:	e5845030 	str	r5, [r4, #48]	; 0x30
    b974:	e5845034 	str	r5, [r4, #52]	; 0x34
    b978:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b97c:	e5845040 	str	r5, [r4, #64]	; 0x40
    b980:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b984:	e5845058 	str	r5, [r4, #88]	; 0x58
    b988:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    b98c:	e5843044 	str	r3, [r4, #68]	; 0x44
    b990:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b994:	e1a00004 	mov	r0, r4
    b998:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b99c:	00010678 	.word	0x00010678

0000b9a0 <CScreenDevice::Clear()>:
    b9a0:	e1a03000 	mov	r3, r0
    b9a4:	e3a01000 	mov	r1, #0
    b9a8:	e5900004 	ldr	r0, [r0, #4]
    b9ac:	e593201c 	ldr	r2, [r3, #28]
    b9b0:	eafffc77 	b	ab94 <memset>

0000b9b4 <CScreenDevice::GetWidth() const>:
    b9b4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b9b8:	e12fff1e 	bx	lr

0000b9bc <CScreenDevice::GetHeight() const>:
    b9bc:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b9c0:	e12fff1e 	bx	lr

0000b9c4 <CScreenDevice::GetColumns() const>:
    b9c4:	e92d4010 	push	{r4, lr}
    b9c8:	e2800018 	add	r0, r0, #24
    b9cc:	e590400c 	ldr	r4, [r0, #12]
    b9d0:	eb00045c 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    b9d4:	e1a01000 	mov	r1, r0
    b9d8:	e1a00004 	mov	r0, r4
    b9dc:	eb000f6e 	bl	f79c <__aeabi_uidiv>
    b9e0:	e8bd8010 	pop	{r4, pc}

0000b9e4 <CScreenDevice::GetRows() const>:
    b9e4:	e92d4010 	push	{r4, lr}
    b9e8:	e2800018 	add	r0, r0, #24
    b9ec:	e5904014 	ldr	r4, [r0, #20]
    b9f0:	eb000456 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    b9f4:	e1a01000 	mov	r1, r0
    b9f8:	e1a00004 	mov	r0, r4
    b9fc:	eb000f66 	bl	f79c <__aeabi_uidiv>
    ba00:	e8bd8010 	pop	{r4, pc}

0000ba04 <CScreenDevice::GetStatus()>:
    ba04:	e5912004 	ldr	r2, [r1, #4]
    ba08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba0c:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    ba10:	e591b01c 	ldr	fp, [r1, #28]
    ba14:	e591a030 	ldr	sl, [r1, #48]	; 0x30
    ba18:	e5919034 	ldr	r9, [r1, #52]	; 0x34
    ba1c:	e5918038 	ldr	r8, [r1, #56]	; 0x38
    ba20:	e591703c 	ldr	r7, [r1, #60]	; 0x3c
    ba24:	e5916040 	ldr	r6, [r1, #64]	; 0x40
    ba28:	e5915044 	ldr	r5, [r1, #68]	; 0x44
    ba2c:	e1d144b8 	ldrh	r4, [r1, #72]	; 0x48
    ba30:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    ba34:	e5802000 	str	r2, [r0]
    ba38:	e5912054 	ldr	r2, [r1, #84]	; 0x54
    ba3c:	e5911058 	ldr	r1, [r1, #88]	; 0x58
    ba40:	e580b004 	str	fp, [r0, #4]
    ba44:	e580a008 	str	sl, [r0, #8]
    ba48:	e580900c 	str	r9, [r0, #12]
    ba4c:	e5808010 	str	r8, [r0, #16]
    ba50:	e5807014 	str	r7, [r0, #20]
    ba54:	e5806018 	str	r6, [r0, #24]
    ba58:	e580501c 	str	r5, [r0, #28]
    ba5c:	e1c042b0 	strh	r4, [r0, #32]
    ba60:	e580e024 	str	lr, [r0, #36]	; 0x24
    ba64:	e580c028 	str	ip, [r0, #40]	; 0x28
    ba68:	e580202c 	str	r2, [r0, #44]	; 0x2c
    ba6c:	e5801030 	str	r1, [r0, #48]	; 0x30
    ba70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ba74 <CScreenDevice::SetStatus(TScreenStatus)>:
    ba74:	e24dd010 	sub	sp, sp, #16
    ba78:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    ba7c:	e28dc024 	add	ip, sp, #36	; 0x24
    ba80:	e88c000e 	stm	ip, {r1, r2, r3}
    ba84:	e590201c 	ldr	r2, [r0, #28]
    ba88:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    ba8c:	e1520003 	cmp	r2, r3
    ba90:	0a000003 	beq	baa4 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    ba94:	e3a00000 	mov	r0, #0
    ba98:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    ba9c:	e28dd010 	add	sp, sp, #16
    baa0:	e12fff1e 	bx	lr
    baa4:	e5901020 	ldr	r1, [r0, #32]
    baa8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    baac:	e1510003 	cmp	r1, r3
    bab0:	1afffff7 	bne	ba94 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bab4:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    bab8:	e1a04000 	mov	r4, r0
    babc:	e3530000 	cmp	r3, #0
    bac0:	1a000022 	bne	bb50 <CScreenDevice::SetStatus(TScreenStatus)+0xdc>
    bac4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    bac8:	e3530000 	cmp	r3, #0
    bacc:	1afffff0 	bne	ba94 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bad0:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
    bad4:	e3530000 	cmp	r3, #0
    bad8:	1affffed 	bne	ba94 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    badc:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    bae0:	e5940004 	ldr	r0, [r4, #4]
    bae4:	ebfffd74 	bl	b0bc <memcpy>
    bae8:	e594905c 	ldr	r9, [r4, #92]	; 0x5c
    baec:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
    baf0:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
    baf4:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
    baf8:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
    bafc:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
    bb00:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
    bb04:	e1dd04b4 	ldrh	r0, [sp, #68]	; 0x44
    bb08:	e28d1048 	add	r1, sp, #72	; 0x48
    bb0c:	e3590000 	cmp	r9, #0
    bb10:	e891000e 	ldm	r1, {r1, r2, r3}
    bb14:	e5848030 	str	r8, [r4, #48]	; 0x30
    bb18:	e5847034 	str	r7, [r4, #52]	; 0x34
    bb1c:	e5846038 	str	r6, [r4, #56]	; 0x38
    bb20:	e584503c 	str	r5, [r4, #60]	; 0x3c
    bb24:	e584e040 	str	lr, [r4, #64]	; 0x40
    bb28:	e584c044 	str	ip, [r4, #68]	; 0x44
    bb2c:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    bb30:	e584104c 	str	r1, [r4, #76]	; 0x4c
    bb34:	e5842050 	str	r2, [r4, #80]	; 0x50
    bb38:	e5843054 	str	r3, [r4, #84]	; 0x54
    bb3c:	1a000011 	bne	bb88 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    bb40:	e3a03000 	mov	r3, #0
    bb44:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bb48:	e3a00001 	mov	r0, #1
    bb4c:	eaffffd1 	b	ba98 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    bb50:	ebfff8a1 	bl	9ddc <EnterCritical>
    bb54:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    bb58:	e3530000 	cmp	r3, #0
    bb5c:	0a000004 	beq	bb74 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    bb60:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    bb64:	e3530000 	cmp	r3, #0
    bb68:	0affffc9 	beq	ba94 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bb6c:	ebfff8a9 	bl	9e18 <LeaveCritical>
    bb70:	eaffffc7 	b	ba94 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bb74:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
    bb78:	e3530000 	cmp	r3, #0
    bb7c:	0594201c 	ldreq	r2, [r4, #28]
    bb80:	1afffff6 	bne	bb60 <CScreenDevice::SetStatus(TScreenStatus)+0xec>
    bb84:	eaffffd4 	b	badc <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    bb88:	ebfff8a2 	bl	9e18 <LeaveCritical>
    bb8c:	eaffffeb 	b	bb40 <CScreenDevice::SetStatus(TScreenStatus)+0xcc>

0000bb90 <CScreenDevice::CarriageReturn()>:
    bb90:	e3a03000 	mov	r3, #0
    bb94:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bb98:	e12fff1e 	bx	lr

0000bb9c <CScreenDevice::CursorHome()>:
    bb9c:	e3a02000 	mov	r2, #0
    bba0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bba4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    bba8:	e5803040 	str	r3, [r0, #64]	; 0x40
    bbac:	e12fff1e 	bx	lr

0000bbb0 <CScreenDevice::CursorLeft()>:
    bbb0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    bbb4:	e92d4070 	push	{r4, r5, r6, lr}
    bbb8:	e3530000 	cmp	r3, #0
    bbbc:	e1a04000 	mov	r4, r0
    bbc0:	1a00000f 	bne	bc04 <CScreenDevice::CursorLeft()+0x54>
    bbc4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bbc8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bbcc:	e1520003 	cmp	r2, r3
    bbd0:	98bd8070 	popls	{r4, r5, r6, pc}
    bbd4:	e2806018 	add	r6, r0, #24
    bbd8:	e1a00006 	mov	r0, r6
    bbdc:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    bbe0:	eb0003d8 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    bbe4:	e0600005 	rsb	r0, r0, r5
    bbe8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bbec:	e1a00006 	mov	r0, r6
    bbf0:	eb0003d6 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bbf4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bbf8:	e0600003 	rsb	r0, r0, r3
    bbfc:	e5840040 	str	r0, [r4, #64]	; 0x40
    bc00:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc04:	e2800018 	add	r0, r0, #24
    bc08:	eb0003ce 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    bc0c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bc10:	e0600003 	rsb	r0, r0, r3
    bc14:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bc18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc1c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    bc1c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    bc20:	e2807018 	add	r7, r0, #24
    bc24:	e1a04002 	mov	r4, r2
    bc28:	e1a06000 	mov	r6, r0
    bc2c:	e1a00007 	mov	r0, r7
    bc30:	e1a05001 	mov	r5, r1
    bc34:	eb0003c3 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    bc38:	e2444001 	sub	r4, r4, #1
    bc3c:	e0040094 	mul	r4, r4, r0
    bc40:	e1a00007 	mov	r0, r7
    bc44:	eb0003c1 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bc48:	e5963024 	ldr	r3, [r6, #36]	; 0x24
    bc4c:	e1540003 	cmp	r4, r3
    bc50:	28bd80f8 	popcs	{r3, r4, r5, r6, r7, pc}
    bc54:	e2455001 	sub	r5, r5, #1
    bc58:	e0010095 	mul	r1, r5, r0
    bc5c:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    bc60:	e1510003 	cmp	r1, r3
    bc64:	38bd80f8 	popcc	{r3, r4, r5, r6, r7, pc}
    bc68:	e5963038 	ldr	r3, [r6, #56]	; 0x38
    bc6c:	e1510003 	cmp	r1, r3
    bc70:	3586403c 	strcc	r4, [r6, #60]	; 0x3c
    bc74:	35861040 	strcc	r1, [r6, #64]	; 0x40
    bc78:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000bc7c <CScreenDevice::CursorUp()>:
    bc7c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bc80:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bc84:	e1520003 	cmp	r2, r3
    bc88:	912fff1e 	bxls	lr
    bc8c:	e92d4010 	push	{r4, lr}
    bc90:	e1a04000 	mov	r4, r0
    bc94:	e2800018 	add	r0, r0, #24
    bc98:	eb0003ac 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bc9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bca0:	e0600003 	rsb	r0, r0, r3
    bca4:	e5840040 	str	r0, [r4, #64]	; 0x40
    bca8:	e8bd8010 	pop	{r4, pc}

0000bcac <CScreenDevice::DeleteChars(unsigned int)>:
    bcac:	e12fff1e 	bx	lr

0000bcb0 <CScreenDevice::DeleteLines(unsigned int)>:
    bcb0:	e12fff1e 	bx	lr

0000bcb4 <CScreenDevice::InsertLines(unsigned int)>:
    bcb4:	e12fff1e 	bx	lr

0000bcb8 <CScreenDevice::InsertMode(int)>:
    bcb8:	e580104c 	str	r1, [r0, #76]	; 0x4c
    bcbc:	e12fff1e 	bx	lr

0000bcc0 <CScreenDevice::ReverseScroll()>:
    bcc0:	e12fff1e 	bx	lr

0000bcc4 <CScreenDevice::SetCursorMode(int)>:
    bcc4:	e5801044 	str	r1, [r0, #68]	; 0x44
    bcc8:	e12fff1e 	bx	lr

0000bccc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    bccc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    bcd0:	e2807018 	add	r7, r0, #24
    bcd4:	e1a06000 	mov	r6, r0
    bcd8:	e1a04001 	mov	r4, r1
    bcdc:	e1a00007 	mov	r0, r7
    bce0:	e1a05002 	mov	r5, r2
    bce4:	eb000399 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bce8:	e2444001 	sub	r4, r4, #1
    bcec:	e0040094 	mul	r4, r4, r0
    bcf0:	e1a00007 	mov	r0, r7
    bcf4:	eb000395 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bcf8:	e0000095 	mul	r0, r5, r0
    bcfc:	e596102c 	ldr	r1, [r6, #44]	; 0x2c
    bd00:	e3500000 	cmp	r0, #0
    bd04:	11540001 	cmpne	r4, r1
    bd08:	33a03001 	movcc	r3, #1
    bd0c:	23a03000 	movcs	r3, #0
    bd10:	e1500001 	cmp	r0, r1
    bd14:	83a03000 	movhi	r3, #0
    bd18:	92033001 	andls	r3, r3, #1
    bd1c:	e1540000 	cmp	r4, r0
    bd20:	23a03000 	movcs	r3, #0
    bd24:	32033001 	andcc	r3, r3, #1
    bd28:	e3530000 	cmp	r3, #0
    bd2c:	11a01004 	movne	r1, r4
    bd30:	e3a03000 	mov	r3, #0
    bd34:	05961034 	ldreq	r1, [r6, #52]	; 0x34
    bd38:	15864034 	strne	r4, [r6, #52]	; 0x34
    bd3c:	15860038 	strne	r0, [r6, #56]	; 0x38
    bd40:	e5861040 	str	r1, [r6, #64]	; 0x40
    bd44:	e586303c 	str	r3, [r6, #60]	; 0x3c
    bd48:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000bd4c <CScreenDevice::SetStandoutMode(unsigned int)>:
    bd4c:	e351001b 	cmp	r1, #27
    bd50:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    bd54:	ea00001d 	b	bdd0 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    bd58:	0000bde0 	.word	0x0000bde0
    bd5c:	0000bdd4 	.word	0x0000bdd4
    bd60:	0000bdc8 	.word	0x0000bdc8
    bd64:	0000bdd0 	.word	0x0000bdd0
    bd68:	0000bdd0 	.word	0x0000bdd0
    bd6c:	0000bdd0 	.word	0x0000bdd0
    bd70:	0000bdd0 	.word	0x0000bdd0
    bd74:	0000bdd0 	.word	0x0000bdd0
    bd78:	0000bdd0 	.word	0x0000bdd0
    bd7c:	0000bdd0 	.word	0x0000bdd0
    bd80:	0000bdd0 	.word	0x0000bdd0
    bd84:	0000bdd0 	.word	0x0000bdd0
    bd88:	0000bdd0 	.word	0x0000bdd0
    bd8c:	0000bdd0 	.word	0x0000bdd0
    bd90:	0000bdd0 	.word	0x0000bdd0
    bd94:	0000bdd0 	.word	0x0000bdd0
    bd98:	0000bdd0 	.word	0x0000bdd0
    bd9c:	0000bdd0 	.word	0x0000bdd0
    bda0:	0000bdd0 	.word	0x0000bdd0
    bda4:	0000bdd0 	.word	0x0000bdd0
    bda8:	0000bdd0 	.word	0x0000bdd0
    bdac:	0000bdd0 	.word	0x0000bdd0
    bdb0:	0000bdd0 	.word	0x0000bdd0
    bdb4:	0000bdd0 	.word	0x0000bdd0
    bdb8:	0000bdd0 	.word	0x0000bdd0
    bdbc:	0000bdd0 	.word	0x0000bdd0
    bdc0:	0000bdd0 	.word	0x0000bdd0
    bdc4:	0000bde0 	.word	0x0000bde0
    bdc8:	e3a0301f 	mov	r3, #31
    bdcc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    bdd0:	e12fff1e 	bx	lr
    bdd4:	e3a03b3e 	mov	r3, #63488	; 0xf800
    bdd8:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    bddc:	e12fff1e 	bx	lr
    bde0:	e3e03020 	mvn	r3, #32
    bde4:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    bde8:	e12fff1e 	bx	lr

0000bdec <CScreenDevice::Scroll()>:
    bdec:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    bdf0:	e1a07000 	mov	r7, r0
    bdf4:	e2800018 	add	r0, r0, #24
    bdf8:	eb000354 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bdfc:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    be00:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    be04:	e5975020 	ldr	r5, [r7, #32]
    be08:	e0634004 	rsb	r4, r3, r4
    be0c:	e1a02085 	lsl	r2, r5, #1
    be10:	e0604004 	rsb	r4, r0, r4
    be14:	e0040492 	mul	r4, r2, r4
    be18:	e0050395 	mul	r5, r5, r3
    be1c:	e5978004 	ldr	r8, [r7, #4]
    be20:	e3540000 	cmp	r4, #0
    be24:	e1a06000 	mov	r6, r0
    be28:	e0885085 	add	r5, r8, r5, lsl #1
    be2c:	1a000007 	bne	be50 <CScreenDevice::Scroll()+0x64>
    be30:	e0020296 	mul	r2, r6, r2
    be34:	e1b02122 	lsrs	r2, r2, #2
    be38:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    be3c:	e1a00005 	mov	r0, r5
    be40:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    be44:	e1a02102 	lsl	r2, r2, #2
    be48:	e3a01000 	mov	r1, #0
    be4c:	eafffb50 	b	ab94 <memset>
    be50:	e0803003 	add	r3, r0, r3
    be54:	e0288392 	mla	r8, r2, r3, r8
    be58:	e3c4900f 	bic	r9, r4, #15
    be5c:	e1a01008 	mov	r1, r8
    be60:	e1a02009 	mov	r2, r9
    be64:	e1a00005 	mov	r0, r5
    be68:	ebfffc93 	bl	b0bc <memcpy>
    be6c:	e204200e 	and	r2, r4, #14
    be70:	e0850009 	add	r0, r5, r9
    be74:	e0881009 	add	r1, r8, r9
    be78:	ebfffc8f 	bl	b0bc <memcpy>
    be7c:	e5972020 	ldr	r2, [r7, #32]
    be80:	e3c44003 	bic	r4, r4, #3
    be84:	e1a02082 	lsl	r2, r2, #1
    be88:	e0855004 	add	r5, r5, r4
    be8c:	eaffffe7 	b	be30 <CScreenDevice::Scroll()+0x44>

0000be90 <CScreenDevice::CursorDown()>:
    be90:	e92d4038 	push	{r3, r4, r5, lr}
    be94:	e1a04000 	mov	r4, r0
    be98:	e2805018 	add	r5, r0, #24
    be9c:	e1a00005 	mov	r0, r5
    bea0:	eb00032a 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bea4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bea8:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    beac:	e0800003 	add	r0, r0, r3
    beb0:	e1500002 	cmp	r0, r2
    beb4:	e5840040 	str	r0, [r4, #64]	; 0x40
    beb8:	38bd8038 	popcc	{r3, r4, r5, pc}
    bebc:	e1a00004 	mov	r0, r4
    bec0:	ebffffc9 	bl	bdec <CScreenDevice::Scroll()>
    bec4:	e1a00005 	mov	r0, r5
    bec8:	eb000320 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    becc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bed0:	e0600003 	rsb	r0, r0, r3
    bed4:	e5840040 	str	r0, [r4, #64]	; 0x40
    bed8:	e8bd8038 	pop	{r3, r4, r5, pc}

0000bedc <CScreenDevice::NewLine()>:
    bedc:	e3a02000 	mov	r2, #0
    bee0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    bee4:	eaffffe9 	b	be90 <CScreenDevice::CursorDown()>

0000bee8 <CScreenDevice::CursorRight()>:
    bee8:	e92d4010 	push	{r4, lr}
    beec:	e1a04000 	mov	r4, r0
    bef0:	e2800018 	add	r0, r0, #24
    bef4:	eb000313 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    bef8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    befc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bf00:	e0800003 	add	r0, r0, r3
    bf04:	e1500002 	cmp	r0, r2
    bf08:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bf0c:	38bd8010 	popcc	{r4, pc}
    bf10:	e3a03000 	mov	r3, #0
    bf14:	e1a00004 	mov	r0, r4
    bf18:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bf1c:	e8bd4010 	pop	{r4, lr}
    bf20:	eaffffda 	b	be90 <CScreenDevice::CursorDown()>

0000bf24 <CScreenDevice::Tabulator()>:
    bf24:	e92d4038 	push	{r3, r4, r5, lr}
    bf28:	e1a05000 	mov	r5, r0
    bf2c:	e2800018 	add	r0, r0, #24
    bf30:	eb000304 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    bf34:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    bf38:	e1a04180 	lsl	r4, r0, #3
    bf3c:	e0840003 	add	r0, r4, r3
    bf40:	e1a01004 	mov	r1, r4
    bf44:	eb000e14 	bl	f79c <__aeabi_uidiv>
    bf48:	e0000094 	mul	r0, r4, r0
    bf4c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bf50:	e585003c 	str	r0, [r5, #60]	; 0x3c
    bf54:	e1500003 	cmp	r0, r3
    bf58:	38bd8038 	popcc	{r3, r4, r5, pc}
    bf5c:	e3a03000 	mov	r3, #0
    bf60:	e1a00005 	mov	r0, r5
    bf64:	e585303c 	str	r3, [r5, #60]	; 0x3c
    bf68:	e8bd4038 	pop	{r3, r4, r5, lr}
    bf6c:	eaffffc7 	b	be90 <CScreenDevice::CursorDown()>

0000bf70 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bf70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf74:	e2805018 	add	r5, r0, #24
    bf78:	e24dd00c 	sub	sp, sp, #12
    bf7c:	e1a06000 	mov	r6, r0
    bf80:	e1a00005 	mov	r0, r5
    bf84:	e1a0a001 	mov	sl, r1
    bf88:	e1a08002 	mov	r8, r2
    bf8c:	e58d3004 	str	r3, [sp, #4]
    bf90:	e1dd93b0 	ldrh	r9, [sp, #48]	; 0x30
    bf94:	e3a07000 	mov	r7, #0
    bf98:	eb0002ec 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    bf9c:	e1570000 	cmp	r7, r0
    bfa0:	2a000025 	bcs	c03c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    bfa4:	e59d3004 	ldr	r3, [sp, #4]
    bfa8:	e3a04000 	mov	r4, #0
    bfac:	e0873003 	add	r3, r7, r3
    bfb0:	e58d3000 	str	r3, [sp]
    bfb4:	ea000000 	b	bfbc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    bfb8:	e2844001 	add	r4, r4, #1
    bfbc:	e1a00005 	mov	r0, r5
    bfc0:	eb0002e0 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    bfc4:	e1540000 	cmp	r4, r0
    bfc8:	e084b008 	add	fp, r4, r8
    bfcc:	2a000015 	bcs	c028 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    bfd0:	e1a03007 	mov	r3, r7
    bfd4:	e1a00005 	mov	r0, r5
    bfd8:	e1a0100a 	mov	r1, sl
    bfdc:	e1a02004 	mov	r2, r4
    bfe0:	eb0002de 	bl	cb60 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bfe4:	e5963024 	ldr	r3, [r6, #36]	; 0x24
    bfe8:	e3500000 	cmp	r0, #0
    bfec:	11a00009 	movne	r0, r9
    bff0:	03a00000 	moveq	r0, #0
    bff4:	e15b0003 	cmp	fp, r3
    bff8:	2affffee 	bcs	bfb8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    bffc:	e5963028 	ldr	r3, [r6, #40]	; 0x28
    c000:	e59d2000 	ldr	r2, [sp]
    c004:	e1520003 	cmp	r2, r3
    c008:	2affffea 	bcs	bfb8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    c00c:	e5963020 	ldr	r3, [r6, #32]
    c010:	e59d1000 	ldr	r1, [sp]
    c014:	e5962004 	ldr	r2, [r6, #4]
    c018:	e02cb193 	mla	ip, r3, r1, fp
    c01c:	e1a0c08c 	lsl	ip, ip, #1
    c020:	e18200bc 	strh	r0, [r2, ip]
    c024:	eaffffe3 	b	bfb8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    c028:	e1a00005 	mov	r0, r5
    c02c:	eb0002c7 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c030:	e2877001 	add	r7, r7, #1
    c034:	e1570000 	cmp	r7, r0
    c038:	3affffd9 	bcc	bfa4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    c03c:	e28dd00c 	add	sp, sp, #12
    c040:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c044 <CScreenDevice::DisplayChar(char)>:
    c044:	e6ef3071 	uxtb	r3, r1
    c048:	e353001f 	cmp	r3, #31
    c04c:	912fff1e 	bxls	lr
    c050:	e92d4010 	push	{r4, lr}
    c054:	e1a04000 	mov	r4, r0
    c058:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    c05c:	e24dd008 	sub	sp, sp, #8
    c060:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c064:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c068:	e58dc000 	str	ip, [sp]
    c06c:	ebffffbf 	bl	bf70 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c070:	e1a00004 	mov	r0, r4
    c074:	e28dd008 	add	sp, sp, #8
    c078:	e8bd4010 	pop	{r4, lr}
    c07c:	eaffff99 	b	bee8 <CScreenDevice::CursorRight()>

0000c080 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c080:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c084:	e2805018 	add	r5, r0, #24
    c088:	e1a0b000 	mov	fp, r0
    c08c:	e1a00005 	mov	r0, r5
    c090:	e3a08000 	mov	r8, #0
    c094:	e1a06001 	mov	r6, r1
    c098:	e1a0a002 	mov	sl, r2
    c09c:	eb0002ab 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c0a0:	e1580000 	cmp	r8, r0
    c0a4:	e1a09008 	mov	r9, r8
    c0a8:	2a000018 	bcs	c110 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x90>
    c0ac:	e3a04000 	mov	r4, #0
    c0b0:	e088700a 	add	r7, r8, sl
    c0b4:	e1a00005 	mov	r0, r5
    c0b8:	eb0002a2 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    c0bc:	e1540000 	cmp	r4, r0
    c0c0:	e0843006 	add	r3, r4, r6
    c0c4:	2a00000c 	bcs	c0fc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    c0c8:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    c0cc:	e2844001 	add	r4, r4, #1
    c0d0:	e1530002 	cmp	r3, r2
    c0d4:	2afffff6 	bcs	c0b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c0d8:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    c0dc:	e1570002 	cmp	r7, r2
    c0e0:	2afffff3 	bcs	c0b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c0e4:	e59b2020 	ldr	r2, [fp, #32]
    c0e8:	e59b1004 	ldr	r1, [fp, #4]
    c0ec:	e0233792 	mla	r3, r2, r7, r3
    c0f0:	e1a03083 	lsl	r3, r3, #1
    c0f4:	e18190b3 	strh	r9, [r1, r3]
    c0f8:	eaffffed 	b	c0b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c0fc:	e1a00005 	mov	r0, r5
    c100:	eb000292 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c104:	e2888001 	add	r8, r8, #1
    c108:	e1580000 	cmp	r8, r0
    c10c:	3affffe6 	bcc	c0ac <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x2c>
    c110:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c114 <CScreenDevice::ClearLineEnd()>:
    c114:	e92d4070 	push	{r4, r5, r6, lr}
    c118:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c11c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c120:	e1540003 	cmp	r4, r3
    c124:	28bd8070 	popcs	{r4, r5, r6, pc}
    c128:	e1a05000 	mov	r5, r0
    c12c:	e2806018 	add	r6, r0, #24
    c130:	e1a01004 	mov	r1, r4
    c134:	e1a00005 	mov	r0, r5
    c138:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c13c:	ebffffcf 	bl	c080 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c140:	e1a00006 	mov	r0, r6
    c144:	eb00027f 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    c148:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c14c:	e0844000 	add	r4, r4, r0
    c150:	e1530004 	cmp	r3, r4
    c154:	8afffff5 	bhi	c130 <CScreenDevice::ClearLineEnd()+0x1c>
    c158:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c15c <CScreenDevice::ClearDisplayEnd()>:
    c15c:	e92d4038 	push	{r3, r4, r5, lr}
    c160:	e1a04000 	mov	r4, r0
    c164:	ebffffea 	bl	c114 <CScreenDevice::ClearLineEnd()>
    c168:	e2840018 	add	r0, r4, #24
    c16c:	e5945040 	ldr	r5, [r4, #64]	; 0x40
    c170:	eb000276 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c174:	e5943020 	ldr	r3, [r4, #32]
    c178:	e0800005 	add	r0, r0, r5
    c17c:	e0000093 	mul	r0, r3, r0
    c180:	e594201c 	ldr	r2, [r4, #28]
    c184:	e5943004 	ldr	r3, [r4, #4]
    c188:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    c18c:	08bd8038 	popeq	{r3, r4, r5, pc}
    c190:	e0830080 	add	r0, r3, r0, lsl #1
    c194:	e1a02082 	lsl	r2, r2, #1
    c198:	e3a01000 	mov	r1, #0
    c19c:	e8bd4038 	pop	{r3, r4, r5, lr}
    c1a0:	eafffa7b 	b	ab94 <memset>

0000c1a4 <CScreenDevice::Initialize()>:
    c1a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c1a8:	e5905010 	ldr	r5, [r0, #16]
    c1ac:	e24dd00c 	sub	sp, sp, #12
    c1b0:	e3550000 	cmp	r5, #0
    c1b4:	e1a04000 	mov	r4, r0
    c1b8:	0a00002a 	beq	c268 <CScreenDevice::Initialize()+0xc4>
    c1bc:	e5903008 	ldr	r3, [r0, #8]
    c1c0:	e590200c 	ldr	r2, [r0, #12]
    c1c4:	e5803024 	str	r3, [r0, #36]	; 0x24
    c1c8:	e0000293 	mul	r0, r3, r2
    c1cc:	e35005fe 	cmp	r0, #1065353216	; 0x3f800000
    c1d0:	e1a00080 	lsl	r0, r0, #1
    c1d4:	e584001c 	str	r0, [r4, #28]
    c1d8:	e5843020 	str	r3, [r4, #32]
    c1dc:	83e00000 	mvnhi	r0, #0
    c1e0:	e5842028 	str	r2, [r4, #40]	; 0x28
    c1e4:	ebfff6f9 	bl	9dd0 <operator new[](unsigned int)>
    c1e8:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    c1ec:	e5840004 	str	r0, [r4, #4]
    c1f0:	e2846018 	add	r6, r4, #24
    c1f4:	e1a00006 	mov	r0, r6
    c1f8:	eb000254 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c1fc:	e1a01000 	mov	r1, r0
    c200:	e1a00007 	mov	r0, r7
    c204:	eb000d64 	bl	f79c <__aeabi_uidiv>
    c208:	e1a05000 	mov	r5, r0
    c20c:	e1a00006 	mov	r0, r6
    c210:	eb00024e 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c214:	e3a02000 	mov	r2, #0
    c218:	e0000590 	mul	r0, r0, r5
    c21c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c220:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c224:	e5840038 	str	r0, [r4, #56]	; 0x38
    c228:	e5843040 	str	r3, [r4, #64]	; 0x40
    c22c:	e584203c 	str	r2, [r4, #60]	; 0x3c
    c230:	e1a00004 	mov	r0, r4
    c234:	ebffffc8 	bl	c15c <CScreenDevice::ClearDisplayEnd()>
    c238:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c23c:	e3530000 	cmp	r3, #0
    c240:	1a000030 	bne	c308 <CScreenDevice::Initialize()+0x164>
    c244:	eb000365 	bl	cfe0 <CDeviceNameService::Get()>
    c248:	e1a02004 	mov	r2, r4
    c24c:	e59f10c0 	ldr	r1, [pc, #192]	; c314 <CScreenDevice::Initialize()+0x170>
    c250:	e3a03000 	mov	r3, #0
    c254:	eb0002f1 	bl	ce20 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c258:	e3a05001 	mov	r5, #1
    c25c:	e1a00005 	mov	r0, r5
    c260:	e28dd00c 	add	sp, sp, #12
    c264:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c268:	e3a00024 	mov	r0, #36	; 0x24
    c26c:	ebfff6d6 	bl	9dcc <operator new(unsigned int)>
    c270:	e1a06000 	mov	r6, r0
    c274:	e5941008 	ldr	r1, [r4, #8]
    c278:	e594200c 	ldr	r2, [r4, #12]
    c27c:	e3a03010 	mov	r3, #16
    c280:	e58d5000 	str	r5, [sp]
    c284:	e58d5004 	str	r5, [sp, #4]
    c288:	eb000d71 	bl	f854 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c28c:	e5846014 	str	r6, [r4, #20]
    c290:	e1a00006 	mov	r0, r6
    c294:	eb000dcf 	bl	f9d8 <CBcmFrameBuffer::Initialize()>
    c298:	e3500000 	cmp	r0, #0
    c29c:	0affffee 	beq	c25c <CScreenDevice::Initialize()+0xb8>
    c2a0:	e5940014 	ldr	r0, [r4, #20]
    c2a4:	eb000e06 	bl	fac4 <CBcmFrameBuffer::GetDepth() const>
    c2a8:	e3500010 	cmp	r0, #16
    c2ac:	1affffea 	bne	c25c <CScreenDevice::Initialize()+0xb8>
    c2b0:	e5940014 	ldr	r0, [r4, #20]
    c2b4:	eb000e04 	bl	facc <CBcmFrameBuffer::GetBuffer() const>
    c2b8:	e5840004 	str	r0, [r4, #4]
    c2bc:	e5940014 	ldr	r0, [r4, #20]
    c2c0:	eb000e03 	bl	fad4 <CBcmFrameBuffer::GetSize() const>
    c2c4:	e584001c 	str	r0, [r4, #28]
    c2c8:	e5940014 	ldr	r0, [r4, #20]
    c2cc:	eb000dfa 	bl	fabc <CBcmFrameBuffer::GetPitch() const>
    c2d0:	e5840020 	str	r0, [r4, #32]
    c2d4:	e5940014 	ldr	r0, [r4, #20]
    c2d8:	eb000def 	bl	fa9c <CBcmFrameBuffer::GetWidth() const>
    c2dc:	e5840024 	str	r0, [r4, #36]	; 0x24
    c2e0:	e5940014 	ldr	r0, [r4, #20]
    c2e4:	eb000dee 	bl	faa4 <CBcmFrameBuffer::GetHeight() const>
    c2e8:	e5943020 	ldr	r3, [r4, #32]
    c2ec:	e1a07000 	mov	r7, r0
    c2f0:	e3130003 	tst	r3, #3
    c2f4:	01a030a3 	lsreq	r3, r3, #1
    c2f8:	e5840028 	str	r0, [r4, #40]	; 0x28
    c2fc:	05843020 	streq	r3, [r4, #32]
    c300:	0affffba 	beq	c1f0 <CScreenDevice::Initialize()+0x4c>
    c304:	eaffffd4 	b	c25c <CScreenDevice::Initialize()+0xb8>
    c308:	e1a00004 	mov	r0, r4
    c30c:	ebfffd59 	bl	b878 <CScreenDevice::InvertCursor() [clone .part.6]>
    c310:	eaffffcb 	b	c244 <CScreenDevice::Initialize()+0xa0>
    c314:	000105cc 	.word	0x000105cc

0000c318 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    c318:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    c31c:	e1a05000 	mov	r5, r0
    c320:	e2807018 	add	r7, r0, #24
    c324:	e1a00007 	mov	r0, r7
    c328:	e595603c 	ldr	r6, [r5, #60]	; 0x3c
    c32c:	e1a04001 	mov	r4, r1
    c330:	eb000204 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    c334:	e0206094 	mla	r0, r4, r0, r6
    c338:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c33c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c340:	e1500003 	cmp	r0, r3
    c344:	31a06000 	movcc	r6, r0
    c348:	21a06003 	movcs	r6, r3
    c34c:	e1540006 	cmp	r4, r6
    c350:	28bd80f8 	popcs	{r3, r4, r5, r6, r7, pc}
    c354:	e1a01004 	mov	r1, r4
    c358:	e1a00005 	mov	r0, r5
    c35c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c360:	ebffff46 	bl	c080 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c364:	e1a00007 	mov	r0, r7
    c368:	eb0001f6 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    c36c:	e0844000 	add	r4, r4, r0
    c370:	e1540006 	cmp	r4, r6
    c374:	3afffff6 	bcc	c354 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x3c>
    c378:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000c37c <CScreenDevice::EraseChars(unsigned int)>:
    c37c:	e3510000 	cmp	r1, #0
    c380:	012fff1e 	bxeq	lr
    c384:	eaffffe3 	b	c318 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000c388 <CScreenDevice::Write(char)>:
    c388:	e92d4010 	push	{r4, lr}
    c38c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c390:	e24dd008 	sub	sp, sp, #8
    c394:	e1a04000 	mov	r4, r0
    c398:	e3530007 	cmp	r3, #7
    c39c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c3a0:	ea000010 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c3a4:	0000c438 	.word	0x0000c438
    c3a8:	0000c498 	.word	0x0000c498
    c3ac:	0000c4b4 	.word	0x0000c4b4
    c3b0:	0000c50c 	.word	0x0000c50c
    c3b4:	0000c5e8 	.word	0x0000c5e8
    c3b8:	0000c608 	.word	0x0000c608
    c3bc:	0000c628 	.word	0x0000c628
    c3c0:	0000c3f8 	.word	0x0000c3f8
    c3c4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c3c8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c3cc:	e1520003 	cmp	r2, r3
    c3d0:	9a000004 	bls	c3e8 <CScreenDevice::Write(char)+0x60>
    c3d4:	e2800018 	add	r0, r0, #24
    c3d8:	eb0001dc 	bl	cb50 <CCharGenerator::GetCharHeight() const>
    c3dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c3e0:	e0600003 	rsb	r0, r0, r3
    c3e4:	e5840040 	str	r0, [r4, #64]	; 0x40
    c3e8:	e3a03000 	mov	r3, #0
    c3ec:	e5843030 	str	r3, [r4, #48]	; 0x30
    c3f0:	e28dd008 	add	sp, sp, #8
    c3f4:	e8bd8010 	pop	{r4, pc}
    c3f8:	e3510068 	cmp	r1, #104	; 0x68
    c3fc:	0a000099 	beq	c668 <CScreenDevice::Write(char)+0x2e0>
    c400:	e351006c 	cmp	r1, #108	; 0x6c
    c404:	0a000097 	beq	c668 <CScreenDevice::Write(char)+0x2e0>
    c408:	e2413030 	sub	r3, r1, #48	; 0x30
    c40c:	e6ef3073 	uxtb	r3, r3
    c410:	e3530009 	cmp	r3, #9
    c414:	8afffff3 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c418:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c41c:	e0833103 	add	r3, r3, r3, lsl #2
    c420:	e0811083 	add	r1, r1, r3, lsl #1
    c424:	e2411030 	sub	r1, r1, #48	; 0x30
    c428:	e3510063 	cmp	r1, #99	; 0x63
    c42c:	e5841050 	str	r1, [r4, #80]	; 0x50
    c430:	8affffec 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c434:	eaffffed 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c438:	e2413008 	sub	r3, r1, #8
    c43c:	e3530013 	cmp	r3, #19
    c440:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c444:	ea0000ed 	b	c800 <CScreenDevice::Write(char)+0x478>
    c448:	0000c6d4 	.word	0x0000c6d4
    c44c:	0000c6c8 	.word	0x0000c6c8
    c450:	0000c6b4 	.word	0x0000c6b4
    c454:	0000c800 	.word	0x0000c800
    c458:	0000c800 	.word	0x0000c800
    c45c:	0000c6a8 	.word	0x0000c6a8
    c460:	0000c800 	.word	0x0000c800
    c464:	0000c800 	.word	0x0000c800
    c468:	0000c800 	.word	0x0000c800
    c46c:	0000c800 	.word	0x0000c800
    c470:	0000c800 	.word	0x0000c800
    c474:	0000c800 	.word	0x0000c800
    c478:	0000c800 	.word	0x0000c800
    c47c:	0000c800 	.word	0x0000c800
    c480:	0000c800 	.word	0x0000c800
    c484:	0000c800 	.word	0x0000c800
    c488:	0000c800 	.word	0x0000c800
    c48c:	0000c800 	.word	0x0000c800
    c490:	0000c800 	.word	0x0000c800
    c494:	0000c69c 	.word	0x0000c69c
    c498:	e351004d 	cmp	r1, #77	; 0x4d
    c49c:	0affffd1 	beq	c3e8 <CScreenDevice::Write(char)+0x60>
    c4a0:	e351005b 	cmp	r1, #91	; 0x5b
    c4a4:	03a03002 	moveq	r3, #2
    c4a8:	05803030 	streq	r3, [r0, #48]	; 0x30
    c4ac:	0affffcf 	beq	c3f0 <CScreenDevice::Write(char)+0x68>
    c4b0:	eaffffcc 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c4b4:	e241303f 	sub	r3, r1, #63	; 0x3f
    c4b8:	e3530011 	cmp	r3, #17
    c4bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c4c0:	ea0000db 	b	c834 <CScreenDevice::Write(char)+0x4ac>
    c4c4:	0000c7bc 	.word	0x0000c7bc
    c4c8:	0000c834 	.word	0x0000c834
    c4cc:	0000c3c4 	.word	0x0000c3c4
    c4d0:	0000c7f0 	.word	0x0000c7f0
    c4d4:	0000c7e0 	.word	0x0000c7e0
    c4d8:	0000c834 	.word	0x0000c834
    c4dc:	0000c834 	.word	0x0000c834
    c4e0:	0000c834 	.word	0x0000c834
    c4e4:	0000c834 	.word	0x0000c834
    c4e8:	0000c7c8 	.word	0x0000c7c8
    c4ec:	0000c834 	.word	0x0000c834
    c4f0:	0000c7ac 	.word	0x0000c7ac
    c4f4:	0000c79c 	.word	0x0000c79c
    c4f8:	0000c3e8 	.word	0x0000c3e8
    c4fc:	0000c3e8 	.word	0x0000c3e8
    c500:	0000c834 	.word	0x0000c834
    c504:	0000c834 	.word	0x0000c834
    c508:	0000c3e8 	.word	0x0000c3e8
    c50c:	e241303b 	sub	r3, r1, #59	; 0x3b
    c510:	e3530032 	cmp	r3, #50	; 0x32
    c514:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c518:	eaffffba 	b	c408 <CScreenDevice::Write(char)+0x80>
    c51c:	0000c790 	.word	0x0000c790
    c520:	0000c408 	.word	0x0000c408
    c524:	0000c408 	.word	0x0000c408
    c528:	0000c408 	.word	0x0000c408
    c52c:	0000c408 	.word	0x0000c408
    c530:	0000c408 	.word	0x0000c408
    c534:	0000c408 	.word	0x0000c408
    c538:	0000c408 	.word	0x0000c408
    c53c:	0000c408 	.word	0x0000c408
    c540:	0000c408 	.word	0x0000c408
    c544:	0000c408 	.word	0x0000c408
    c548:	0000c408 	.word	0x0000c408
    c54c:	0000c408 	.word	0x0000c408
    c550:	0000c408 	.word	0x0000c408
    c554:	0000c408 	.word	0x0000c408
    c558:	0000c408 	.word	0x0000c408
    c55c:	0000c408 	.word	0x0000c408
    c560:	0000c3e8 	.word	0x0000c3e8
    c564:	0000c3e8 	.word	0x0000c3e8
    c568:	0000c408 	.word	0x0000c408
    c56c:	0000c408 	.word	0x0000c408
    c570:	0000c3e8 	.word	0x0000c3e8
    c574:	0000c408 	.word	0x0000c408
    c578:	0000c408 	.word	0x0000c408
    c57c:	0000c408 	.word	0x0000c408
    c580:	0000c408 	.word	0x0000c408
    c584:	0000c408 	.word	0x0000c408
    c588:	0000c408 	.word	0x0000c408
    c58c:	0000c408 	.word	0x0000c408
    c590:	0000c6e0 	.word	0x0000c6e0
    c594:	0000c408 	.word	0x0000c408
    c598:	0000c408 	.word	0x0000c408
    c59c:	0000c408 	.word	0x0000c408
    c5a0:	0000c408 	.word	0x0000c408
    c5a4:	0000c408 	.word	0x0000c408
    c5a8:	0000c408 	.word	0x0000c408
    c5ac:	0000c408 	.word	0x0000c408
    c5b0:	0000c408 	.word	0x0000c408
    c5b4:	0000c408 	.word	0x0000c408
    c5b8:	0000c408 	.word	0x0000c408
    c5bc:	0000c408 	.word	0x0000c408
    c5c0:	0000c408 	.word	0x0000c408
    c5c4:	0000c408 	.word	0x0000c408
    c5c8:	0000c408 	.word	0x0000c408
    c5cc:	0000c408 	.word	0x0000c408
    c5d0:	0000c6f4 	.word	0x0000c6f4
    c5d4:	0000c408 	.word	0x0000c408
    c5d8:	0000c408 	.word	0x0000c408
    c5dc:	0000c408 	.word	0x0000c408
    c5e0:	0000c6f4 	.word	0x0000c6f4
    c5e4:	0000c710 	.word	0x0000c710
    c5e8:	e2411030 	sub	r1, r1, #48	; 0x30
    c5ec:	e6ef3071 	uxtb	r3, r1
    c5f0:	e3530009 	cmp	r3, #9
    c5f4:	8affff7b 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c5f8:	e3a03007 	mov	r3, #7
    c5fc:	e5801050 	str	r1, [r0, #80]	; 0x50
    c600:	e5803030 	str	r3, [r0, #48]	; 0x30
    c604:	eaffff79 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c608:	e2411030 	sub	r1, r1, #48	; 0x30
    c60c:	e6ef3071 	uxtb	r3, r1
    c610:	e3530009 	cmp	r3, #9
    c614:	8affff73 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c618:	e3a03006 	mov	r3, #6
    c61c:	e5801054 	str	r1, [r0, #84]	; 0x54
    c620:	e5803030 	str	r3, [r0, #48]	; 0x30
    c624:	eaffff71 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c628:	e3510048 	cmp	r1, #72	; 0x48
    c62c:	0a000091 	beq	c878 <CScreenDevice::Write(char)+0x4f0>
    c630:	e3510072 	cmp	r1, #114	; 0x72
    c634:	0a000012 	beq	c684 <CScreenDevice::Write(char)+0x2fc>
    c638:	e2413030 	sub	r3, r1, #48	; 0x30
    c63c:	e6ef3073 	uxtb	r3, r3
    c640:	e3530009 	cmp	r3, #9
    c644:	8affff67 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c648:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    c64c:	e0833103 	add	r3, r3, r3, lsl #2
    c650:	e0811083 	add	r1, r1, r3, lsl #1
    c654:	e2411030 	sub	r1, r1, #48	; 0x30
    c658:	e35100c7 	cmp	r1, #199	; 0xc7
    c65c:	e5801054 	str	r1, [r0, #84]	; 0x54
    c660:	8affff60 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c664:	eaffff61 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c668:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c66c:	e3530019 	cmp	r3, #25
    c670:	02411068 	subeq	r1, r1, #104	; 0x68
    c674:	016f1f11 	clzeq	r1, r1
    c678:	01a012a1 	lsreq	r1, r1, #5
    c67c:	05841044 	streq	r1, [r4, #68]	; 0x44
    c680:	eaffff58 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c684:	e5941050 	ldr	r1, [r4, #80]	; 0x50
    c688:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    c68c:	ebfffd8e 	bl	bccc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c690:	e3a03000 	mov	r3, #0
    c694:	e5843030 	str	r3, [r4, #48]	; 0x30
    c698:	eaffff54 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c69c:	e3a03001 	mov	r3, #1
    c6a0:	e5803030 	str	r3, [r0, #48]	; 0x30
    c6a4:	eaffff51 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c6a8:	e3a03000 	mov	r3, #0
    c6ac:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c6b0:	eaffff4e 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c6b4:	e3a03000 	mov	r3, #0
    c6b8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c6bc:	e28dd008 	add	sp, sp, #8
    c6c0:	e8bd4010 	pop	{r4, lr}
    c6c4:	eafffdf1 	b	be90 <CScreenDevice::CursorDown()>
    c6c8:	e28dd008 	add	sp, sp, #8
    c6cc:	e8bd4010 	pop	{r4, lr}
    c6d0:	eafffe13 	b	bf24 <CScreenDevice::Tabulator()>
    c6d4:	e28dd008 	add	sp, sp, #8
    c6d8:	e8bd4010 	pop	{r4, lr}
    c6dc:	eafffd33 	b	bbb0 <CScreenDevice::CursorLeft()>
    c6e0:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c6e4:	e3510000 	cmp	r1, #0
    c6e8:	0affff3e 	beq	c3e8 <CScreenDevice::Write(char)+0x60>
    c6ec:	ebffff09 	bl	c318 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    c6f0:	eaffff3c 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c6f4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c6f8:	e3530004 	cmp	r3, #4
    c6fc:	02411068 	subeq	r1, r1, #104	; 0x68
    c700:	016f1f11 	clzeq	r1, r1
    c704:	01a012a1 	lsreq	r1, r1, #5
    c708:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c70c:	eaffff35 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c710:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c714:	e353001b 	cmp	r3, #27
    c718:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c71c:	eaffff31 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c720:	0000c86c 	.word	0x0000c86c
    c724:	0000c860 	.word	0x0000c860
    c728:	0000c854 	.word	0x0000c854
    c72c:	0000c3e8 	.word	0x0000c3e8
    c730:	0000c3e8 	.word	0x0000c3e8
    c734:	0000c3e8 	.word	0x0000c3e8
    c738:	0000c3e8 	.word	0x0000c3e8
    c73c:	0000c3e8 	.word	0x0000c3e8
    c740:	0000c3e8 	.word	0x0000c3e8
    c744:	0000c3e8 	.word	0x0000c3e8
    c748:	0000c3e8 	.word	0x0000c3e8
    c74c:	0000c3e8 	.word	0x0000c3e8
    c750:	0000c3e8 	.word	0x0000c3e8
    c754:	0000c3e8 	.word	0x0000c3e8
    c758:	0000c3e8 	.word	0x0000c3e8
    c75c:	0000c3e8 	.word	0x0000c3e8
    c760:	0000c3e8 	.word	0x0000c3e8
    c764:	0000c3e8 	.word	0x0000c3e8
    c768:	0000c3e8 	.word	0x0000c3e8
    c76c:	0000c3e8 	.word	0x0000c3e8
    c770:	0000c3e8 	.word	0x0000c3e8
    c774:	0000c3e8 	.word	0x0000c3e8
    c778:	0000c3e8 	.word	0x0000c3e8
    c77c:	0000c3e8 	.word	0x0000c3e8
    c780:	0000c3e8 	.word	0x0000c3e8
    c784:	0000c3e8 	.word	0x0000c3e8
    c788:	0000c3e8 	.word	0x0000c3e8
    c78c:	0000c86c 	.word	0x0000c86c
    c790:	e3a03005 	mov	r3, #5
    c794:	e5803030 	str	r3, [r0, #48]	; 0x30
    c798:	eaffff14 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c79c:	ebfffe5c 	bl	c114 <CScreenDevice::ClearLineEnd()>
    c7a0:	e3a03000 	mov	r3, #0
    c7a4:	e5843030 	str	r3, [r4, #48]	; 0x30
    c7a8:	eaffff10 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c7ac:	ebfffe6a 	bl	c15c <CScreenDevice::ClearDisplayEnd()>
    c7b0:	e3a03000 	mov	r3, #0
    c7b4:	e5843030 	str	r3, [r4, #48]	; 0x30
    c7b8:	eaffff0c 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c7bc:	e3a03004 	mov	r3, #4
    c7c0:	e5803030 	str	r3, [r0, #48]	; 0x30
    c7c4:	eaffff09 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c7c8:	e3a03000 	mov	r3, #0
    c7cc:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c7d0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c7d4:	e5803030 	str	r3, [r0, #48]	; 0x30
    c7d8:	e5802040 	str	r2, [r0, #64]	; 0x40
    c7dc:	eaffff03 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c7e0:	ebfffdc0 	bl	bee8 <CScreenDevice::CursorRight()>
    c7e4:	e3a03000 	mov	r3, #0
    c7e8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c7ec:	eafffeff 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c7f0:	ebfffda6 	bl	be90 <CScreenDevice::CursorDown()>
    c7f4:	e3a03000 	mov	r3, #0
    c7f8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c7fc:	eafffefb 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c800:	e6ef3071 	uxtb	r3, r1
    c804:	e353001f 	cmp	r3, #31
    c808:	9afffef8 	bls	c3f0 <CScreenDevice::Write(char)+0x68>
    c80c:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c810:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c814:	e1d004b8 	ldrh	r0, [r0, #72]	; 0x48
    c818:	e58d0000 	str	r0, [sp]
    c81c:	e1a00004 	mov	r0, r4
    c820:	ebfffdd2 	bl	bf70 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c824:	e1a00004 	mov	r0, r4
    c828:	e28dd008 	add	sp, sp, #8
    c82c:	e8bd4010 	pop	{r4, lr}
    c830:	eafffdac 	b	bee8 <CScreenDevice::CursorRight()>
    c834:	e2411030 	sub	r1, r1, #48	; 0x30
    c838:	e6ef3071 	uxtb	r3, r1
    c83c:	e3530009 	cmp	r3, #9
    c840:	8afffee8 	bhi	c3e8 <CScreenDevice::Write(char)+0x60>
    c844:	e3a03003 	mov	r3, #3
    c848:	e5801050 	str	r1, [r0, #80]	; 0x50
    c84c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c850:	eafffee6 	b	c3f0 <CScreenDevice::Write(char)+0x68>
    c854:	e3a0301f 	mov	r3, #31
    c858:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c85c:	eafffee1 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c860:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c864:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c868:	eafffede 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c86c:	e3e03020 	mvn	r3, #32
    c870:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c874:	eafffedb 	b	c3e8 <CScreenDevice::Write(char)+0x60>
    c878:	e5941050 	ldr	r1, [r4, #80]	; 0x50
    c87c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    c880:	ebfffce5 	bl	bc1c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c884:	e3a03000 	mov	r3, #0
    c888:	e5843030 	str	r3, [r4, #48]	; 0x30
    c88c:	eafffed7 	b	c3f0 <CScreenDevice::Write(char)+0x68>

0000c890 <CScreenDevice::Write(void const*, unsigned int)>:
    c890:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    c894:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c898:	e1a05000 	mov	r5, r0
    c89c:	e3530000 	cmp	r3, #0
    c8a0:	e1a07001 	mov	r7, r1
    c8a4:	e1a04002 	mov	r4, r2
    c8a8:	1a000028 	bne	c950 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    c8ac:	e3a02001 	mov	r2, #1
    c8b0:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c8b4:	e5852058 	str	r2, [r5, #88]	; 0x58
    c8b8:	e3530000 	cmp	r3, #0
    c8bc:	1a00001c 	bne	c934 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    c8c0:	e3540000 	cmp	r4, #0
    c8c4:	e2446001 	sub	r6, r4, #1
    c8c8:	01a06004 	moveq	r6, r4
    c8cc:	0a00000b 	beq	c900 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    c8d0:	e1a04007 	mov	r4, r7
    c8d4:	e0d410d1 	ldrsb	r1, [r4], #1
    c8d8:	e1a00005 	mov	r0, r5
    c8dc:	ebfffea9 	bl	c388 <CScreenDevice::Write(char)>
    c8e0:	e2643001 	rsb	r3, r4, #1
    c8e4:	e0833006 	add	r3, r3, r6
    c8e8:	e1770003 	cmn	r7, r3
    c8ec:	1afffff8 	bne	c8d4 <CScreenDevice::Write(void const*, unsigned int)+0x44>
    c8f0:	e2866001 	add	r6, r6, #1
    c8f4:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c8f8:	e3530000 	cmp	r3, #0
    c8fc:	1a000009 	bne	c928 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    c900:	e3a02000 	mov	r2, #0
    c904:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    c908:	e5852058 	str	r2, [r5, #88]	; 0x58
    c90c:	e1530002 	cmp	r3, r2
    c910:	0a000000 	beq	c918 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    c914:	ebfff53f 	bl	9e18 <LeaveCritical>
    c918:	e3a03000 	mov	r3, #0
    c91c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c920:	e1a00006 	mov	r0, r6
    c924:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    c928:	e1a00005 	mov	r0, r5
    c92c:	ebfffbd1 	bl	b878 <CScreenDevice::InvertCursor() [clone .part.6]>
    c930:	eafffff2 	b	c900 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    c934:	e1a00005 	mov	r0, r5
    c938:	ebfffbce 	bl	b878 <CScreenDevice::InvertCursor() [clone .part.6]>
    c93c:	e3540000 	cmp	r4, #0
    c940:	e2446001 	sub	r6, r4, #1
    c944:	1affffe1 	bne	c8d0 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c948:	e1a06004 	mov	r6, r4
    c94c:	eaffffe8 	b	c8f4 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    c950:	ebfff521 	bl	9ddc <EnterCritical>
    c954:	eaffffd4 	b	c8ac <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000c958 <CScreenDevice::InvertCursor()>:
    c958:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c95c:	e3530000 	cmp	r3, #0
    c960:	012fff1e 	bxeq	lr
    c964:	eafffbc3 	b	b878 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c968 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c968:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c96c:	e15c0001 	cmp	ip, r1
    c970:	912fff1e 	bxls	lr
    c974:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    c978:	e15c0002 	cmp	ip, r2
    c97c:	8590c020 	ldrhi	ip, [r0, #32]
    c980:	85900004 	ldrhi	r0, [r0, #4]
    c984:	8022129c 	mlahi	r2, ip, r2, r1
    c988:	81a02082 	lslhi	r2, r2, #1
    c98c:	818030b2 	strhhi	r3, [r0, r2]
    c990:	e12fff1e 	bx	lr

0000c994 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c994:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c998:	e1530001 	cmp	r3, r1
    c99c:	9a000008 	bls	c9c4 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c9a0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c9a4:	e1530002 	cmp	r3, r2
    c9a8:	9a000005 	bls	c9c4 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c9ac:	e590c020 	ldr	ip, [r0, #32]
    c9b0:	e5903004 	ldr	r3, [r0, #4]
    c9b4:	e022129c 	mla	r2, ip, r2, r1
    c9b8:	e1a02082 	lsl	r2, r2, #1
    c9bc:	e19300b2 	ldrh	r0, [r3, r2]
    c9c0:	e12fff1e 	bx	lr
    c9c4:	e3a00000 	mov	r0, #0
    c9c8:	e12fff1e 	bx	lr

0000c9cc <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c9cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c9d0:	e1a05000 	mov	r5, r0
    c9d4:	e24dd00c 	sub	sp, sp, #12
    c9d8:	e1a04001 	mov	r4, r1
    c9dc:	e2800018 	add	r0, r0, #24
    c9e0:	e1a06002 	mov	r6, r2
    c9e4:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c9e8:	eb000056 	bl	cb48 <CCharGenerator::GetCharWidth() const>
    c9ec:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    c9f0:	e2044003 	and	r4, r4, #3
    c9f4:	e0200094 	mla	r0, r4, r0, r0
    c9f8:	e59f3024 	ldr	r3, [pc, #36]	; ca24 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    c9fc:	e2066003 	and	r6, r6, #3
    ca00:	e0833006 	add	r3, r3, r6
    ca04:	e1d311dc 	ldrsb	r1, [r3, #28]
    ca08:	e0602007 	rsb	r2, r0, r7
    ca0c:	e58dc000 	str	ip, [sp]
    ca10:	e1a00005 	mov	r0, r5
    ca14:	e3a03000 	mov	r3, #0
    ca18:	ebfffd54 	bl	bf70 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ca1c:	e28dd00c 	add	sp, sp, #12
    ca20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ca24:	00010670 	.word	0x00010670

0000ca28 <CScreenDeviceExt::~CScreenDeviceExt()>:
    ca28:	e92d4010 	push	{r4, lr}
    ca2c:	e1a04000 	mov	r4, r0
    ca30:	e59f300c 	ldr	r3, [pc, #12]	; ca44 <CScreenDeviceExt::~CScreenDeviceExt()+0x1c>
    ca34:	e5803000 	str	r3, [r0]
    ca38:	ebfffb6a 	bl	b7e8 <CScreenDevice::~CScreenDevice()>
    ca3c:	e1a00004 	mov	r0, r4
    ca40:	e8bd8010 	pop	{r4, pc}
    ca44:	000106a0 	.word	0x000106a0

0000ca48 <CScreenDeviceExt::~CScreenDeviceExt()>:
    ca48:	e92d4010 	push	{r4, lr}
    ca4c:	e1a04000 	mov	r4, r0
    ca50:	e59f3014 	ldr	r3, [pc, #20]	; ca6c <CScreenDeviceExt::~CScreenDeviceExt()+0x24>
    ca54:	e5803000 	str	r3, [r0]
    ca58:	ebfffb62 	bl	b7e8 <CScreenDevice::~CScreenDevice()>
    ca5c:	e1a00004 	mov	r0, r4
    ca60:	ebfff4db 	bl	9dd4 <operator delete(void*)>
    ca64:	e1a00004 	mov	r0, r4
    ca68:	e8bd8010 	pop	{r4, pc}
    ca6c:	000106a0 	.word	0x000106a0

0000ca70 <CScreenDeviceExt::CScreenDeviceExt(unsigned int, unsigned int, int)>:
    ca70:	e92d4010 	push	{r4, lr}
    ca74:	e1a04000 	mov	r4, r0
    ca78:	ebfffbab 	bl	b92c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    ca7c:	e59f3008 	ldr	r3, [pc, #8]	; ca8c <CScreenDeviceExt::CScreenDeviceExt(unsigned int, unsigned int, int)+0x1c>
    ca80:	e1a00004 	mov	r0, r4
    ca84:	e5843000 	str	r3, [r4]
    ca88:	e8bd8010 	pop	{r4, pc}
    ca8c:	000106a0 	.word	0x000106a0

0000ca90 <CScreenDeviceExt::DrawLine(int, int, int, int, unsigned short)>:
    ca90:	e59d0000 	ldr	r0, [sp]
    ca94:	e0611003 	rsb	r1, r1, r3
    ca98:	e0622000 	rsb	r2, r2, r0
    ca9c:	e0020292 	mul	r2, r2, r2
    caa0:	e0232191 	mla	r3, r1, r1, r2
    caa4:	ee003a10 	vmov	s0, r3
    caa8:	eeb80ac0 	vcvt.f32.s32	s0, s0
    caac:	eafff96f 	b	b070 <sqrt3>

0000cab0 <assertion_failed>:
    cab0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cab4:	e1a05000 	mov	r5, r0
    cab8:	e24dd01c 	sub	sp, sp, #28
    cabc:	e1a07001 	mov	r7, r1
    cac0:	e1a06002 	mov	r6, r2
    cac4:	e1a0400d 	mov	r4, sp
    cac8:	e28d0008 	add	r0, sp, #8
    cacc:	eb00029f 	bl	d550 <CString::CString()>
    cad0:	e1a02007 	mov	r2, r7
    cad4:	e1a03006 	mov	r3, r6
    cad8:	e28d0008 	add	r0, sp, #8
    cadc:	e59f104c 	ldr	r1, [pc, #76]	; cb30 <assertion_failed+0x80>
    cae0:	eb00050a 	bl	df10 <CString::Format(char const*, ...)>
    cae4:	e28d0008 	add	r0, sp, #8
    cae8:	eb0002ae 	bl	d5a8 <CString::operator char const*() const>
    caec:	e1a01000 	mov	r1, r0
    caf0:	e1a00004 	mov	r0, r4
    caf4:	eb00007b 	bl	cce8 <debug_stacktrace(unsigned int const*, char const*)>
    caf8:	eb000164 	bl	d090 <CLogger::Get()>
    cafc:	e1a04000 	mov	r4, r0
    cb00:	e28d0008 	add	r0, sp, #8
    cb04:	eb0002a7 	bl	d5a8 <CString::operator char const*() const>
    cb08:	e3a02000 	mov	r2, #0
    cb0c:	e1a01000 	mov	r1, r0
    cb10:	e59f301c 	ldr	r3, [pc, #28]	; cb34 <assertion_failed+0x84>
    cb14:	e1a00004 	mov	r0, r4
    cb18:	e58d5000 	str	r5, [sp]
    cb1c:	eb00023a 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cb20:	e28d0008 	add	r0, sp, #8
    cb24:	eb000255 	bl	d480 <CString::~CString()>
    cb28:	e28dd01c 	add	sp, sp, #28
    cb2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cb30:	000106b8 	.word	0x000106b8
    cb34:	000106c0 	.word	0x000106c0

0000cb38 <CCharGenerator::CCharGenerator()>:
    cb38:	e3a03008 	mov	r3, #8
    cb3c:	e5803000 	str	r3, [r0]
    cb40:	e12fff1e 	bx	lr

0000cb44 <CCharGenerator::~CCharGenerator()>:
    cb44:	e12fff1e 	bx	lr

0000cb48 <CCharGenerator::GetCharWidth() const>:
    cb48:	e5900000 	ldr	r0, [r0]
    cb4c:	e12fff1e 	bx	lr

0000cb50 <CCharGenerator::GetCharHeight() const>:
    cb50:	e3a00013 	mov	r0, #19
    cb54:	e12fff1e 	bx	lr

0000cb58 <CCharGenerator::GetUnderline() const>:
    cb58:	e3a00010 	mov	r0, #16
    cb5c:	e12fff1e 	bx	lr

0000cb60 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    cb60:	e6ef1071 	uxtb	r1, r1
    cb64:	e92d4070 	push	{r4, r5, r6, lr}
    cb68:	e2414021 	sub	r4, r1, #33	; 0x21
    cb6c:	e35400de 	cmp	r4, #222	; 0xde
    cb70:	8a00000e 	bhi	cbb0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
    cb74:	e1a05003 	mov	r5, r3
    cb78:	e5903000 	ldr	r3, [r0]
    cb7c:	e1a06002 	mov	r6, r2
    cb80:	e1530002 	cmp	r3, r2
    cb84:	9a00000b 	bls	cbb8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
    cb88:	e355000f 	cmp	r5, #15
    cb8c:	8a000007 	bhi	cbb0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
    cb90:	e3a02080 	mov	r2, #128	; 0x80
    cb94:	e59f1038 	ldr	r1, [pc, #56]	; cbd4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
    cb98:	e0853204 	add	r3, r5, r4, lsl #4
    cb9c:	e7d13003 	ldrb	r3, [r1, r3]
    cba0:	e0133652 	ands	r3, r3, r2, asr r6
    cba4:	13a00001 	movne	r0, #1
    cba8:	03a00000 	moveq	r0, #0
    cbac:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbb0:	e3a00000 	mov	r0, #0
    cbb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbb8:	e59f0018 	ldr	r0, [pc, #24]	; cbd8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
    cbbc:	e59f1018 	ldr	r1, [pc, #24]	; cbdc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
    cbc0:	e3a0204e 	mov	r2, #78	; 0x4e
    cbc4:	ebffffb9 	bl	cab0 <assertion_failed>
    cbc8:	e355000f 	cmp	r5, #15
    cbcc:	9affffef 	bls	cb90 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    cbd0:	eafffff6 	b	cbb0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
    cbd4:	000106d8 	.word	0x000106d8
    cbd8:	000114c8 	.word	0x000114c8
    cbdc:	000114e0 	.word	0x000114e0

0000cbe0 <debug_hexdump(void const*, unsigned int, char const*)>:
    cbe0:	e3520000 	cmp	r2, #0
    cbe4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbe8:	e1a05001 	mov	r5, r1
    cbec:	e59f90e8 	ldr	r9, [pc, #232]	; ccdc <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    cbf0:	e1a04000 	mov	r4, r0
    cbf4:	11a09002 	movne	r9, r2
    cbf8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    cbfc:	eb000123 	bl	d090 <CLogger::Get()>
    cc00:	e58d5000 	str	r5, [sp]
    cc04:	e58d4004 	str	r4, [sp, #4]
    cc08:	e1a01009 	mov	r1, r9
    cc0c:	e3a02004 	mov	r2, #4
    cc10:	e59f30c8 	ldr	r3, [pc, #200]	; cce0 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    cc14:	eb0001fc 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cc18:	e3550000 	cmp	r5, #0
    cc1c:	0a000029 	beq	ccc8 <debug_hexdump(void const*, unsigned int, char const*)+0xe8>
    cc20:	eb00011a 	bl	d090 <CLogger::Get()>
    cc24:	e5d4b000 	ldrb	fp, [r4]
    cc28:	e5d4a001 	ldrb	sl, [r4, #1]
    cc2c:	e5d48002 	ldrb	r8, [r4, #2]
    cc30:	e5d47003 	ldrb	r7, [r4, #3]
    cc34:	e5d46004 	ldrb	r6, [r4, #4]
    cc38:	e5d4e005 	ldrb	lr, [r4, #5]
    cc3c:	e5d4c006 	ldrb	ip, [r4, #6]
    cc40:	e5d41007 	ldrb	r1, [r4, #7]
    cc44:	e5d42008 	ldrb	r2, [r4, #8]
    cc48:	e5d43009 	ldrb	r3, [r4, #9]
    cc4c:	e58db004 	str	fp, [sp, #4]
    cc50:	e5d4b00a 	ldrb	fp, [r4, #10]
    cc54:	e58da008 	str	sl, [sp, #8]
    cc58:	e5d4a00b 	ldrb	sl, [r4, #11]
    cc5c:	e58d800c 	str	r8, [sp, #12]
    cc60:	e5d4800c 	ldrb	r8, [r4, #12]
    cc64:	e58d7010 	str	r7, [sp, #16]
    cc68:	e5d4700d 	ldrb	r7, [r4, #13]
    cc6c:	e58d6014 	str	r6, [sp, #20]
    cc70:	e5d4600e 	ldrb	r6, [r4, #14]
    cc74:	e58de018 	str	lr, [sp, #24]
    cc78:	e5d4e00f 	ldrb	lr, [r4, #15]
    cc7c:	e58dc01c 	str	ip, [sp, #28]
    cc80:	e58d1020 	str	r1, [sp, #32]
    cc84:	e6ffc074 	uxth	ip, r4
    cc88:	e58d2024 	str	r2, [sp, #36]	; 0x24
    cc8c:	e58d3028 	str	r3, [sp, #40]	; 0x28
    cc90:	e1a01009 	mov	r1, r9
    cc94:	e3a02004 	mov	r2, #4
    cc98:	e59f3044 	ldr	r3, [pc, #68]	; cce4 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    cc9c:	e58db02c 	str	fp, [sp, #44]	; 0x2c
    cca0:	e58da030 	str	sl, [sp, #48]	; 0x30
    cca4:	e58d8034 	str	r8, [sp, #52]	; 0x34
    cca8:	e58d7038 	str	r7, [sp, #56]	; 0x38
    ccac:	e58d603c 	str	r6, [sp, #60]	; 0x3c
    ccb0:	e58de040 	str	lr, [sp, #64]	; 0x40
    ccb4:	e58dc000 	str	ip, [sp]
    ccb8:	eb0001d3 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ccbc:	e355000f 	cmp	r5, #15
    ccc0:	e2844010 	add	r4, r4, #16
    ccc4:	8a000001 	bhi	ccd0 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    ccc8:	e28dd04c 	add	sp, sp, #76	; 0x4c
    cccc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccd0:	e2555010 	subs	r5, r5, #16
    ccd4:	1affffd1 	bne	cc20 <debug_hexdump(void const*, unsigned int, char const*)+0x40>
    ccd8:	eafffffa 	b	ccc8 <debug_hexdump(void const*, unsigned int, char const*)+0xe8>
    ccdc:	000114f4 	.word	0x000114f4
    cce0:	000114fc 	.word	0x000114fc
    cce4:	00011520 	.word	0x00011520

0000cce8 <debug_stacktrace(unsigned int const*, char const*)>:
    cce8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ccec:	e3a04000 	mov	r4, #0
    ccf0:	e1510004 	cmp	r1, r4
    ccf4:	e59f8068 	ldr	r8, [pc, #104]	; cd64 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
    ccf8:	e24dd008 	sub	sp, sp, #8
    ccfc:	11a08001 	movne	r8, r1
    cd00:	e59f6060 	ldr	r6, [pc, #96]	; cd68 <debug_stacktrace(unsigned int const*, char const*)+0x80>
    cd04:	e59f7060 	ldr	r7, [pc, #96]	; cd6c <debug_stacktrace(unsigned int const*, char const*)+0x84>
    cd08:	e2405004 	sub	r5, r0, #4
    cd0c:	ea000002 	b	cd1c <debug_stacktrace(unsigned int const*, char const*)+0x34>
    cd10:	e2844001 	add	r4, r4, #1
    cd14:	e3540040 	cmp	r4, #64	; 0x40
    cd18:	0a00000f 	beq	cd5c <debug_stacktrace(unsigned int const*, char const*)+0x74>
    cd1c:	e5b53004 	ldr	r3, [r5, #4]!
    cd20:	e1530006 	cmp	r3, r6
    cd24:	9afffff9 	bls	cd10 <debug_stacktrace(unsigned int const*, char const*)+0x28>
    cd28:	e1530007 	cmp	r3, r7
    cd2c:	2afffff7 	bcs	cd10 <debug_stacktrace(unsigned int const*, char const*)+0x28>
    cd30:	eb0000d6 	bl	d090 <CLogger::Get()>
    cd34:	e58d4000 	str	r4, [sp]
    cd38:	e5953000 	ldr	r3, [r5]
    cd3c:	e1a01008 	mov	r1, r8
    cd40:	e58d3004 	str	r3, [sp, #4]
    cd44:	e3a02004 	mov	r2, #4
    cd48:	e59f3020 	ldr	r3, [pc, #32]	; cd70 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    cd4c:	e2844001 	add	r4, r4, #1
    cd50:	eb0001ad 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cd54:	e3540040 	cmp	r4, #64	; 0x40
    cd58:	1affffef 	bne	cd1c <debug_stacktrace(unsigned int const*, char const*)+0x34>
    cd5c:	e28dd008 	add	sp, sp, #8
    cd60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd64:	000114f4 	.word	0x000114f4
    cd68:	00007fff 	.word	0x00007fff
    cd6c:	0000ffc4 	.word	0x0000ffc4
    cd70:	00011578 	.word	0x00011578

0000cd74 <CDeviceNameService::CDeviceNameService()>:
    cd74:	e92d4038 	push	{r3, r4, r5, lr}
    cd78:	e3a03000 	mov	r3, #0
    cd7c:	e59f5030 	ldr	r5, [pc, #48]	; cdb4 <CDeviceNameService::CDeviceNameService()+0x40>
    cd80:	e1a04000 	mov	r4, r0
    cd84:	e5952000 	ldr	r2, [r5]
    cd88:	e5803000 	str	r3, [r0]
    cd8c:	e1520003 	cmp	r2, r3
    cd90:	e5803004 	str	r3, [r0, #4]
    cd94:	0a000003 	beq	cda8 <CDeviceNameService::CDeviceNameService()+0x34>
    cd98:	e59f0018 	ldr	r0, [pc, #24]	; cdb8 <CDeviceNameService::CDeviceNameService()+0x44>
    cd9c:	e59f1018 	ldr	r1, [pc, #24]	; cdbc <CDeviceNameService::CDeviceNameService()+0x48>
    cda0:	e3a0201e 	mov	r2, #30
    cda4:	ebffff41 	bl	cab0 <assertion_failed>
    cda8:	e5854000 	str	r4, [r5]
    cdac:	e1a00004 	mov	r0, r4
    cdb0:	e8bd8038 	pop	{r3, r4, r5, pc}
    cdb4:	0005100c 	.word	0x0005100c
    cdb8:	0001158c 	.word	0x0001158c
    cdbc:	00011598 	.word	0x00011598

0000cdc0 <CDeviceNameService::~CDeviceNameService()>:
    cdc0:	e5903000 	ldr	r3, [r0]
    cdc4:	e92d4070 	push	{r4, r5, r6, lr}
    cdc8:	e3530000 	cmp	r3, #0
    cdcc:	e1a05000 	mov	r5, r0
    cdd0:	0a00000c 	beq	ce08 <CDeviceNameService::~CDeviceNameService()+0x48>
    cdd4:	e3a06000 	mov	r6, #0
    cdd8:	e5930004 	ldr	r0, [r3, #4]
    cddc:	e5934000 	ldr	r4, [r3]
    cde0:	e3500000 	cmp	r0, #0
    cde4:	0a000000 	beq	cdec <CDeviceNameService::~CDeviceNameService()+0x2c>
    cde8:	ebfff3fa 	bl	9dd8 <operator delete[](void*)>
    cdec:	e5950000 	ldr	r0, [r5]
    cdf0:	e5806004 	str	r6, [r0, #4]
    cdf4:	e5806008 	str	r6, [r0, #8]
    cdf8:	ebfff3f5 	bl	9dd4 <operator delete(void*)>
    cdfc:	e2543000 	subs	r3, r4, #0
    ce00:	e5854000 	str	r4, [r5]
    ce04:	1afffff3 	bne	cdd8 <CDeviceNameService::~CDeviceNameService()+0x18>
    ce08:	e3a02000 	mov	r2, #0
    ce0c:	e59f3008 	ldr	r3, [pc, #8]	; ce1c <CDeviceNameService::~CDeviceNameService()+0x5c>
    ce10:	e1a00005 	mov	r0, r5
    ce14:	e5832000 	str	r2, [r3]
    ce18:	e8bd8070 	pop	{r4, r5, r6, pc}
    ce1c:	0005100c 	.word	0x0005100c

0000ce20 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    ce20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce24:	e1a05000 	mov	r5, r0
    ce28:	e5900004 	ldr	r0, [r0, #4]
    ce2c:	e1a06001 	mov	r6, r1
    ce30:	e3500000 	cmp	r0, #0
    ce34:	e1a07002 	mov	r7, r2
    ce38:	e1a08003 	mov	r8, r3
    ce3c:	1a000016 	bne	ce9c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x7c>
    ce40:	e3a00010 	mov	r0, #16
    ce44:	ebfff3e0 	bl	9dcc <operator new(unsigned int)>
    ce48:	e3560000 	cmp	r6, #0
    ce4c:	e1a04000 	mov	r4, r0
    ce50:	0a000018 	beq	ceb8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x98>
    ce54:	e1a00006 	mov	r0, r6
    ce58:	ebfff76d 	bl	ac14 <strlen>
    ce5c:	e2800001 	add	r0, r0, #1
    ce60:	ebfff3da 	bl	9dd0 <operator new[](unsigned int)>
    ce64:	e1a01006 	mov	r1, r6
    ce68:	e5840004 	str	r0, [r4, #4]
    ce6c:	ebfff796 	bl	accc <strcpy>
    ce70:	e3570000 	cmp	r7, #0
    ce74:	0a00000a 	beq	cea4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x84>
    ce78:	e895000c 	ldm	r5, {r2, r3}
    ce7c:	e3530000 	cmp	r3, #0
    ce80:	e5847008 	str	r7, [r4, #8]
    ce84:	e584800c 	str	r8, [r4, #12]
    ce88:	e5842000 	str	r2, [r4]
    ce8c:	e5854000 	str	r4, [r5]
    ce90:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ce94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ce98:	eafff3de 	b	9e18 <LeaveCritical>
    ce9c:	ebfff3ce 	bl	9ddc <EnterCritical>
    cea0:	eaffffe6 	b	ce40 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    cea4:	e59f0020 	ldr	r0, [pc, #32]	; cecc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xac>
    cea8:	e59f1020 	ldr	r1, [pc, #32]	; ced0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xb0>
    ceac:	e3a0203f 	mov	r2, #63	; 0x3f
    ceb0:	ebfffefe 	bl	cab0 <assertion_failed>
    ceb4:	eaffffef 	b	ce78 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    ceb8:	e59f0014 	ldr	r0, [pc, #20]	; ced4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xb4>
    cebc:	e59f100c 	ldr	r1, [pc, #12]	; ced0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xb0>
    cec0:	e3a0203a 	mov	r2, #58	; 0x3a
    cec4:	ebfffef9 	bl	cab0 <assertion_failed>
    cec8:	eaffffe1 	b	ce54 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>
    cecc:	000115bc 	.word	0x000115bc
    ced0:	00011598 	.word	0x00011598
    ced4:	000115b0 	.word	0x000115b0

0000ced8 <CDeviceNameService::GetDevice(char const*, int)>:
    ced8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    cedc:	e2515000 	subs	r5, r1, #0
    cee0:	e1a07000 	mov	r7, r0
    cee4:	e1a06002 	mov	r6, r2
    cee8:	0a00002d 	beq	cfa4 <CDeviceNameService::GetDevice(char const*, int)+0xcc>
    ceec:	e5973004 	ldr	r3, [r7, #4]
    cef0:	e3530000 	cmp	r3, #0
    cef4:	1a000016 	bne	cf54 <CDeviceNameService::GetDevice(char const*, int)+0x7c>
    cef8:	e5974000 	ldr	r4, [r7]
    cefc:	e3540000 	cmp	r4, #0
    cf00:	1a00000a 	bne	cf30 <CDeviceNameService::GetDevice(char const*, int)+0x58>
    cf04:	ea00001a 	b	cf74 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    cf08:	e1a00005 	mov	r0, r5
    cf0c:	ebfff74a 	bl	ac3c <strcmp>
    cf10:	e3500000 	cmp	r0, #0
    cf14:	1a000002 	bne	cf24 <CDeviceNameService::GetDevice(char const*, int)+0x4c>
    cf18:	e594300c 	ldr	r3, [r4, #12]
    cf1c:	e1530006 	cmp	r3, r6
    cf20:	0a000015 	beq	cf7c <CDeviceNameService::GetDevice(char const*, int)+0xa4>
    cf24:	e5944000 	ldr	r4, [r4]
    cf28:	e3540000 	cmp	r4, #0
    cf2c:	0a00000c 	beq	cf64 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    cf30:	e5941004 	ldr	r1, [r4, #4]
    cf34:	e3510000 	cmp	r1, #0
    cf38:	1afffff2 	bne	cf08 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    cf3c:	e59f108c 	ldr	r1, [pc, #140]	; cfd0 <CDeviceNameService::GetDevice(char const*, int)+0xf8>
    cf40:	e59f008c 	ldr	r0, [pc, #140]	; cfd4 <CDeviceNameService::GetDevice(char const*, int)+0xfc>
    cf44:	e3a02053 	mov	r2, #83	; 0x53
    cf48:	ebfffed8 	bl	cab0 <assertion_failed>
    cf4c:	e5941004 	ldr	r1, [r4, #4]
    cf50:	eaffffec 	b	cf08 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    cf54:	ebfff3a0 	bl	9ddc <EnterCritical>
    cf58:	e5974000 	ldr	r4, [r7]
    cf5c:	e3540000 	cmp	r4, #0
    cf60:	1afffff2 	bne	cf30 <CDeviceNameService::GetDevice(char const*, int)+0x58>
    cf64:	e5973004 	ldr	r3, [r7, #4]
    cf68:	e3530000 	cmp	r3, #0
    cf6c:	0a000000 	beq	cf74 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    cf70:	ebfff3a8 	bl	9e18 <LeaveCritical>
    cf74:	e3a00000 	mov	r0, #0
    cf78:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cf7c:	e5973004 	ldr	r3, [r7, #4]
    cf80:	e5944008 	ldr	r4, [r4, #8]
    cf84:	e3530000 	cmp	r3, #0
    cf88:	1a000003 	bne	cf9c <CDeviceNameService::GetDevice(char const*, int)+0xc4>
    cf8c:	e3540000 	cmp	r4, #0
    cf90:	0a000008 	beq	cfb8 <CDeviceNameService::GetDevice(char const*, int)+0xe0>
    cf94:	e1a00004 	mov	r0, r4
    cf98:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cf9c:	ebfff39d 	bl	9e18 <LeaveCritical>
    cfa0:	eafffff9 	b	cf8c <CDeviceNameService::GetDevice(char const*, int)+0xb4>
    cfa4:	e59f002c 	ldr	r0, [pc, #44]	; cfd8 <CDeviceNameService::GetDevice(char const*, int)+0x100>
    cfa8:	e59f1020 	ldr	r1, [pc, #32]	; cfd0 <CDeviceNameService::GetDevice(char const*, int)+0xf8>
    cfac:	e3a0204c 	mov	r2, #76	; 0x4c
    cfb0:	ebfffebe 	bl	cab0 <assertion_failed>
    cfb4:	eaffffcc 	b	ceec <CDeviceNameService::GetDevice(char const*, int)+0x14>
    cfb8:	e59f001c 	ldr	r0, [pc, #28]	; cfdc <CDeviceNameService::GetDevice(char const*, int)+0x104>
    cfbc:	e59f100c 	ldr	r1, [pc, #12]	; cfd0 <CDeviceNameService::GetDevice(char const*, int)+0xf8>
    cfc0:	e3a0205b 	mov	r2, #91	; 0x5b
    cfc4:	ebfffeb9 	bl	cab0 <assertion_failed>
    cfc8:	e1a00004 	mov	r0, r4
    cfcc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cfd0:	00011598 	.word	0x00011598
    cfd4:	000115cc 	.word	0x000115cc
    cfd8:	000115b0 	.word	0x000115b0
    cfdc:	000115e0 	.word	0x000115e0

0000cfe0 <CDeviceNameService::Get()>:
    cfe0:	e92d4010 	push	{r4, lr}
    cfe4:	e59f4020 	ldr	r4, [pc, #32]	; d00c <CDeviceNameService::Get()+0x2c>
    cfe8:	e5940000 	ldr	r0, [r4]
    cfec:	e3500000 	cmp	r0, #0
    cff0:	18bd8010 	popne	{r4, pc}
    cff4:	e59f0014 	ldr	r0, [pc, #20]	; d010 <CDeviceNameService::Get()+0x30>
    cff8:	e59f1014 	ldr	r1, [pc, #20]	; d014 <CDeviceNameService::Get()+0x34>
    cffc:	e3a02069 	mov	r2, #105	; 0x69
    d000:	ebfffeaa 	bl	cab0 <assertion_failed>
    d004:	e5940000 	ldr	r0, [r4]
    d008:	e8bd8010 	pop	{r4, pc}
    d00c:	0005100c 	.word	0x0005100c
    d010:	000115f0 	.word	0x000115f0
    d014:	00011598 	.word	0x00011598

0000d018 <CLogger::CLogger(unsigned int, CTimer*)>:
    d018:	e92d4010 	push	{r4, lr}
    d01c:	e3a03000 	mov	r3, #0
    d020:	e1a04000 	mov	r4, r0
    d024:	e3a00001 	mov	r0, #1
    d028:	e5843008 	str	r3, [r4, #8]
    d02c:	e5840018 	str	r0, [r4, #24]
    d030:	e584300c 	str	r3, [r4, #12]
    d034:	e5843010 	str	r3, [r4, #16]
    d038:	e5843014 	str	r3, [r4, #20]
    d03c:	e8840006 	stm	r4, {r1, r2}
    d040:	e3a00901 	mov	r0, #16384	; 0x4000
    d044:	ebfff361 	bl	9dd0 <operator new[](unsigned int)>
    d048:	e59f300c 	ldr	r3, [pc, #12]	; d05c <CLogger::CLogger(unsigned int, CTimer*)+0x44>
    d04c:	e584000c 	str	r0, [r4, #12]
    d050:	e5834000 	str	r4, [r3]
    d054:	e1a00004 	mov	r0, r4
    d058:	e8bd8010 	pop	{r4, pc}
    d05c:	00051010 	.word	0x00051010

0000d060 <CLogger::~CLogger()>:
    d060:	e3a02000 	mov	r2, #0
    d064:	e92d4010 	push	{r4, lr}
    d068:	e1a04000 	mov	r4, r0
    d06c:	e590000c 	ldr	r0, [r0, #12]
    d070:	e59f3014 	ldr	r3, [pc, #20]	; d08c <CLogger::~CLogger()+0x2c>
    d074:	e1500002 	cmp	r0, r2
    d078:	e5832000 	str	r2, [r3]
    d07c:	0a000000 	beq	d084 <CLogger::~CLogger()+0x24>
    d080:	ebfff354 	bl	9dd8 <operator delete[](void*)>
    d084:	e1a00004 	mov	r0, r4
    d088:	e8bd8010 	pop	{r4, pc}
    d08c:	00051010 	.word	0x00051010

0000d090 <CLogger::Get()>:
    d090:	e59f3004 	ldr	r3, [pc, #4]	; d09c <CLogger::Get()+0xc>
    d094:	e5930000 	ldr	r0, [r3]
    d098:	e12fff1e 	bx	lr
    d09c:	00051010 	.word	0x00051010

0000d0a0 <CLogger::Write(char const*)>:
    d0a0:	e92d4070 	push	{r4, r5, r6, lr}
    d0a4:	e1a04000 	mov	r4, r0
    d0a8:	e1a00001 	mov	r0, r1
    d0ac:	e1a05001 	mov	r5, r1
    d0b0:	ebfff6d7 	bl	ac14 <strlen>
    d0b4:	e1a06000 	mov	r6, r0
    d0b8:	e5940008 	ldr	r0, [r4, #8]
    d0bc:	e1a01005 	mov	r1, r5
    d0c0:	e5903000 	ldr	r3, [r0]
    d0c4:	e1a02006 	mov	r2, r6
    d0c8:	e593300c 	ldr	r3, [r3, #12]
    d0cc:	e12fff33 	blx	r3
    d0d0:	e5943018 	ldr	r3, [r4, #24]
    d0d4:	e3530000 	cmp	r3, #0
    d0d8:	1a000019 	bne	d144 <CLogger::Write(char const*)+0xa4>
    d0dc:	e0850006 	add	r0, r5, r6
    d0e0:	e1550000 	cmp	r5, r0
    d0e4:	0a000011 	beq	d130 <CLogger::Write(char const*)+0x90>
    d0e8:	e4d53001 	ldrb	r3, [r5], #1
    d0ec:	e353000d 	cmp	r3, #13
    d0f0:	0afffffa 	beq	d0e0 <CLogger::Write(char const*)+0x40>
    d0f4:	e5941010 	ldr	r1, [r4, #16]
    d0f8:	e594c00c 	ldr	ip, [r4, #12]
    d0fc:	e7cc3001 	strb	r3, [ip, r1]
    d100:	e5943010 	ldr	r3, [r4, #16]
    d104:	e5941014 	ldr	r1, [r4, #20]
    d108:	e2833001 	add	r3, r3, #1
    d10c:	e1a03903 	lsl	r3, r3, #18
    d110:	e1a03923 	lsr	r3, r3, #18
    d114:	e1530001 	cmp	r3, r1
    d118:	e5843010 	str	r3, [r4, #16]
    d11c:	1affffef 	bne	d0e0 <CLogger::Write(char const*)+0x40>
    d120:	e2433001 	sub	r3, r3, #1
    d124:	e1a03903 	lsl	r3, r3, #18
    d128:	e1a03923 	lsr	r3, r3, #18
    d12c:	e5843010 	str	r3, [r4, #16]
    d130:	e5943018 	ldr	r3, [r4, #24]
    d134:	e3530000 	cmp	r3, #0
    d138:	08bd8070 	popeq	{r4, r5, r6, pc}
    d13c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d140:	eafff334 	b	9e18 <LeaveCritical>
    d144:	ebfff324 	bl	9ddc <EnterCritical>
    d148:	eaffffe3 	b	d0dc <CLogger::Write(char const*)+0x3c>

0000d14c <CLogger::Read(void*, unsigned int)>:
    d14c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    d150:	e5903018 	ldr	r3, [r0, #24]
    d154:	e1a04000 	mov	r4, r0
    d158:	e3530000 	cmp	r3, #0
    d15c:	e1a05001 	mov	r5, r1
    d160:	e1a06002 	mov	r6, r2
    d164:	1a000019 	bne	d1d0 <CLogger::Read(void*, unsigned int)+0x84>
    d168:	e5902010 	ldr	r2, [r0, #16]
    d16c:	e5903014 	ldr	r3, [r0, #20]
    d170:	e1520003 	cmp	r2, r3
    d174:	0a00001e 	beq	d1f4 <CLogger::Read(void*, unsigned int)+0xa8>
    d178:	e1a07006 	mov	r7, r6
    d17c:	e3a0c000 	mov	ip, #0
    d180:	ea00000b 	b	d1b4 <CLogger::Read(void*, unsigned int)+0x68>
    d184:	e594100c 	ldr	r1, [r4, #12]
    d188:	e28cc001 	add	ip, ip, #1
    d18c:	e7d13003 	ldrb	r3, [r1, r3]
    d190:	e4c53001 	strb	r3, [r5], #1
    d194:	e5943014 	ldr	r3, [r4, #20]
    d198:	e5941010 	ldr	r1, [r4, #16]
    d19c:	e2833001 	add	r3, r3, #1
    d1a0:	e1a03903 	lsl	r3, r3, #18
    d1a4:	e1a03923 	lsr	r3, r3, #18
    d1a8:	e1530001 	cmp	r3, r1
    d1ac:	e5843014 	str	r3, [r4, #20]
    d1b0:	0a000011 	beq	d1fc <CLogger::Read(void*, unsigned int)+0xb0>
    d1b4:	e15c0006 	cmp	ip, r6
    d1b8:	1afffff1 	bne	d184 <CLogger::Read(void*, unsigned int)+0x38>
    d1bc:	e5943018 	ldr	r3, [r4, #24]
    d1c0:	e3530000 	cmp	r3, #0
    d1c4:	1a000010 	bne	d20c <CLogger::Read(void*, unsigned int)+0xc0>
    d1c8:	e1a00007 	mov	r0, r7
    d1cc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    d1d0:	ebfff301 	bl	9ddc <EnterCritical>
    d1d4:	e5942010 	ldr	r2, [r4, #16]
    d1d8:	e5943014 	ldr	r3, [r4, #20]
    d1dc:	e1520003 	cmp	r2, r3
    d1e0:	1affffe4 	bne	d178 <CLogger::Read(void*, unsigned int)+0x2c>
    d1e4:	e5943018 	ldr	r3, [r4, #24]
    d1e8:	e3530000 	cmp	r3, #0
    d1ec:	0a000000 	beq	d1f4 <CLogger::Read(void*, unsigned int)+0xa8>
    d1f0:	ebfff308 	bl	9e18 <LeaveCritical>
    d1f4:	e3e00000 	mvn	r0, #0
    d1f8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    d1fc:	e5943018 	ldr	r3, [r4, #24]
    d200:	e1a0700c 	mov	r7, ip
    d204:	e3530000 	cmp	r3, #0
    d208:	0affffee 	beq	d1c8 <CLogger::Read(void*, unsigned int)+0x7c>
    d20c:	ebfff301 	bl	9e18 <LeaveCritical>
    d210:	e1a00007 	mov	r0, r7
    d214:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000d218 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    d218:	e590c000 	ldr	ip, [r0]
    d21c:	e15c0002 	cmp	ip, r2
    d220:	312fff1e 	bxcc	lr
    d224:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d228:	e1a05002 	mov	r5, r2
    d22c:	e24dd020 	sub	sp, sp, #32
    d230:	e1a04000 	mov	r4, r0
    d234:	e1a0000d 	mov	r0, sp
    d238:	e1a07003 	mov	r7, r3
    d23c:	e1a06001 	mov	r6, r1
    d240:	eb0000c2 	bl	d550 <CString::CString()>
    d244:	e3550000 	cmp	r5, #0
    d248:	0a000032 	beq	d318 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    d24c:	e5940004 	ldr	r0, [r4, #4]
    d250:	e3500000 	cmp	r0, #0
    d254:	0a000054 	beq	d3ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x194>
    d258:	ebfff3fd 	bl	a254 <CTimer::GetTimeString()>
    d25c:	e2508000 	subs	r8, r0, #0
    d260:	0a00000a 	beq	d290 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x78>
    d264:	eb0000cf 	bl	d5a8 <CString::operator char const*() const>
    d268:	e1a01000 	mov	r1, r0
    d26c:	e1a0000d 	mov	r0, sp
    d270:	eb0000e7 	bl	d614 <CString::Append(char const*)>
    d274:	e1a0000d 	mov	r0, sp
    d278:	e59f1178 	ldr	r1, [pc, #376]	; d3f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    d27c:	eb0000e4 	bl	d614 <CString::Append(char const*)>
    d280:	e5983000 	ldr	r3, [r8]
    d284:	e1a00008 	mov	r0, r8
    d288:	e5933004 	ldr	r3, [r3, #4]
    d28c:	e12fff33 	blx	r3
    d290:	e1a01006 	mov	r1, r6
    d294:	e1a0000d 	mov	r0, sp
    d298:	eb0000dd 	bl	d614 <CString::Append(char const*)>
    d29c:	e28d6010 	add	r6, sp, #16
    d2a0:	e59f1154 	ldr	r1, [pc, #340]	; d3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d2a4:	e1a0000d 	mov	r0, sp
    d2a8:	eb0000d9 	bl	d614 <CString::Append(char const*)>
    d2ac:	e1a00006 	mov	r0, r6
    d2b0:	eb0000a6 	bl	d550 <CString::CString()>
    d2b4:	e1a01007 	mov	r1, r7
    d2b8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d2bc:	e1a00006 	mov	r0, r6
    d2c0:	eb0001b9 	bl	d9ac <CString::FormatV(char const*, std::__va_list)>
    d2c4:	e1a00006 	mov	r0, r6
    d2c8:	eb0000b6 	bl	d5a8 <CString::operator char const*() const>
    d2cc:	e1a01000 	mov	r1, r0
    d2d0:	e1a0000d 	mov	r0, sp
    d2d4:	eb0000ce 	bl	d614 <CString::Append(char const*)>
    d2d8:	e3550000 	cmp	r5, #0
    d2dc:	0a000025 	beq	d378 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    d2e0:	e59f1118 	ldr	r1, [pc, #280]	; d400 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    d2e4:	e1a0000d 	mov	r0, sp
    d2e8:	eb0000c9 	bl	d614 <CString::Append(char const*)>
    d2ec:	e1a0000d 	mov	r0, sp
    d2f0:	eb0000ac 	bl	d5a8 <CString::operator char const*() const>
    d2f4:	e1a01000 	mov	r1, r0
    d2f8:	e1a00004 	mov	r0, r4
    d2fc:	ebffff67 	bl	d0a0 <CLogger::Write(char const*)>
    d300:	e1a00006 	mov	r0, r6
    d304:	eb00005d 	bl	d480 <CString::~CString()>
    d308:	e1a0000d 	mov	r0, sp
    d30c:	eb00005b 	bl	d480 <CString::~CString()>
    d310:	e28dd020 	add	sp, sp, #32
    d314:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d318:	e1a0000d 	mov	r0, sp
    d31c:	e59f10e0 	ldr	r1, [pc, #224]	; d404 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    d320:	eb0000a6 	bl	d5c0 <CString::operator=(char const*)>
    d324:	e5940004 	ldr	r0, [r4, #4]
    d328:	e3500000 	cmp	r0, #0
    d32c:	1affffc9 	bne	d258 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    d330:	e1a01006 	mov	r1, r6
    d334:	e1a0000d 	mov	r0, sp
    d338:	eb0000b5 	bl	d614 <CString::Append(char const*)>
    d33c:	e28d6010 	add	r6, sp, #16
    d340:	e59f10b4 	ldr	r1, [pc, #180]	; d3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d344:	e1a0000d 	mov	r0, sp
    d348:	eb0000b1 	bl	d614 <CString::Append(char const*)>
    d34c:	e1a00006 	mov	r0, r6
    d350:	eb00007e 	bl	d550 <CString::CString()>
    d354:	e1a01007 	mov	r1, r7
    d358:	e1a00006 	mov	r0, r6
    d35c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d360:	eb000191 	bl	d9ac <CString::FormatV(char const*, std::__va_list)>
    d364:	e1a00006 	mov	r0, r6
    d368:	eb00008e 	bl	d5a8 <CString::operator char const*() const>
    d36c:	e1a01000 	mov	r1, r0
    d370:	e1a0000d 	mov	r0, sp
    d374:	eb0000a6 	bl	d614 <CString::Append(char const*)>
    d378:	e1a0000d 	mov	r0, sp
    d37c:	e59f1084 	ldr	r1, [pc, #132]	; d408 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    d380:	eb0000a3 	bl	d614 <CString::Append(char const*)>
    d384:	e1a0000d 	mov	r0, sp
    d388:	e59f1070 	ldr	r1, [pc, #112]	; d400 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    d38c:	eb0000a0 	bl	d614 <CString::Append(char const*)>
    d390:	e1a0000d 	mov	r0, sp
    d394:	eb000083 	bl	d5a8 <CString::operator char const*() const>
    d398:	e1a01000 	mov	r1, r0
    d39c:	e1a00004 	mov	r0, r4
    d3a0:	ebffff3e 	bl	d0a0 <CLogger::Write(char const*)>
    d3a4:	ebfff2cd 	bl	9ee0 <halt>
    d3a8:	eaffffd4 	b	d300 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe8>
    d3ac:	e1a01006 	mov	r1, r6
    d3b0:	e1a0000d 	mov	r0, sp
    d3b4:	eb000096 	bl	d614 <CString::Append(char const*)>
    d3b8:	e28d6010 	add	r6, sp, #16
    d3bc:	e1a0000d 	mov	r0, sp
    d3c0:	e59f1034 	ldr	r1, [pc, #52]	; d3fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    d3c4:	eb000092 	bl	d614 <CString::Append(char const*)>
    d3c8:	e1a00006 	mov	r0, r6
    d3cc:	eb00005f 	bl	d550 <CString::CString()>
    d3d0:	e1a01007 	mov	r1, r7
    d3d4:	e1a00006 	mov	r0, r6
    d3d8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d3dc:	eb000172 	bl	d9ac <CString::FormatV(char const*, std::__va_list)>
    d3e0:	e1a00006 	mov	r0, r6
    d3e4:	eb00006f 	bl	d5a8 <CString::operator char const*() const>
    d3e8:	e1a01000 	mov	r1, r0
    d3ec:	e1a0000d 	mov	r0, sp
    d3f0:	eb000087 	bl	d614 <CString::Append(char const*)>
    d3f4:	eaffffb9 	b	d2e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc8>
    d3f8:	00011604 	.word	0x00011604
    d3fc:	00011608 	.word	0x00011608
    d400:	0000ffc8 	.word	0x0000ffc8
    d404:	000115fc 	.word	0x000115fc
    d408:	0001160c 	.word	0x0001160c

0000d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d40c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d410:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d414:	e24dd010 	sub	sp, sp, #16
    d418:	e28dc018 	add	ip, sp, #24
    d41c:	e58dc000 	str	ip, [sp]
    d420:	e59d3014 	ldr	r3, [sp, #20]
    d424:	e58dc00c 	str	ip, [sp, #12]
    d428:	ebffff7a 	bl	d218 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d42c:	e28dd010 	add	sp, sp, #16
    d430:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d434:	e28dd004 	add	sp, sp, #4
    d438:	e12fff1e 	bx	lr

0000d43c <CLogger::Initialize(CDevice*)>:
    d43c:	e92d4010 	push	{r4, lr}
    d440:	e5801008 	str	r1, [r0, #8]
    d444:	e24dd008 	sub	sp, sp, #8
    d448:	e1a04000 	mov	r4, r0
    d44c:	eb00060e 	bl	ec8c <CMachineInfo::Get()>
    d450:	eb000598 	bl	eab8 <CMachineInfo::GetMachineName() const>
    d454:	e59f101c 	ldr	r1, [pc, #28]	; d478 <CLogger::Initialize(CDevice*)+0x3c>
    d458:	e58d0000 	str	r0, [sp]
    d45c:	e3a02003 	mov	r2, #3
    d460:	e1a00004 	mov	r0, r4
    d464:	e59f3010 	ldr	r3, [pc, #16]	; d47c <CLogger::Initialize(CDevice*)+0x40>
    d468:	ebffffe7 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d46c:	e3a00001 	mov	r0, #1
    d470:	e28dd008 	add	sp, sp, #8
    d474:	e8bd8010 	pop	{r4, pc}
    d478:	00011614 	.word	0x00011614
    d47c:	0001161c 	.word	0x0001161c

0000d480 <CString::~CString()>:
    d480:	e92d4010 	push	{r4, lr}
    d484:	e1a04000 	mov	r4, r0
    d488:	e5900004 	ldr	r0, [r0, #4]
    d48c:	e59f3014 	ldr	r3, [pc, #20]	; d4a8 <CString::~CString()+0x28>
    d490:	e3500000 	cmp	r0, #0
    d494:	e5843000 	str	r3, [r4]
    d498:	0a000000 	beq	d4a0 <CString::~CString()+0x20>
    d49c:	ebfff24d 	bl	9dd8 <operator delete[](void*)>
    d4a0:	e1a00004 	mov	r0, r4
    d4a4:	e8bd8010 	pop	{r4, pc}
    d4a8:	00011640 	.word	0x00011640

0000d4ac <CString::~CString()>:
    d4ac:	e92d4010 	push	{r4, lr}
    d4b0:	e1a04000 	mov	r4, r0
    d4b4:	e5900004 	ldr	r0, [r0, #4]
    d4b8:	e59f301c 	ldr	r3, [pc, #28]	; d4dc <CString::~CString()+0x30>
    d4bc:	e3500000 	cmp	r0, #0
    d4c0:	e5843000 	str	r3, [r4]
    d4c4:	0a000000 	beq	d4cc <CString::~CString()+0x20>
    d4c8:	ebfff242 	bl	9dd8 <operator delete[](void*)>
    d4cc:	e1a00004 	mov	r0, r4
    d4d0:	ebfff23f 	bl	9dd4 <operator delete(void*)>
    d4d4:	e1a00004 	mov	r0, r4
    d4d8:	e8bd8010 	pop	{r4, pc}
    d4dc:	00011640 	.word	0x00011640

0000d4e0 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d4e0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    d4e4:	e590300c 	ldr	r3, [r0, #12]
    d4e8:	e5905004 	ldr	r5, [r0, #4]
    d4ec:	e5902008 	ldr	r2, [r0, #8]
    d4f0:	e0655003 	rsb	r5, r5, r3
    d4f4:	e0811005 	add	r1, r1, r5
    d4f8:	e2813001 	add	r3, r1, #1
    d4fc:	e1530002 	cmp	r3, r2
    d500:	98bd80f8 	popls	{r3, r4, r5, r6, r7, pc}
    d504:	e1a04000 	mov	r4, r0
    d508:	e2816041 	add	r6, r1, #65	; 0x41
    d50c:	e1a00006 	mov	r0, r6
    d510:	ebfff22e 	bl	9dd0 <operator new[](unsigned int)>
    d514:	e3a02000 	mov	r2, #0
    d518:	e594300c 	ldr	r3, [r4, #12]
    d51c:	e1a07000 	mov	r7, r0
    d520:	e5c32000 	strb	r2, [r3]
    d524:	e5941004 	ldr	r1, [r4, #4]
    d528:	ebfff5e7 	bl	accc <strcpy>
    d52c:	e5940004 	ldr	r0, [r4, #4]
    d530:	e3500000 	cmp	r0, #0
    d534:	0a000000 	beq	d53c <CString::ReserveSpace(unsigned int) [clone .part.0]+0x5c>
    d538:	ebfff226 	bl	9dd8 <operator delete[](void*)>
    d53c:	e0875005 	add	r5, r7, r5
    d540:	e584500c 	str	r5, [r4, #12]
    d544:	e5847004 	str	r7, [r4, #4]
    d548:	e5846008 	str	r6, [r4, #8]
    d54c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000d550 <CString::CString()>:
    d550:	e3a02000 	mov	r2, #0
    d554:	e59f1008 	ldr	r1, [pc, #8]	; d564 <CString::CString()+0x14>
    d558:	e5802008 	str	r2, [r0, #8]
    d55c:	e8800006 	stm	r0, {r1, r2}
    d560:	e12fff1e 	bx	lr
    d564:	00011640 	.word	0x00011640

0000d568 <CString::CString(char const*)>:
    d568:	e92d4038 	push	{r3, r4, r5, lr}
    d56c:	e1a04000 	mov	r4, r0
    d570:	e59f302c 	ldr	r3, [pc, #44]	; d5a4 <CString::CString(char const*)+0x3c>
    d574:	e1a00001 	mov	r0, r1
    d578:	e5843000 	str	r3, [r4]
    d57c:	e1a05001 	mov	r5, r1
    d580:	ebfff5a3 	bl	ac14 <strlen>
    d584:	e2800001 	add	r0, r0, #1
    d588:	e5840008 	str	r0, [r4, #8]
    d58c:	ebfff20f 	bl	9dd0 <operator new[](unsigned int)>
    d590:	e1a01005 	mov	r1, r5
    d594:	e5840004 	str	r0, [r4, #4]
    d598:	ebfff5cb 	bl	accc <strcpy>
    d59c:	e1a00004 	mov	r0, r4
    d5a0:	e8bd8038 	pop	{r3, r4, r5, pc}
    d5a4:	00011640 	.word	0x00011640

0000d5a8 <CString::operator char const*() const>:
    d5a8:	e5900004 	ldr	r0, [r0, #4]
    d5ac:	e59f3008 	ldr	r3, [pc, #8]	; d5bc <CString::operator char const*() const+0x14>
    d5b0:	e3500000 	cmp	r0, #0
    d5b4:	01a00003 	moveq	r0, r3
    d5b8:	e12fff1e 	bx	lr
    d5bc:	000103c4 	.word	0x000103c4

0000d5c0 <CString::operator=(char const*)>:
    d5c0:	e92d4038 	push	{r3, r4, r5, lr}
    d5c4:	e1a04000 	mov	r4, r0
    d5c8:	e5900004 	ldr	r0, [r0, #4]
    d5cc:	e1a05001 	mov	r5, r1
    d5d0:	e3500000 	cmp	r0, #0
    d5d4:	0a000000 	beq	d5dc <CString::operator=(char const*)+0x1c>
    d5d8:	ebfff1fe 	bl	9dd8 <operator delete[](void*)>
    d5dc:	e1a00005 	mov	r0, r5
    d5e0:	ebfff58b 	bl	ac14 <strlen>
    d5e4:	e2800001 	add	r0, r0, #1
    d5e8:	e5840008 	str	r0, [r4, #8]
    d5ec:	ebfff1f7 	bl	9dd0 <operator new[](unsigned int)>
    d5f0:	e1a01005 	mov	r1, r5
    d5f4:	e5840004 	str	r0, [r4, #4]
    d5f8:	ebfff5b3 	bl	accc <strcpy>
    d5fc:	e5940004 	ldr	r0, [r4, #4]
    d600:	e8bd8038 	pop	{r3, r4, r5, pc}

0000d604 <CString::GetLength() const>:
    d604:	e5900004 	ldr	r0, [r0, #4]
    d608:	e3500000 	cmp	r0, #0
    d60c:	012fff1e 	bxeq	lr
    d610:	eafff57f 	b	ac14 <strlen>

0000d614 <CString::Append(char const*)>:
    d614:	e92d4070 	push	{r4, r5, r6, lr}
    d618:	e3a03001 	mov	r3, #1
    d61c:	e1a04000 	mov	r4, r0
    d620:	e5900004 	ldr	r0, [r0, #4]
    d624:	e1a06001 	mov	r6, r1
    d628:	e3500000 	cmp	r0, #0
    d62c:	e5843008 	str	r3, [r4, #8]
    d630:	0a000003 	beq	d644 <CString::Append(char const*)+0x30>
    d634:	ebfff576 	bl	ac14 <strlen>
    d638:	e5943008 	ldr	r3, [r4, #8]
    d63c:	e0830000 	add	r0, r3, r0
    d640:	e5840008 	str	r0, [r4, #8]
    d644:	e1a00006 	mov	r0, r6
    d648:	ebfff571 	bl	ac14 <strlen>
    d64c:	e5943008 	ldr	r3, [r4, #8]
    d650:	e0800003 	add	r0, r0, r3
    d654:	e5840008 	str	r0, [r4, #8]
    d658:	ebfff1dc 	bl	9dd0 <operator new[](unsigned int)>
    d65c:	e5941004 	ldr	r1, [r4, #4]
    d660:	e1a05000 	mov	r5, r0
    d664:	e3510000 	cmp	r1, #0
    d668:	05c01000 	strbeq	r1, [r0]
    d66c:	0a000004 	beq	d684 <CString::Append(char const*)+0x70>
    d670:	ebfff595 	bl	accc <strcpy>
    d674:	e5940004 	ldr	r0, [r4, #4]
    d678:	e3500000 	cmp	r0, #0
    d67c:	0a000000 	beq	d684 <CString::Append(char const*)+0x70>
    d680:	ebfff1d4 	bl	9dd8 <operator delete[](void*)>
    d684:	e1a01006 	mov	r1, r6
    d688:	e1a00005 	mov	r0, r5
    d68c:	ebfff5ad 	bl	ad48 <strcat>
    d690:	e5845004 	str	r5, [r4, #4]
    d694:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d698 <CString::Compare(char const*) const>:
    d698:	e5900004 	ldr	r0, [r0, #4]
    d69c:	eafff566 	b	ac3c <strcmp>

0000d6a0 <CString::Find(char) const>:
    d6a0:	e5902004 	ldr	r2, [r0, #4]
    d6a4:	e5d23000 	ldrb	r3, [r2]
    d6a8:	e3530000 	cmp	r3, #0
    d6ac:	0a00000b 	beq	d6e0 <CString::Find(char) const+0x40>
    d6b0:	e6af3073 	sxtb	r3, r3
    d6b4:	e1530001 	cmp	r3, r1
    d6b8:	13a00000 	movne	r0, #0
    d6bc:	1a000002 	bne	d6cc <CString::Find(char) const+0x2c>
    d6c0:	ea000009 	b	d6ec <CString::Find(char) const+0x4c>
    d6c4:	e15c0001 	cmp	ip, r1
    d6c8:	0a000006 	beq	d6e8 <CString::Find(char) const+0x48>
    d6cc:	e5f23001 	ldrb	r3, [r2, #1]!
    d6d0:	e2800001 	add	r0, r0, #1
    d6d4:	e3530000 	cmp	r3, #0
    d6d8:	e6afc073 	sxtb	ip, r3
    d6dc:	1afffff8 	bne	d6c4 <CString::Find(char) const+0x24>
    d6e0:	e3e00000 	mvn	r0, #0
    d6e4:	e12fff1e 	bx	lr
    d6e8:	e12fff1e 	bx	lr
    d6ec:	e3a00000 	mov	r0, #0
    d6f0:	e12fff1e 	bx	lr

0000d6f4 <CString::PutChar(char, unsigned int)>:
    d6f4:	e92d4070 	push	{r4, r5, r6, lr}
    d6f8:	e2524000 	subs	r4, r2, #0
    d6fc:	08bd8070 	popeq	{r4, r5, r6, pc}
    d700:	e1a06001 	mov	r6, r1
    d704:	e1a01004 	mov	r1, r4
    d708:	e1a05000 	mov	r5, r0
    d70c:	ebffff73 	bl	d4e0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d710:	e2442001 	sub	r2, r4, #1
    d714:	e595300c 	ldr	r3, [r5, #12]
    d718:	e2422001 	sub	r2, r2, #1
    d71c:	e2830001 	add	r0, r3, #1
    d720:	e3720001 	cmn	r2, #1
    d724:	e585000c 	str	r0, [r5, #12]
    d728:	e5c36000 	strb	r6, [r3]
    d72c:	1afffff8 	bne	d714 <CString::PutChar(char, unsigned int)+0x20>
    d730:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d734 <CString::PutString(char const*)>:
    d734:	e92d4070 	push	{r4, r5, r6, lr}
    d738:	e1a04000 	mov	r4, r0
    d73c:	e1a00001 	mov	r0, r1
    d740:	e1a05001 	mov	r5, r1
    d744:	ebfff532 	bl	ac14 <strlen>
    d748:	e2506000 	subs	r6, r0, #0
    d74c:	0a000002 	beq	d75c <CString::PutString(char const*)+0x28>
    d750:	e1a00004 	mov	r0, r4
    d754:	e1a01006 	mov	r1, r6
    d758:	ebffff60 	bl	d4e0 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d75c:	e1a01005 	mov	r1, r5
    d760:	e594000c 	ldr	r0, [r4, #12]
    d764:	ebfff558 	bl	accc <strcpy>
    d768:	e594300c 	ldr	r3, [r4, #12]
    d76c:	e0831006 	add	r1, r3, r6
    d770:	e584100c 	str	r1, [r4, #12]
    d774:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d778 <CString::ReserveSpace(unsigned int)>:
    d778:	e3510000 	cmp	r1, #0
    d77c:	012fff1e 	bxeq	lr
    d780:	eaffff56 	b	d4e0 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d784 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d784:	e1510002 	cmp	r1, r2
    d788:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d78c:	e1a06001 	mov	r6, r1
    d790:	e1a08002 	mov	r8, r2
    d794:	e1a0b000 	mov	fp, r0
    d798:	e1a0a003 	mov	sl, r3
    d79c:	23a04001 	movcs	r4, #1
    d7a0:	3a000024 	bcc	d838 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xb4>
    d7a4:	e0040498 	mul	r4, r8, r4
    d7a8:	e1a00006 	mov	r0, r6
    d7ac:	e1a01004 	mov	r1, r4
    d7b0:	eb0007f9 	bl	f79c <__aeabi_uidiv>
    d7b4:	e1500008 	cmp	r0, r8
    d7b8:	e1a05000 	mov	r5, r0
    d7bc:	2afffff8 	bcs	d7a4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    d7c0:	e1a0700b 	mov	r7, fp
    d7c4:	ea000003 	b	d7d8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x54>
    d7c8:	e1a00006 	mov	r0, r6
    d7cc:	e1a01004 	mov	r1, r4
    d7d0:	eb0007f1 	bl	f79c <__aeabi_uidiv>
    d7d4:	e1a05000 	mov	r5, r0
    d7d8:	e1a00006 	mov	r0, r6
    d7dc:	e1a01004 	mov	r1, r4
    d7e0:	eb0007f1 	bl	f7ac <__aeabi_uidivmod>
    d7e4:	e3550009 	cmp	r5, #9
    d7e8:	e2853030 	add	r3, r5, #48	; 0x30
    d7ec:	e1a06001 	mov	r6, r1
    d7f0:	e1a09007 	mov	r9, r7
    d7f4:	96ef5073 	uxtbls	r5, r3
    d7f8:	9a000005 	bls	d814 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x90>
    d7fc:	e35a0000 	cmp	sl, #0
    d800:	03a03020 	moveq	r3, #32
    d804:	13a03000 	movne	r3, #0
    d808:	e2855037 	add	r5, r5, #55	; 0x37
    d80c:	e0835005 	add	r5, r3, r5
    d810:	e6ef5075 	uxtb	r5, r5
    d814:	e1a00004 	mov	r0, r4
    d818:	e4c75001 	strb	r5, [r7], #1
    d81c:	e1a01008 	mov	r1, r8
    d820:	eb0007dd 	bl	f79c <__aeabi_uidiv>
    d824:	e2504000 	subs	r4, r0, #0
    d828:	1affffe6 	bne	d7c8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x44>
    d82c:	e5c94001 	strb	r4, [r9, #1]
    d830:	e1a0000b 	mov	r0, fp
    d834:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d838:	e1a05001 	mov	r5, r1
    d83c:	e3a04001 	mov	r4, #1
    d840:	eaffffde 	b	d7c0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000d844 <CString::ftoa(char*, double, unsigned int)>:
    d844:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d848:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d84c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d850:	ed9f7b50 	vldr	d7, [pc, #320]	; d998 <CString::ftoa(char*, double, unsigned int)+0x154>
    d854:	ed2d8b04 	vpush	{d8-d9}
    d858:	eeb08b40 	vmov.f64	d8, d0
    d85c:	4eb18b40 	vnegmi.f64	d8, d0
    d860:	43a0302d 	movmi	r3, #45	; 0x2d
    d864:	eeb48bc7 	vcmpe.f64	d8, d7
    d868:	45c03000 	strbmi	r3, [r0]
    d86c:	42807001 	addmi	r7, r0, #1
    d870:	51a07000 	movpl	r7, r0
    d874:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d878:	e24dd014 	sub	sp, sp, #20
    d87c:	e1a06000 	mov	r6, r0
    d880:	e1a05001 	mov	r5, r1
    d884:	ca000039 	bgt	d970 <CString::ftoa(char*, double, unsigned int)+0x12c>
    d888:	eebc9bc8 	vcvt.u32.f64	s18, d8
    d88c:	e1a00007 	mov	r0, r7
    d890:	ee191a10 	vmov	r1, s18
    d894:	e3a0200a 	mov	r2, #10
    d898:	e3a03000 	mov	r3, #0
    d89c:	ebffffb8 	bl	d784 <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d8a0:	e3550000 	cmp	r5, #0
    d8a4:	1a000003 	bne	d8b8 <CString::ftoa(char*, double, unsigned int)+0x74>
    d8a8:	e1a00006 	mov	r0, r6
    d8ac:	e28dd014 	add	sp, sp, #20
    d8b0:	ecbd8b04 	vpop	{d8-d9}
    d8b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d8b8:	e1a00007 	mov	r0, r7
    d8bc:	ebfff4d4 	bl	ac14 <strlen>
    d8c0:	e3550009 	cmp	r5, #9
    d8c4:	23a05009 	movcs	r5, #9
    d8c8:	e3a0302e 	mov	r3, #46	; 0x2e
    d8cc:	e0874000 	add	r4, r7, r0
    d8d0:	e3550001 	cmp	r5, #1
    d8d4:	e7c73000 	strb	r3, [r7, r0]
    d8d8:	e2847001 	add	r7, r4, #1
    d8dc:	0a00002a 	beq	d98c <CString::ftoa(char*, double, unsigned int)+0x148>
    d8e0:	e3a02002 	mov	r2, #2
    d8e4:	e3a0300a 	mov	r3, #10
    d8e8:	e2822001 	add	r2, r2, #1
    d8ec:	e0833103 	add	r3, r3, r3, lsl #2
    d8f0:	e1520005 	cmp	r2, r5
    d8f4:	e1a03083 	lsl	r3, r3, #1
    d8f8:	9afffffa 	bls	d8e8 <CString::ftoa(char*, double, unsigned int)+0xa4>
    d8fc:	ee073a90 	vmov	s15, r3
    d900:	eeb87b67 	vcvt.f64.u32	d7, s15
    d904:	eeb86b49 	vcvt.f64.u32	d6, s18
    d908:	ee388b46 	vsub.f64	d8, d8, d6
    d90c:	ee287b07 	vmul.f64	d7, d8, d7
    d910:	eefc7bc7 	vcvt.u32.f64	s15, d7
    d914:	e3a0200a 	mov	r2, #10
    d918:	ee171a90 	vmov	r1, s15
    d91c:	e3a03000 	mov	r3, #0
    d920:	e28d0004 	add	r0, sp, #4
    d924:	ebffff96 	bl	d784 <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d928:	e28d0004 	add	r0, sp, #4
    d92c:	ebfff4b8 	bl	ac14 <strlen>
    d930:	e0550000 	subs	r0, r5, r0
    d934:	0a000006 	beq	d954 <CString::ftoa(char*, double, unsigned int)+0x110>
    d938:	e1a03004 	mov	r3, r4
    d93c:	e3a01030 	mov	r1, #48	; 0x30
    d940:	e0842000 	add	r2, r4, r0
    d944:	e5e31001 	strb	r1, [r3, #1]!
    d948:	e1530002 	cmp	r3, r2
    d94c:	1afffffc 	bne	d944 <CString::ftoa(char*, double, unsigned int)+0x100>
    d950:	e0877000 	add	r7, r7, r0
    d954:	e1a00007 	mov	r0, r7
    d958:	e28d1004 	add	r1, sp, #4
    d95c:	ebfff4da 	bl	accc <strcpy>
    d960:	e1a00006 	mov	r0, r6
    d964:	e28dd014 	add	sp, sp, #20
    d968:	ecbd8b04 	vpop	{d8-d9}
    d96c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d970:	e1a00007 	mov	r0, r7
    d974:	e59f102c 	ldr	r1, [pc, #44]	; d9a8 <CString::ftoa(char*, double, unsigned int)+0x164>
    d978:	ebfff4d3 	bl	accc <strcpy>
    d97c:	e1a00006 	mov	r0, r6
    d980:	e28dd014 	add	sp, sp, #20
    d984:	ecbd8b04 	vpop	{d8-d9}
    d988:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d98c:	ed9f7b03 	vldr	d7, [pc, #12]	; d9a0 <CString::ftoa(char*, double, unsigned int)+0x15c>
    d990:	eaffffdb 	b	d904 <CString::ftoa(char*, double, unsigned int)+0xc0>
    d994:	e1a00000 	nop			; (mov r0, r0)
    d998:	ffe00000 	.word	0xffe00000
    d99c:	41efffff 	.word	0x41efffff
    d9a0:	00000000 	.word	0x00000000
    d9a4:	40240000 	.word	0x40240000
    d9a8:	00011648 	.word	0x00011648

0000d9ac <CString::FormatV(char const*, std::__va_list)>:
    d9ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d9b0:	e1a06000 	mov	r6, r0
    d9b4:	e5900004 	ldr	r0, [r0, #4]
    d9b8:	e24dd018 	sub	sp, sp, #24
    d9bc:	e3500000 	cmp	r0, #0
    d9c0:	e1a05001 	mov	r5, r1
    d9c4:	e1a07002 	mov	r7, r2
    d9c8:	0a000000 	beq	d9d0 <CString::FormatV(char const*, std::__va_list)+0x24>
    d9cc:	ebfff101 	bl	9dd8 <operator delete[](void*)>
    d9d0:	e3a00040 	mov	r0, #64	; 0x40
    d9d4:	e5860008 	str	r0, [r6, #8]
    d9d8:	ebfff0fc 	bl	9dd0 <operator new[](unsigned int)>
    d9dc:	e5860004 	str	r0, [r6, #4]
    d9e0:	e586000c 	str	r0, [r6, #12]
    d9e4:	e5d51000 	ldrb	r1, [r5]
    d9e8:	e3510000 	cmp	r1, #0
    d9ec:	0a000067 	beq	db90 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    d9f0:	e6af1071 	sxtb	r1, r1
    d9f4:	e3510025 	cmp	r1, #37	; 0x25
    d9f8:	1a0000b1 	bne	dcc4 <CString::FormatV(char const*, std::__va_list)+0x318>
    d9fc:	e5d53001 	ldrb	r3, [r5, #1]
    da00:	e6af1073 	sxtb	r1, r3
    da04:	e3510025 	cmp	r1, #37	; 0x25
    da08:	0a0000ea 	beq	ddb8 <CString::FormatV(char const*, std::__va_list)+0x40c>
    da0c:	e351002d 	cmp	r1, #45	; 0x2d
    da10:	05d53002 	ldrbeq	r3, [r5, #2]
    da14:	12855001 	addne	r5, r5, #1
    da18:	02855002 	addeq	r5, r5, #2
    da1c:	13a08000 	movne	r8, #0
    da20:	03a08001 	moveq	r8, #1
    da24:	e3530030 	cmp	r3, #48	; 0x30
    da28:	03a09001 	moveq	r9, #1
    da2c:	05d53001 	ldrbeq	r3, [r5, #1]
    da30:	13a09000 	movne	r9, #0
    da34:	e2432030 	sub	r2, r3, #48	; 0x30
    da38:	00855009 	addeq	r5, r5, r9
    da3c:	e3520009 	cmp	r2, #9
    da40:	e3a04000 	mov	r4, #0
    da44:	8a000007 	bhi	da68 <CString::FormatV(char const*, std::__va_list)+0xbc>
    da48:	e6af2073 	sxtb	r2, r3
    da4c:	e5f53001 	ldrb	r3, [r5, #1]!
    da50:	e0844104 	add	r4, r4, r4, lsl #2
    da54:	e2431030 	sub	r1, r3, #48	; 0x30
    da58:	e0824084 	add	r4, r2, r4, lsl #1
    da5c:	e3510009 	cmp	r1, #9
    da60:	e2444030 	sub	r4, r4, #48	; 0x30
    da64:	9afffff7 	bls	da48 <CString::FormatV(char const*, std::__va_list)+0x9c>
    da68:	e6af3073 	sxtb	r3, r3
    da6c:	e353002e 	cmp	r3, #46	; 0x2e
    da70:	0a0000c1 	beq	dd7c <CString::FormatV(char const*, std::__va_list)+0x3d0>
    da74:	e3a02006 	mov	r2, #6
    da78:	e5d53000 	ldrb	r3, [r5]
    da7c:	e6af1073 	sxtb	r1, r3
    da80:	e351006c 	cmp	r1, #108	; 0x6c
    da84:	0a000092 	beq	dcd4 <CString::FormatV(char const*, std::__va_list)+0x328>
    da88:	e2411058 	sub	r1, r1, #88	; 0x58
    da8c:	e3510020 	cmp	r1, #32
    da90:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    da94:	ea000081 	b	dca0 <CString::FormatV(char const*, std::__va_list)+0x2f4>
    da98:	0000dd70 	.word	0x0000dd70
    da9c:	0000dca0 	.word	0x0000dca0
    daa0:	0000dca0 	.word	0x0000dca0
    daa4:	0000dca0 	.word	0x0000dca0
    daa8:	0000dca0 	.word	0x0000dca0
    daac:	0000dca0 	.word	0x0000dca0
    dab0:	0000dca0 	.word	0x0000dca0
    dab4:	0000dca0 	.word	0x0000dca0
    dab8:	0000dca0 	.word	0x0000dca0
    dabc:	0000dca0 	.word	0x0000dca0
    dac0:	0000dca0 	.word	0x0000dca0
    dac4:	0000dc2c 	.word	0x0000dc2c
    dac8:	0000dbdc 	.word	0x0000dbdc
    dacc:	0000dca0 	.word	0x0000dca0
    dad0:	0000dba0 	.word	0x0000dba0
    dad4:	0000dca0 	.word	0x0000dca0
    dad8:	0000dca0 	.word	0x0000dca0
    dadc:	0000dca0 	.word	0x0000dca0
    dae0:	0000dca0 	.word	0x0000dca0
    dae4:	0000dca0 	.word	0x0000dca0
    dae8:	0000dca0 	.word	0x0000dca0
    daec:	0000dca0 	.word	0x0000dca0
    daf0:	0000dca0 	.word	0x0000dca0
    daf4:	0000db1c 	.word	0x0000db1c
    daf8:	0000dca0 	.word	0x0000dca0
    dafc:	0000dca0 	.word	0x0000dca0
    db00:	0000dca0 	.word	0x0000dca0
    db04:	0000dc6c 	.word	0x0000dc6c
    db08:	0000dca0 	.word	0x0000dca0
    db0c:	0000ddcc 	.word	0x0000ddcc
    db10:	0000dca0 	.word	0x0000dca0
    db14:	0000dca0 	.word	0x0000dca0
    db18:	0000dd70 	.word	0x0000dd70
    db1c:	e3a02008 	mov	r2, #8
    db20:	e3a0306f 	mov	r3, #111	; 0x6f
    db24:	e2433058 	sub	r3, r3, #88	; 0x58
    db28:	e16f3f13 	clz	r3, r3
    db2c:	e5971000 	ldr	r1, [r7]
    db30:	e1a032a3 	lsr	r3, r3, #5
    db34:	e1a0000d 	mov	r0, sp
    db38:	ebffff11 	bl	d784 <CString::ntoa(char*, unsigned long, unsigned int, int)>
    db3c:	e1a0000d 	mov	r0, sp
    db40:	ebfff433 	bl	ac14 <strlen>
    db44:	e3580000 	cmp	r8, #0
    db48:	e2877004 	add	r7, r7, #4
    db4c:	e1a0a000 	mov	sl, r0
    db50:	1a0000b4 	bne	de28 <CString::FormatV(char const*, std::__va_list)+0x47c>
    db54:	e1500004 	cmp	r0, r4
    db58:	2a000005 	bcs	db74 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    db5c:	e3590000 	cmp	r9, #0
    db60:	e0602004 	rsb	r2, r0, r4
    db64:	13a01030 	movne	r1, #48	; 0x30
    db68:	03a01020 	moveq	r1, #32
    db6c:	e1a00006 	mov	r0, r6
    db70:	ebfffedf 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    db74:	e1a00006 	mov	r0, r6
    db78:	e1a0100d 	mov	r1, sp
    db7c:	ebfffeec 	bl	d734 <CString::PutString(char const*)>
    db80:	e2855001 	add	r5, r5, #1
    db84:	e5d51000 	ldrb	r1, [r5]
    db88:	e3510000 	cmp	r1, #0
    db8c:	1affff97 	bne	d9f0 <CString::FormatV(char const*, std::__va_list)+0x44>
    db90:	e596300c 	ldr	r3, [r6, #12]
    db94:	e5c31000 	strb	r1, [r3]
    db98:	e28dd018 	add	sp, sp, #24
    db9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dba0:	e2877007 	add	r7, r7, #7
    dba4:	e3c77007 	bic	r7, r7, #7
    dba8:	ed970b00 	vldr	d0, [r7]
    dbac:	e1a01002 	mov	r1, r2
    dbb0:	e1a0000d 	mov	r0, sp
    dbb4:	ebffff22 	bl	d844 <CString::ftoa(char*, double, unsigned int)>
    dbb8:	e1a0000d 	mov	r0, sp
    dbbc:	ebfff414 	bl	ac14 <strlen>
    dbc0:	e3580000 	cmp	r8, #0
    dbc4:	e2877008 	add	r7, r7, #8
    dbc8:	e1a09000 	mov	r9, r0
    dbcc:	1a00009d 	bne	de48 <CString::FormatV(char const*, std::__va_list)+0x49c>
    dbd0:	e1500004 	cmp	r0, r4
    dbd4:	2affffe6 	bcs	db74 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    dbd8:	ea00000e 	b	dc18 <CString::FormatV(char const*, std::__va_list)+0x26c>
    dbdc:	e5971000 	ldr	r1, [r7]
    dbe0:	e2877004 	add	r7, r7, #4
    dbe4:	e3510000 	cmp	r1, #0
    dbe8:	ba00007a 	blt	ddd8 <CString::FormatV(char const*, std::__va_list)+0x42c>
    dbec:	e3a0200a 	mov	r2, #10
    dbf0:	e3a03000 	mov	r3, #0
    dbf4:	e1a0000d 	mov	r0, sp
    dbf8:	ebfffee1 	bl	d784 <CString::ntoa(char*, unsigned long, unsigned int, int)>
    dbfc:	e1a0000d 	mov	r0, sp
    dc00:	ebfff403 	bl	ac14 <strlen>
    dc04:	e3580000 	cmp	r8, #0
    dc08:	e1a09000 	mov	r9, r0
    dc0c:	1a00007f 	bne	de10 <CString::FormatV(char const*, std::__va_list)+0x464>
    dc10:	e1540000 	cmp	r4, r0
    dc14:	9affffd6 	bls	db74 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    dc18:	e0692004 	rsb	r2, r9, r4
    dc1c:	e1a00006 	mov	r0, r6
    dc20:	e3a01020 	mov	r1, #32
    dc24:	ebfffeb2 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dc28:	eaffffd1 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    dc2c:	e3580000 	cmp	r8, #0
    dc30:	e2878004 	add	r8, r7, #4
    dc34:	e5d77000 	ldrb	r7, [r7]
    dc38:	1a000096 	bne	de98 <CString::FormatV(char const*, std::__va_list)+0x4ec>
    dc3c:	e3540001 	cmp	r4, #1
    dc40:	9a000003 	bls	dc54 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    dc44:	e2442001 	sub	r2, r4, #1
    dc48:	e1a00006 	mov	r0, r6
    dc4c:	e3a01020 	mov	r1, #32
    dc50:	ebfffea7 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dc54:	e6af1077 	sxtb	r1, r7
    dc58:	e1a00006 	mov	r0, r6
    dc5c:	e3a02001 	mov	r2, #1
    dc60:	e1a07008 	mov	r7, r8
    dc64:	ebfffea2 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dc68:	eaffffc4 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    dc6c:	e5979000 	ldr	r9, [r7]
    dc70:	e2877004 	add	r7, r7, #4
    dc74:	e1a00009 	mov	r0, r9
    dc78:	ebfff3e5 	bl	ac14 <strlen>
    dc7c:	e3580000 	cmp	r8, #0
    dc80:	e1a0a000 	mov	sl, r0
    dc84:	1a000079 	bne	de70 <CString::FormatV(char const*, std::__va_list)+0x4c4>
    dc88:	e1500004 	cmp	r0, r4
    dc8c:	3a00008e 	bcc	decc <CString::FormatV(char const*, std::__va_list)+0x520>
    dc90:	e1a01009 	mov	r1, r9
    dc94:	e1a00006 	mov	r0, r6
    dc98:	ebfffea5 	bl	d734 <CString::PutString(char const*)>
    dc9c:	eaffffb7 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    dca0:	e1a00006 	mov	r0, r6
    dca4:	e3a01025 	mov	r1, #37	; 0x25
    dca8:	e3a02001 	mov	r2, #1
    dcac:	ebfffe90 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dcb0:	e1a00006 	mov	r0, r6
    dcb4:	e1d510d0 	ldrsb	r1, [r5]
    dcb8:	e3a02001 	mov	r2, #1
    dcbc:	ebfffe8c 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dcc0:	eaffffae 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    dcc4:	e1a00006 	mov	r0, r6
    dcc8:	e3a02001 	mov	r2, #1
    dccc:	ebfffe88 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dcd0:	eaffffaa 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    dcd4:	e1d530d1 	ldrsb	r3, [r5, #1]
    dcd8:	e2855001 	add	r5, r5, #1
    dcdc:	e2431058 	sub	r1, r3, #88	; 0x58
    dce0:	e3510020 	cmp	r1, #32
    dce4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    dce8:	eaffffec 	b	dca0 <CString::FormatV(char const*, std::__va_list)+0x2f4>
    dcec:	0000dd74 	.word	0x0000dd74
    dcf0:	0000dca0 	.word	0x0000dca0
    dcf4:	0000dca0 	.word	0x0000dca0
    dcf8:	0000dca0 	.word	0x0000dca0
    dcfc:	0000dca0 	.word	0x0000dca0
    dd00:	0000dca0 	.word	0x0000dca0
    dd04:	0000dca0 	.word	0x0000dca0
    dd08:	0000dca0 	.word	0x0000dca0
    dd0c:	0000dca0 	.word	0x0000dca0
    dd10:	0000dca0 	.word	0x0000dca0
    dd14:	0000dca0 	.word	0x0000dca0
    dd18:	0000dc2c 	.word	0x0000dc2c
    dd1c:	0000dbdc 	.word	0x0000dbdc
    dd20:	0000dca0 	.word	0x0000dca0
    dd24:	0000dba0 	.word	0x0000dba0
    dd28:	0000dca0 	.word	0x0000dca0
    dd2c:	0000dca0 	.word	0x0000dca0
    dd30:	0000dca0 	.word	0x0000dca0
    dd34:	0000dca0 	.word	0x0000dca0
    dd38:	0000dca0 	.word	0x0000dca0
    dd3c:	0000dca0 	.word	0x0000dca0
    dd40:	0000dca0 	.word	0x0000dca0
    dd44:	0000dca0 	.word	0x0000dca0
    dd48:	0000db1c 	.word	0x0000db1c
    dd4c:	0000dca0 	.word	0x0000dca0
    dd50:	0000dca0 	.word	0x0000dca0
    dd54:	0000dca0 	.word	0x0000dca0
    dd58:	0000dc6c 	.word	0x0000dc6c
    dd5c:	0000dca0 	.word	0x0000dca0
    dd60:	0000de40 	.word	0x0000de40
    dd64:	0000dca0 	.word	0x0000dca0
    dd68:	0000dca0 	.word	0x0000dca0
    dd6c:	0000dd74 	.word	0x0000dd74
    dd70:	e6af3073 	sxtb	r3, r3
    dd74:	e3a02010 	mov	r2, #16
    dd78:	eaffff69 	b	db24 <CString::FormatV(char const*, std::__va_list)+0x178>
    dd7c:	e5d53001 	ldrb	r3, [r5, #1]
    dd80:	e2855001 	add	r5, r5, #1
    dd84:	e2432030 	sub	r2, r3, #48	; 0x30
    dd88:	e3520009 	cmp	r2, #9
    dd8c:	e3a02000 	mov	r2, #0
    dd90:	8affff39 	bhi	da7c <CString::FormatV(char const*, std::__va_list)+0xd0>
    dd94:	e6af0073 	sxtb	r0, r3
    dd98:	e5f53001 	ldrb	r3, [r5, #1]!
    dd9c:	e0822102 	add	r2, r2, r2, lsl #2
    dda0:	e243c030 	sub	ip, r3, #48	; 0x30
    dda4:	e0802082 	add	r2, r0, r2, lsl #1
    dda8:	e35c0009 	cmp	ip, #9
    ddac:	e2422030 	sub	r2, r2, #48	; 0x30
    ddb0:	9afffff7 	bls	dd94 <CString::FormatV(char const*, std::__va_list)+0x3e8>
    ddb4:	eaffff30 	b	da7c <CString::FormatV(char const*, std::__va_list)+0xd0>
    ddb8:	e1a00006 	mov	r0, r6
    ddbc:	e3a02001 	mov	r2, #1
    ddc0:	e2855002 	add	r5, r5, #2
    ddc4:	ebfffe4a 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    ddc8:	eaffff05 	b	d9e4 <CString::FormatV(char const*, std::__va_list)+0x38>
    ddcc:	e3a0200a 	mov	r2, #10
    ddd0:	e3a03075 	mov	r3, #117	; 0x75
    ddd4:	eaffff52 	b	db24 <CString::FormatV(char const*, std::__va_list)+0x178>
    ddd8:	e2611000 	rsb	r1, r1, #0
    dddc:	e3a0200a 	mov	r2, #10
    dde0:	e3a03000 	mov	r3, #0
    dde4:	e1a0000d 	mov	r0, sp
    dde8:	ebfffe65 	bl	d784 <CString::ntoa(char*, unsigned long, unsigned int, int)>
    ddec:	e1a0000d 	mov	r0, sp
    ddf0:	ebfff387 	bl	ac14 <strlen>
    ddf4:	e3580000 	cmp	r8, #0
    ddf8:	e2809001 	add	r9, r0, #1
    ddfc:	0a000037 	beq	dee0 <CString::FormatV(char const*, std::__va_list)+0x534>
    de00:	e1a00006 	mov	r0, r6
    de04:	e3a0102d 	mov	r1, #45	; 0x2d
    de08:	e3a02001 	mov	r2, #1
    de0c:	ebfffe38 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    de10:	e1a00006 	mov	r0, r6
    de14:	e1a0100d 	mov	r1, sp
    de18:	ebfffe45 	bl	d734 <CString::PutString(char const*)>
    de1c:	e1540009 	cmp	r4, r9
    de20:	9affff56 	bls	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de24:	ea00000c 	b	de5c <CString::FormatV(char const*, std::__va_list)+0x4b0>
    de28:	e1a00006 	mov	r0, r6
    de2c:	e1a0100d 	mov	r1, sp
    de30:	ebfffe3f 	bl	d734 <CString::PutString(char const*)>
    de34:	e15a0004 	cmp	sl, r4
    de38:	2affff50 	bcs	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de3c:	ea000010 	b	de84 <CString::FormatV(char const*, std::__va_list)+0x4d8>
    de40:	e3a0200a 	mov	r2, #10
    de44:	eaffff36 	b	db24 <CString::FormatV(char const*, std::__va_list)+0x178>
    de48:	e1a00006 	mov	r0, r6
    de4c:	e1a0100d 	mov	r1, sp
    de50:	ebfffe37 	bl	d734 <CString::PutString(char const*)>
    de54:	e1590004 	cmp	r9, r4
    de58:	2affff48 	bcs	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de5c:	e0692004 	rsb	r2, r9, r4
    de60:	e1a00006 	mov	r0, r6
    de64:	e3a01020 	mov	r1, #32
    de68:	ebfffe21 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    de6c:	eaffff43 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de70:	e1a01009 	mov	r1, r9
    de74:	e1a00006 	mov	r0, r6
    de78:	ebfffe2d 	bl	d734 <CString::PutString(char const*)>
    de7c:	e15a0004 	cmp	sl, r4
    de80:	2affff3e 	bcs	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de84:	e06a2004 	rsb	r2, sl, r4
    de88:	e1a00006 	mov	r0, r6
    de8c:	e3a01020 	mov	r1, #32
    de90:	ebfffe17 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    de94:	eaffff39 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    de98:	e6af1077 	sxtb	r1, r7
    de9c:	e1a00006 	mov	r0, r6
    dea0:	e3a02001 	mov	r2, #1
    dea4:	ebfffe12 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dea8:	e3540001 	cmp	r4, #1
    deac:	91a07008 	movls	r7, r8
    deb0:	9affff32 	bls	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    deb4:	e2442001 	sub	r2, r4, #1
    deb8:	e1a00006 	mov	r0, r6
    debc:	e3a01020 	mov	r1, #32
    dec0:	e1a07008 	mov	r7, r8
    dec4:	ebfffe0a 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dec8:	eaffff2c 	b	db80 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    decc:	e0602004 	rsb	r2, r0, r4
    ded0:	e3a01020 	mov	r1, #32
    ded4:	e1a00006 	mov	r0, r6
    ded8:	ebfffe05 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    dedc:	eaffff6b 	b	dc90 <CString::FormatV(char const*, std::__va_list)+0x2e4>
    dee0:	e1540009 	cmp	r4, r9
    dee4:	8a000004 	bhi	defc <CString::FormatV(char const*, std::__va_list)+0x550>
    dee8:	e1a00006 	mov	r0, r6
    deec:	e3a0102d 	mov	r1, #45	; 0x2d
    def0:	e3a02001 	mov	r2, #1
    def4:	ebfffdfe 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    def8:	eaffff1d 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    defc:	e0692004 	rsb	r2, r9, r4
    df00:	e1a00006 	mov	r0, r6
    df04:	e3a01020 	mov	r1, #32
    df08:	ebfffdf9 	bl	d6f4 <CString::PutChar(char, unsigned int)>
    df0c:	eafffff5 	b	dee8 <CString::FormatV(char const*, std::__va_list)+0x53c>

0000df10 <CString::Format(char const*, ...)>:
    df10:	e92d000e 	push	{r1, r2, r3}
    df14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df18:	e24dd008 	sub	sp, sp, #8
    df1c:	e28d3010 	add	r3, sp, #16
    df20:	e1a02003 	mov	r2, r3
    df24:	e59d100c 	ldr	r1, [sp, #12]
    df28:	e58d3004 	str	r3, [sp, #4]
    df2c:	ebfffe9e 	bl	d9ac <CString::FormatV(char const*, std::__va_list)>
    df30:	e28dd008 	add	sp, sp, #8
    df34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    df38:	e28dd00c 	add	sp, sp, #12
    df3c:	e12fff1e 	bx	lr

0000df40 <DelayLoop>:
    df40:	e2500001 	subs	r0, r0, #1
    df44:	8afffffd 	bhi	df40 <DelayLoop>
    df48:	e1a0f00e 	mov	pc, lr
    df4c:	e1a00000 	nop			; (mov r0, r0)

0000df50 <CInterruptSystem::CInterruptSystem()>:
    df50:	e280cf47 	add	ip, r0, #284	; 0x11c
    df54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df58:	e1a0100c 	mov	r1, ip
    df5c:	e1a0e000 	mov	lr, r0
    df60:	e3a02000 	mov	r2, #0
    df64:	e2403004 	sub	r3, r0, #4
    df68:	e5a32004 	str	r2, [r3, #4]!
    df6c:	e153000c 	cmp	r3, ip
    df70:	e5a12004 	str	r2, [r1, #4]!
    df74:	1afffffb 	bne	df68 <CInterruptSystem::CInterruptSystem()+0x18>
    df78:	e59f3008 	ldr	r3, [pc, #8]	; df88 <CInterruptSystem::CInterruptSystem()+0x38>
    df7c:	e1a0000e 	mov	r0, lr
    df80:	e583e000 	str	lr, [r3]
    df84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    df88:	00051014 	.word	0x00051014

0000df8c <CInterruptSystem::~CInterruptSystem()>:
    df8c:	e3a02000 	mov	r2, #0
    df90:	e59f3004 	ldr	r3, [pc, #4]	; df9c <CInterruptSystem::~CInterruptSystem()+0x10>
    df94:	e5832000 	str	r2, [r3]
    df98:	e12fff1e 	bx	lr
    df9c:	00051014 	.word	0x00051014

0000dfa0 <CInterruptSystem::Initialize()>:
    dfa0:	e92d4010 	push	{r4, lr}
    dfa4:	e3a04000 	mov	r4, #0
    dfa8:	e59f303c 	ldr	r3, [pc, #60]	; dfec <CInterruptSystem::Initialize()+0x4c>
    dfac:	e1a03143 	asr	r3, r3, #2
    dfb0:	e2433002 	sub	r3, r3, #2
    dfb4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    dfb8:	e5843018 	str	r3, [r4, #24]
    dfbc:	ebffefbe 	bl	9ebc <SyncDataAndInstructionCache>
    dfc0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    dfc4:	e3e02000 	mvn	r2, #0
    dfc8:	e59f3020 	ldr	r3, [pc, #32]	; dff0 <CInterruptSystem::Initialize()+0x50>
    dfcc:	e583420c 	str	r4, [r3, #524]	; 0x20c
    dfd0:	e583221c 	str	r2, [r3, #540]	; 0x21c
    dfd4:	e5832220 	str	r2, [r3, #544]	; 0x220
    dfd8:	e5832224 	str	r2, [r3, #548]	; 0x224
    dfdc:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    dfe0:	f1080080 	cpsie	i
    dfe4:	e3a00001 	mov	r0, #1
    dfe8:	e8bd8010 	pop	{r4, pc}
    dfec:	0000fc58 	.word	0x0000fc58
    dff0:	2000b000 	.word	0x2000b000

0000dff4 <CInterruptSystem::EnableIRQ(unsigned int)>:
    dff4:	e92d4010 	push	{r4, lr}
    dff8:	e3a03000 	mov	r3, #0
    dffc:	e1a04000 	mov	r4, r0
    e000:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e004:	e3500047 	cmp	r0, #71	; 0x47
    e008:	8a00000e 	bhi	e048 <CInterruptSystem::EnableIRQ(unsigned int)+0x54>
    e00c:	e350001f 	cmp	r0, #31
    e010:	8a000007 	bhi	e034 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    e014:	e59f2044 	ldr	r2, [pc, #68]	; e060 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    e018:	e3a03001 	mov	r3, #1
    e01c:	e204401f 	and	r4, r4, #31
    e020:	e1a04413 	lsl	r4, r3, r4
    e024:	e5824000 	str	r4, [r2]
    e028:	e3a03000 	mov	r3, #0
    e02c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e030:	e8bd8010 	pop	{r4, pc}
    e034:	e59f3028 	ldr	r3, [pc, #40]	; e064 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    e038:	e350003f 	cmp	r0, #63	; 0x3f
    e03c:	e59f2024 	ldr	r2, [pc, #36]	; e068 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    e040:	91a02003 	movls	r2, r3
    e044:	eafffff3 	b	e018 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    e048:	e3a02074 	mov	r2, #116	; 0x74
    e04c:	e59f0018 	ldr	r0, [pc, #24]	; e06c <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    e050:	e59f1018 	ldr	r1, [pc, #24]	; e070 <CInterruptSystem::EnableIRQ(unsigned int)+0x7c>
    e054:	ebfffa95 	bl	cab0 <assertion_failed>
    e058:	e59f2008 	ldr	r2, [pc, #8]	; e068 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    e05c:	eaffffed 	b	e018 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    e060:	2000b210 	.word	0x2000b210
    e064:	2000b214 	.word	0x2000b214
    e068:	2000b218 	.word	0x2000b218
    e06c:	00011654 	.word	0x00011654
    e070:	00011668 	.word	0x00011668

0000e074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    e074:	e3510047 	cmp	r1, #71	; 0x47
    e078:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e07c:	e1a04001 	mov	r4, r1
    e080:	e1a05000 	mov	r5, r0
    e084:	e1a08002 	mov	r8, r2
    e088:	e1a07003 	mov	r7, r3
    e08c:	8a00000c 	bhi	e0c4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    e090:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e094:	e0856104 	add	r6, r5, r4, lsl #2
    e098:	e3530000 	cmp	r3, #0
    e09c:	0a000003 	beq	e0b0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    e0a0:	e59f0030 	ldr	r0, [pc, #48]	; e0d8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    e0a4:	e59f1030 	ldr	r1, [pc, #48]	; e0dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    e0a8:	e3a0205d 	mov	r2, #93	; 0x5d
    e0ac:	ebfffa7f 	bl	cab0 <assertion_failed>
    e0b0:	e7858104 	str	r8, [r5, r4, lsl #2]
    e0b4:	e1a00004 	mov	r0, r4
    e0b8:	e5867120 	str	r7, [r6, #288]	; 0x120
    e0bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e0c0:	eaffffcb 	b	dff4 <CInterruptSystem::EnableIRQ(unsigned int)>
    e0c4:	e59f0014 	ldr	r0, [pc, #20]	; e0e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    e0c8:	e59f100c 	ldr	r1, [pc, #12]	; e0dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    e0cc:	e3a0205c 	mov	r2, #92	; 0x5c
    e0d0:	ebfffa76 	bl	cab0 <assertion_failed>
    e0d4:	eaffffed 	b	e090 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    e0d8:	00011678 	.word	0x00011678
    e0dc:	00011668 	.word	0x00011668
    e0e0:	00011654 	.word	0x00011654

0000e0e4 <CInterruptSystem::DisableIRQ(unsigned int)>:
    e0e4:	e92d4010 	push	{r4, lr}
    e0e8:	e3a03000 	mov	r3, #0
    e0ec:	e1a04000 	mov	r4, r0
    e0f0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e0f4:	e3500047 	cmp	r0, #71	; 0x47
    e0f8:	8a00000e 	bhi	e138 <CInterruptSystem::DisableIRQ(unsigned int)+0x54>
    e0fc:	e350001f 	cmp	r0, #31
    e100:	8a000007 	bhi	e124 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    e104:	e59f2044 	ldr	r2, [pc, #68]	; e150 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    e108:	e3a03001 	mov	r3, #1
    e10c:	e204401f 	and	r4, r4, #31
    e110:	e1a04413 	lsl	r4, r3, r4
    e114:	e5824000 	str	r4, [r2]
    e118:	e3a03000 	mov	r3, #0
    e11c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e120:	e8bd8010 	pop	{r4, pc}
    e124:	e59f3028 	ldr	r3, [pc, #40]	; e154 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    e128:	e350003f 	cmp	r0, #63	; 0x3f
    e12c:	e59f2024 	ldr	r2, [pc, #36]	; e158 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    e130:	91a02003 	movls	r2, r3
    e134:	eafffff3 	b	e108 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    e138:	e3a0207f 	mov	r2, #127	; 0x7f
    e13c:	e59f0018 	ldr	r0, [pc, #24]	; e15c <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    e140:	e59f1018 	ldr	r1, [pc, #24]	; e160 <CInterruptSystem::DisableIRQ(unsigned int)+0x7c>
    e144:	ebfffa59 	bl	cab0 <assertion_failed>
    e148:	e59f2008 	ldr	r2, [pc, #8]	; e158 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    e14c:	eaffffed 	b	e108 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    e150:	2000b21c 	.word	0x2000b21c
    e154:	2000b220 	.word	0x2000b220
    e158:	2000b224 	.word	0x2000b224
    e15c:	00011654 	.word	0x00011654
    e160:	00011668 	.word	0x00011668

0000e164 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    e164:	e3510047 	cmp	r1, #71	; 0x47
    e168:	e92d4070 	push	{r4, r5, r6, lr}
    e16c:	e1a04001 	mov	r4, r1
    e170:	e1a05000 	mov	r5, r0
    e174:	8a000009 	bhi	e1a0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    e178:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e17c:	e0856104 	add	r6, r5, r4, lsl #2
    e180:	e3530000 	cmp	r3, #0
    e184:	0a00000d 	beq	e1c0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    e188:	e1a00004 	mov	r0, r4
    e18c:	ebffffd4 	bl	e0e4 <CInterruptSystem::DisableIRQ(unsigned int)>
    e190:	e3a03000 	mov	r3, #0
    e194:	e7853104 	str	r3, [r5, r4, lsl #2]
    e198:	e5863120 	str	r3, [r6, #288]	; 0x120
    e19c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e1a0:	e59f002c 	ldr	r0, [pc, #44]	; e1d4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    e1a4:	e59f102c 	ldr	r1, [pc, #44]	; e1d8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    e1a8:	e3a02067 	mov	r2, #103	; 0x67
    e1ac:	ebfffa3f 	bl	cab0 <assertion_failed>
    e1b0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e1b4:	e0856104 	add	r6, r5, r4, lsl #2
    e1b8:	e3530000 	cmp	r3, #0
    e1bc:	1afffff1 	bne	e188 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e1c0:	e59f0014 	ldr	r0, [pc, #20]	; e1dc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    e1c4:	e59f100c 	ldr	r1, [pc, #12]	; e1d8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    e1c8:	e3a02068 	mov	r2, #104	; 0x68
    e1cc:	ebfffa37 	bl	cab0 <assertion_failed>
    e1d0:	eaffffec 	b	e188 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e1d4:	00011654 	.word	0x00011654
    e1d8:	00011668 	.word	0x00011668
    e1dc:	00011694 	.word	0x00011694

0000e1e0 <CInterruptSystem::Get()>:
    e1e0:	e92d4010 	push	{r4, lr}
    e1e4:	e59f4020 	ldr	r4, [pc, #32]	; e20c <CInterruptSystem::Get()+0x2c>
    e1e8:	e5940000 	ldr	r0, [r4]
    e1ec:	e3500000 	cmp	r0, #0
    e1f0:	18bd8010 	popne	{r4, pc}
    e1f4:	e59f0014 	ldr	r0, [pc, #20]	; e210 <CInterruptSystem::Get()+0x30>
    e1f8:	e59f1014 	ldr	r1, [pc, #20]	; e214 <CInterruptSystem::Get()+0x34>
    e1fc:	e3a02088 	mov	r2, #136	; 0x88
    e200:	ebfffa2a 	bl	cab0 <assertion_failed>
    e204:	e5940000 	ldr	r0, [r4]
    e208:	e8bd8010 	pop	{r4, pc}
    e20c:	00051014 	.word	0x00051014
    e210:	0001058c 	.word	0x0001058c
    e214:	00011668 	.word	0x00011668

0000e218 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    e218:	e3510047 	cmp	r1, #71	; 0x47
    e21c:	e92d4070 	push	{r4, r5, r6, lr}
    e220:	e1a06001 	mov	r6, r1
    e224:	e1a05000 	mov	r5, r0
    e228:	8a000007 	bhi	e24c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    e22c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e230:	e0855106 	add	r5, r5, r6, lsl #2
    e234:	e3540000 	cmp	r4, #0
    e238:	0a00000b 	beq	e26c <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    e23c:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    e240:	e12fff34 	blx	r4
    e244:	e3a00001 	mov	r0, #1
    e248:	e8bd8070 	pop	{r4, r5, r6, pc}
    e24c:	e59f0028 	ldr	r0, [pc, #40]	; e27c <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    e250:	e59f1028 	ldr	r1, [pc, #40]	; e280 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    e254:	e3a0208e 	mov	r2, #142	; 0x8e
    e258:	ebfffa14 	bl	cab0 <assertion_failed>
    e25c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e260:	e0855106 	add	r5, r5, r6, lsl #2
    e264:	e3540000 	cmp	r4, #0
    e268:	1afffff3 	bne	e23c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    e26c:	e1a00006 	mov	r0, r6
    e270:	ebffff9b 	bl	e0e4 <CInterruptSystem::DisableIRQ(unsigned int)>
    e274:	e1a00004 	mov	r0, r4
    e278:	e8bd8070 	pop	{r4, r5, r6, pc}
    e27c:	00011654 	.word	0x00011654
    e280:	00011668 	.word	0x00011668

0000e284 <CInterruptSystem::InterruptHandler()>:
    e284:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e288:	e59f70a0 	ldr	r7, [pc, #160]	; e330 <CInterruptSystem::InterruptHandler()+0xac>
    e28c:	e24dd014 	sub	sp, sp, #20
    e290:	e5973000 	ldr	r3, [r7]
    e294:	e3530000 	cmp	r3, #0
    e298:	0a00001f 	beq	e31c <CInterruptSystem::InterruptHandler()+0x98>
    e29c:	e3a06000 	mov	r6, #0
    e2a0:	e59f308c 	ldr	r3, [pc, #140]	; e334 <CInterruptSystem::InterruptHandler()+0xb0>
    e2a4:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    e2a8:	e58d2004 	str	r2, [sp, #4]
    e2ac:	e1a04002 	mov	r4, r2
    e2b0:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    e2b4:	e58d2008 	str	r2, [sp, #8]
    e2b8:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    e2bc:	e6ef3073 	uxtb	r3, r3
    e2c0:	e58d300c 	str	r3, [sp, #12]
    e2c4:	e3540000 	cmp	r4, #0
    e2c8:	0a00000d 	beq	e304 <CInterruptSystem::InterruptHandler()+0x80>
    e2cc:	e1a05286 	lsl	r5, r6, #5
    e2d0:	ea000002 	b	e2e0 <CInterruptSystem::InterruptHandler()+0x5c>
    e2d4:	e1b040a4 	lsrs	r4, r4, #1
    e2d8:	e2855001 	add	r5, r5, #1
    e2dc:	0a000008 	beq	e304 <CInterruptSystem::InterruptHandler()+0x80>
    e2e0:	e3140001 	tst	r4, #1
    e2e4:	0afffffa 	beq	e2d4 <CInterruptSystem::InterruptHandler()+0x50>
    e2e8:	e5970000 	ldr	r0, [r7]
    e2ec:	e1a01005 	mov	r1, r5
    e2f0:	ebffffc8 	bl	e218 <CInterruptSystem::CallIRQHandler(unsigned int)>
    e2f4:	e3500000 	cmp	r0, #0
    e2f8:	0afffff5 	beq	e2d4 <CInterruptSystem::InterruptHandler()+0x50>
    e2fc:	e28dd014 	add	sp, sp, #20
    e300:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e304:	e2866001 	add	r6, r6, #1
    e308:	e3560003 	cmp	r6, #3
    e30c:	0afffffa 	beq	e2fc <CInterruptSystem::InterruptHandler()+0x78>
    e310:	e28d3004 	add	r3, sp, #4
    e314:	e7934106 	ldr	r4, [r3, r6, lsl #2]
    e318:	eaffffe9 	b	e2c4 <CInterruptSystem::InterruptHandler()+0x40>
    e31c:	e59f0014 	ldr	r0, [pc, #20]	; e338 <CInterruptSystem::InterruptHandler()+0xb4>
    e320:	e59f1014 	ldr	r1, [pc, #20]	; e33c <CInterruptSystem::InterruptHandler()+0xb8>
    e324:	e3a020a1 	mov	r2, #161	; 0xa1
    e328:	ebfff9e0 	bl	cab0 <assertion_failed>
    e32c:	eaffffda 	b	e29c <CInterruptSystem::InterruptHandler()+0x18>
    e330:	00051014 	.word	0x00051014
    e334:	2000b000 	.word	0x2000b000
    e338:	0001058c 	.word	0x0001058c
    e33c:	00011668 	.word	0x00011668

0000e340 <InterruptHandler>:
    e340:	e92d4010 	push	{r4, lr}
    e344:	e3a04000 	mov	r4, #0
    e348:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    e34c:	ebffffcc 	bl	e284 <CInterruptSystem::InterruptHandler()>
    e350:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    e354:	e8bd8010 	pop	{r4, pc}

0000e358 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    e358:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e35c:	e3a0e000 	mov	lr, #0
    e360:	e1a03000 	mov	r3, r0
    e364:	e1a0c00e 	mov	ip, lr
    e368:	e5801000 	str	r1, [r0]
    e36c:	e28020dc 	add	r2, r0, #220	; 0xdc
    e370:	e5a3e004 	str	lr, [r3, #4]!
    e374:	e5a3c004 	str	ip, [r3, #4]!
    e378:	e1530002 	cmp	r3, r2
    e37c:	1afffffc 	bne	e374 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    e380:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e384 <CGPIOManager::~CGPIOManager()>:
    e384:	e92d4070 	push	{r4, r5, r6, lr}
    e388:	e1a06000 	mov	r6, r0
    e38c:	e2804004 	add	r4, r0, #4
    e390:	e28050dc 	add	r5, r0, #220	; 0xdc
    e394:	e5b43004 	ldr	r3, [r4, #4]!
    e398:	e59f0058 	ldr	r0, [pc, #88]	; e3f8 <CGPIOManager::~CGPIOManager()+0x74>
    e39c:	e3530000 	cmp	r3, #0
    e3a0:	e59f1054 	ldr	r1, [pc, #84]	; e3fc <CGPIOManager::~CGPIOManager()+0x78>
    e3a4:	0a000001 	beq	e3b0 <CGPIOManager::~CGPIOManager()+0x2c>
    e3a8:	e3a0202c 	mov	r2, #44	; 0x2c
    e3ac:	ebfff9bf 	bl	cab0 <assertion_failed>
    e3b0:	e1540005 	cmp	r4, r5
    e3b4:	1afffff6 	bne	e394 <CGPIOManager::~CGPIOManager()+0x10>
    e3b8:	e5963004 	ldr	r3, [r6, #4]
    e3bc:	e3530000 	cmp	r3, #0
    e3c0:	0a000004 	beq	e3d8 <CGPIOManager::~CGPIOManager()+0x54>
    e3c4:	e5960000 	ldr	r0, [r6]
    e3c8:	e3500000 	cmp	r0, #0
    e3cc:	0a000003 	beq	e3e0 <CGPIOManager::~CGPIOManager()+0x5c>
    e3d0:	e3a01034 	mov	r1, #52	; 0x34
    e3d4:	ebffff62 	bl	e164 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e3d8:	e1a00006 	mov	r0, r6
    e3dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3e0:	e59f0018 	ldr	r0, [pc, #24]	; e400 <CGPIOManager::~CGPIOManager()+0x7c>
    e3e4:	e59f1010 	ldr	r1, [pc, #16]	; e3fc <CGPIOManager::~CGPIOManager()+0x78>
    e3e8:	e3a02032 	mov	r2, #50	; 0x32
    e3ec:	ebfff9af 	bl	cab0 <assertion_failed>
    e3f0:	e5960000 	ldr	r0, [r6]
    e3f4:	eafffff5 	b	e3d0 <CGPIOManager::~CGPIOManager()+0x4c>
    e3f8:	000116b0 	.word	0x000116b0
    e3fc:	000116c4 	.word	0x000116c4
    e400:	000116d4 	.word	0x000116d4

0000e404 <CGPIOManager::Initialize()>:
    e404:	e5903004 	ldr	r3, [r0, #4]
    e408:	e92d4010 	push	{r4, lr}
    e40c:	e3530000 	cmp	r3, #0
    e410:	e1a04000 	mov	r4, r0
    e414:	1a000009 	bne	e440 <CGPIOManager::Initialize()+0x3c>
    e418:	e5940000 	ldr	r0, [r4]
    e41c:	e3500000 	cmp	r0, #0
    e420:	0a00000d 	beq	e45c <CGPIOManager::Initialize()+0x58>
    e424:	e3a01034 	mov	r1, #52	; 0x34
    e428:	e59f2044 	ldr	r2, [pc, #68]	; e474 <CGPIOManager::Initialize()+0x70>
    e42c:	e1a03004 	mov	r3, r4
    e430:	ebffff0f 	bl	e074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e434:	e3a00001 	mov	r0, #1
    e438:	e5840004 	str	r0, [r4, #4]
    e43c:	e8bd8010 	pop	{r4, pc}
    e440:	e59f0030 	ldr	r0, [pc, #48]	; e478 <CGPIOManager::Initialize()+0x74>
    e444:	e59f1030 	ldr	r1, [pc, #48]	; e47c <CGPIOManager::Initialize()+0x78>
    e448:	e3a0203b 	mov	r2, #59	; 0x3b
    e44c:	ebfff997 	bl	cab0 <assertion_failed>
    e450:	e5940000 	ldr	r0, [r4]
    e454:	e3500000 	cmp	r0, #0
    e458:	1afffff1 	bne	e424 <CGPIOManager::Initialize()+0x20>
    e45c:	e59f001c 	ldr	r0, [pc, #28]	; e480 <CGPIOManager::Initialize()+0x7c>
    e460:	e59f1014 	ldr	r1, [pc, #20]	; e47c <CGPIOManager::Initialize()+0x78>
    e464:	e3a0203c 	mov	r2, #60	; 0x3c
    e468:	ebfff990 	bl	cab0 <assertion_failed>
    e46c:	e5940000 	ldr	r0, [r4]
    e470:	eaffffeb 	b	e424 <CGPIOManager::Initialize()+0x20>
    e474:	0000e69c 	.word	0x0000e69c
    e478:	000116e8 	.word	0x000116e8
    e47c:	000116c4 	.word	0x000116c4
    e480:	000116d4 	.word	0x000116d4

0000e484 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    e484:	e5903004 	ldr	r3, [r0, #4]
    e488:	e92d4070 	push	{r4, r5, r6, lr}
    e48c:	e3530000 	cmp	r3, #0
    e490:	e1a04000 	mov	r4, r0
    e494:	e1a05001 	mov	r5, r1
    e498:	0a00000e 	beq	e4d8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    e49c:	e3550000 	cmp	r5, #0
    e4a0:	0a000016 	beq	e500 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
    e4a4:	e5956004 	ldr	r6, [r5, #4]
    e4a8:	e3560035 	cmp	r6, #53	; 0x35
    e4ac:	8a00000e 	bhi	e4ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
    e4b0:	e0844106 	add	r4, r4, r6, lsl #2
    e4b4:	e5943008 	ldr	r3, [r4, #8]
    e4b8:	e3530000 	cmp	r3, #0
    e4bc:	0a000003 	beq	e4d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
    e4c0:	e59f004c 	ldr	r0, [pc, #76]	; e514 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
    e4c4:	e59f104c 	ldr	r1, [pc, #76]	; e518 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e4c8:	e3a0204b 	mov	r2, #75	; 0x4b
    e4cc:	ebfff977 	bl	cab0 <assertion_failed>
    e4d0:	e5845008 	str	r5, [r4, #8]
    e4d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e4d8:	e59f003c 	ldr	r0, [pc, #60]	; e51c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
    e4dc:	e59f1034 	ldr	r1, [pc, #52]	; e518 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e4e0:	e3a02045 	mov	r2, #69	; 0x45
    e4e4:	ebfff971 	bl	cab0 <assertion_failed>
    e4e8:	eaffffeb 	b	e49c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    e4ec:	e59f002c 	ldr	r0, [pc, #44]	; e520 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
    e4f0:	e59f1020 	ldr	r1, [pc, #32]	; e518 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e4f4:	e3a02049 	mov	r2, #73	; 0x49
    e4f8:	ebfff96c 	bl	cab0 <assertion_failed>
    e4fc:	eaffffeb 	b	e4b0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    e500:	e59f001c 	ldr	r0, [pc, #28]	; e524 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
    e504:	e59f100c 	ldr	r1, [pc, #12]	; e518 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e508:	e3a02047 	mov	r2, #71	; 0x47
    e50c:	ebfff967 	bl	cab0 <assertion_failed>
    e510:	eaffffe3 	b	e4a4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
    e514:	000116b0 	.word	0x000116b0
    e518:	000116c4 	.word	0x000116c4
    e51c:	000116fc 	.word	0x000116fc
    e520:	0001036c 	.word	0x0001036c
    e524:	0001170c 	.word	0x0001170c

0000e528 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    e528:	e92d4038 	push	{r3, r4, r5, lr}
    e52c:	e5903004 	ldr	r3, [r0, #4]
    e530:	e1a04000 	mov	r4, r0
    e534:	e3530000 	cmp	r3, #0
    e538:	e1a05001 	mov	r5, r1
    e53c:	0a00000b 	beq	e570 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    e540:	e3550000 	cmp	r5, #0
    e544:	0a00001b 	beq	e5b8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
    e548:	e5955004 	ldr	r5, [r5, #4]
    e54c:	e3550035 	cmp	r5, #53	; 0x35
    e550:	8a00000b 	bhi	e584 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
    e554:	e0844105 	add	r4, r4, r5, lsl #2
    e558:	e5943008 	ldr	r3, [r4, #8]
    e55c:	e3530000 	cmp	r3, #0
    e560:	0a00000f 	beq	e5a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
    e564:	e3a03000 	mov	r3, #0
    e568:	e5843008 	str	r3, [r4, #8]
    e56c:	e8bd8038 	pop	{r3, r4, r5, pc}
    e570:	e59f0054 	ldr	r0, [pc, #84]	; e5cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
    e574:	e59f1054 	ldr	r1, [pc, #84]	; e5d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e578:	e3a02052 	mov	r2, #82	; 0x52
    e57c:	ebfff94b 	bl	cab0 <assertion_failed>
    e580:	eaffffee 	b	e540 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    e584:	e59f0048 	ldr	r0, [pc, #72]	; e5d4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
    e588:	e59f1040 	ldr	r1, [pc, #64]	; e5d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e58c:	e3a02056 	mov	r2, #86	; 0x56
    e590:	e0844105 	add	r4, r4, r5, lsl #2
    e594:	ebfff945 	bl	cab0 <assertion_failed>
    e598:	e5943008 	ldr	r3, [r4, #8]
    e59c:	e3530000 	cmp	r3, #0
    e5a0:	1affffef 	bne	e564 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e5a4:	e59f002c 	ldr	r0, [pc, #44]	; e5d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
    e5a8:	e59f1020 	ldr	r1, [pc, #32]	; e5d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e5ac:	e3a02058 	mov	r2, #88	; 0x58
    e5b0:	ebfff93e 	bl	cab0 <assertion_failed>
    e5b4:	eaffffea 	b	e564 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e5b8:	e59f001c 	ldr	r0, [pc, #28]	; e5dc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
    e5bc:	e59f100c 	ldr	r1, [pc, #12]	; e5d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e5c0:	e3a02054 	mov	r2, #84	; 0x54
    e5c4:	ebfff939 	bl	cab0 <assertion_failed>
    e5c8:	eaffffde 	b	e548 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
    e5cc:	000116fc 	.word	0x000116fc
    e5d0:	000116c4 	.word	0x000116c4
    e5d4:	0001036c 	.word	0x0001036c
    e5d8:	00011718 	.word	0x00011718
    e5dc:	0001170c 	.word	0x0001170c

0000e5e0 <CGPIOManager::InterruptHandler()>:
    e5e0:	e92d4038 	push	{r3, r4, r5, lr}
    e5e4:	e5903004 	ldr	r3, [r0, #4]
    e5e8:	e1a05000 	mov	r5, r0
    e5ec:	e3530000 	cmp	r3, #0
    e5f0:	0a00001d 	beq	e66c <CGPIOManager::InterruptHandler()+0x8c>
    e5f4:	e3a04000 	mov	r4, #0
    e5f8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    e5fc:	e59f3088 	ldr	r3, [pc, #136]	; e68c <CGPIOManager::InterruptHandler()+0xac>
    e600:	e1a02003 	mov	r2, r3
    e604:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    e608:	ea000005 	b	e624 <CGPIOManager::InterruptHandler()+0x44>
    e60c:	e2844001 	add	r4, r4, #1
    e610:	e314001f 	tst	r4, #31
    e614:	11a030a3 	lsrne	r3, r3, #1
    e618:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    e61c:	e3540036 	cmp	r4, #54	; 0x36
    e620:	0a00000e 	beq	e660 <CGPIOManager::InterruptHandler()+0x80>
    e624:	e3130001 	tst	r3, #1
    e628:	0afffff7 	beq	e60c <CGPIOManager::InterruptHandler()+0x2c>
    e62c:	e3a03001 	mov	r3, #1
    e630:	e2842002 	add	r2, r4, #2
    e634:	e7950102 	ldr	r0, [r5, r2, lsl #2]
    e638:	e204501f 	and	r5, r4, #31
    e63c:	e3500000 	cmp	r0, #0
    e640:	e1a05513 	lsl	r5, r3, r5
    e644:	0a00000d 	beq	e680 <CGPIOManager::InterruptHandler()+0xa0>
    e648:	ebffec9a 	bl	98b8 <CGPIOPin::InterruptHandler()>
    e64c:	e59f303c 	ldr	r3, [pc, #60]	; e690 <CGPIOManager::InterruptHandler()+0xb0>
    e650:	e1a042a4 	lsr	r4, r4, #5
    e654:	e0843003 	add	r3, r4, r3
    e658:	e1a03103 	lsl	r3, r3, #2
    e65c:	e5835000 	str	r5, [r3]
    e660:	e3a03000 	mov	r3, #0
    e664:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e668:	e8bd8038 	pop	{r3, r4, r5, pc}
    e66c:	e59f0020 	ldr	r0, [pc, #32]	; e694 <CGPIOManager::InterruptHandler()+0xb4>
    e670:	e59f1020 	ldr	r1, [pc, #32]	; e698 <CGPIOManager::InterruptHandler()+0xb8>
    e674:	e3a0205e 	mov	r2, #94	; 0x5e
    e678:	ebfff90c 	bl	cab0 <assertion_failed>
    e67c:	eaffffdc 	b	e5f4 <CGPIOManager::InterruptHandler()+0x14>
    e680:	e1a00004 	mov	r0, r4
    e684:	ebffecb8 	bl	996c <CGPIOPin::DisableAllInterrupts(unsigned int)>
    e688:	eaffffef 	b	e64c <CGPIOManager::InterruptHandler()+0x6c>
    e68c:	20200000 	.word	0x20200000
    e690:	08080010 	.word	0x08080010
    e694:	000116fc 	.word	0x000116fc
    e698:	000116c4 	.word	0x000116c4

0000e69c <CGPIOManager::InterruptStub(void*)>:
    e69c:	e92d4010 	push	{r4, lr}
    e6a0:	e2504000 	subs	r4, r0, #0
    e6a4:	0a000002 	beq	e6b4 <CGPIOManager::InterruptStub(void*)+0x18>
    e6a8:	e1a00004 	mov	r0, r4
    e6ac:	e8bd4010 	pop	{r4, lr}
    e6b0:	eaffffca 	b	e5e0 <CGPIOManager::InterruptHandler()>
    e6b4:	e59f0014 	ldr	r0, [pc, #20]	; e6d0 <CGPIOManager::InterruptStub(void*)+0x34>
    e6b8:	e59f1014 	ldr	r1, [pc, #20]	; e6d4 <CGPIOManager::InterruptStub(void*)+0x38>
    e6bc:	e3a0208a 	mov	r2, #138	; 0x8a
    e6c0:	ebfff8fa 	bl	cab0 <assertion_failed>
    e6c4:	e1a00004 	mov	r0, r4
    e6c8:	e8bd4010 	pop	{r4, lr}
    e6cc:	eaffffc3 	b	e5e0 <CGPIOManager::InterruptHandler()>
    e6d0:	0001172c 	.word	0x0001172c
    e6d4:	000116c4 	.word	0x000116c4

0000e6d8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e6d8:	e12fff1e 	bx	lr

0000e6dc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e6dc:	e92d4010 	push	{r4, lr}
    e6e0:	e1a04000 	mov	r4, r0
    e6e4:	ebffedba 	bl	9dd4 <operator delete(void*)>
    e6e8:	e1a00004 	mov	r0, r4
    e6ec:	e8bd8010 	pop	{r4, pc}

0000e6f0 <CVirtualGPIOPin::Write(unsigned int)>:
    e6f0:	e5903004 	ldr	r3, [r0, #4]
    e6f4:	e3530001 	cmp	r3, #1
    e6f8:	812fff1e 	bxhi	lr
    e6fc:	e3510001 	cmp	r1, #1
    e700:	93a03000 	movls	r3, #0
    e704:	83a03001 	movhi	r3, #1
    e708:	e92d4070 	push	{r4, r5, r6, lr}
    e70c:	e59f60a8 	ldr	r6, [pc, #168]	; e7bc <CVirtualGPIOPin::Write(unsigned int)+0xcc>
    e710:	e5962000 	ldr	r2, [r6]
    e714:	e3520000 	cmp	r2, #0
    e718:	03833001 	orreq	r3, r3, #1
    e71c:	e3530000 	cmp	r3, #0
    e720:	18bd8070 	popne	{r4, r5, r6, pc}
    e724:	e5963004 	ldr	r3, [r6, #4]
    e728:	e1a05001 	mov	r5, r1
    e72c:	e3530000 	cmp	r3, #0
    e730:	e1a04000 	mov	r4, r0
    e734:	1a000018 	bne	e79c <CVirtualGPIOPin::Write(unsigned int)+0xac>
    e738:	e1d410bc 	ldrh	r1, [r4, #12]
    e73c:	e1d430be 	ldrh	r3, [r4, #14]
    e740:	e5845008 	str	r5, [r4, #8]
    e744:	e0632001 	rsb	r2, r3, r1
    e748:	e6bf2072 	sxth	r2, r2
    e74c:	e3520000 	cmp	r2, #0
    e750:	da000013 	ble	e7a4 <CVirtualGPIOPin::Write(unsigned int)+0xb4>
    e754:	e3550000 	cmp	r5, #0
    e758:	0a000004 	beq	e770 <CVirtualGPIOPin::Write(unsigned int)+0x80>
    e75c:	e5963004 	ldr	r3, [r6, #4]
    e760:	e3530000 	cmp	r3, #0
    e764:	08bd8070 	popeq	{r4, r5, r6, pc}
    e768:	e8bd4070 	pop	{r4, r5, r6, lr}
    e76c:	eaffeda9 	b	9e18 <LeaveCritical>
    e770:	e2832001 	add	r2, r3, #1
    e774:	e6ff3072 	uxth	r3, r2
    e778:	e1c430be 	strh	r3, [r4, #14]
    e77c:	e5940004 	ldr	r0, [r4, #4]
    e780:	e5962000 	ldr	r2, [r6]
    e784:	e1833801 	orr	r3, r3, r1, lsl #16
    e788:	e7823100 	str	r3, [r2, r0, lsl #2]
    e78c:	e5963004 	ldr	r3, [r6, #4]
    e790:	e3530000 	cmp	r3, #0
    e794:	08bd8070 	popeq	{r4, r5, r6, pc}
    e798:	eafffff2 	b	e768 <CVirtualGPIOPin::Write(unsigned int)+0x78>
    e79c:	ebffed8e 	bl	9ddc <EnterCritical>
    e7a0:	eaffffe4 	b	e738 <CVirtualGPIOPin::Write(unsigned int)+0x48>
    e7a4:	e3550000 	cmp	r5, #0
    e7a8:	0affffeb 	beq	e75c <CVirtualGPIOPin::Write(unsigned int)+0x6c>
    e7ac:	e2811001 	add	r1, r1, #1
    e7b0:	e6ff1071 	uxth	r1, r1
    e7b4:	e1c410bc 	strh	r1, [r4, #12]
    e7b8:	eaffffef 	b	e77c <CVirtualGPIOPin::Write(unsigned int)+0x8c>
    e7bc:	00051018 	.word	0x00051018

0000e7c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    e7c0:	e3a03000 	mov	r3, #0
    e7c4:	e92d4030 	push	{r4, r5, lr}
    e7c8:	e59f20c8 	ldr	r2, [pc, #200]	; e898 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd8>
    e7cc:	e3510001 	cmp	r1, #1
    e7d0:	e24dd024 	sub	sp, sp, #36	; 0x24
    e7d4:	e1a04000 	mov	r4, r0
    e7d8:	e5801004 	str	r1, [r0, #4]
    e7dc:	e5802000 	str	r2, [r0]
    e7e0:	e1c030bc 	strh	r3, [r0, #12]
    e7e4:	e1c030be 	strh	r3, [r0, #14]
    e7e8:	9a000002 	bls	e7f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    e7ec:	e1a00004 	mov	r0, r4
    e7f0:	e28dd024 	add	sp, sp, #36	; 0x24
    e7f4:	e8bd8030 	pop	{r4, r5, pc}
    e7f8:	e59f509c 	ldr	r5, [pc, #156]	; e89c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xdc>
    e7fc:	e5953004 	ldr	r3, [r5, #4]
    e800:	e3530000 	cmp	r3, #0
    e804:	1a000008 	bne	e82c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
    e808:	e5953000 	ldr	r3, [r5]
    e80c:	e3530000 	cmp	r3, #0
    e810:	0a000009 	beq	e83c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x7c>
    e814:	e1a00004 	mov	r0, r4
    e818:	e3a01000 	mov	r1, #0
    e81c:	ebffffb3 	bl	e6f0 <CVirtualGPIOPin::Write(unsigned int)>
    e820:	e1a00004 	mov	r0, r4
    e824:	e28dd024 	add	sp, sp, #36	; 0x24
    e828:	e8bd8030 	pop	{r4, r5, pc}
    e82c:	ebffed6a 	bl	9ddc <EnterCritical>
    e830:	e5953000 	ldr	r3, [r5]
    e834:	e3530000 	cmp	r3, #0
    e838:	1a00000e 	bne	e878 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xb8>
    e83c:	e28d0008 	add	r0, sp, #8
    e840:	ebffe88b 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    e844:	e3a03000 	mov	r3, #0
    e848:	e28d0008 	add	r0, sp, #8
    e84c:	e58d3000 	str	r3, [sp]
    e850:	e59f1048 	ldr	r1, [pc, #72]	; e8a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe0>
    e854:	e3a03010 	mov	r3, #16
    e858:	e28d2010 	add	r2, sp, #16
    e85c:	ebffe8cc 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e860:	e3500000 	cmp	r0, #0
    e864:	159d301c 	ldrne	r3, [sp, #28]
    e868:	e28d0008 	add	r0, sp, #8
    e86c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    e870:	15853000 	strne	r3, [r5]
    e874:	ebffe884 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    e878:	e5953004 	ldr	r3, [r5, #4]
    e87c:	e3530000 	cmp	r3, #0
    e880:	0affffe3 	beq	e814 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
    e884:	ebffed63 	bl	9e18 <LeaveCritical>
    e888:	e1a00004 	mov	r0, r4
    e88c:	e3a01000 	mov	r1, #0
    e890:	ebffff96 	bl	e6f0 <CVirtualGPIOPin::Write(unsigned int)>
    e894:	eaffffe1 	b	e820 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
    e898:	00011740 	.word	0x00011740
    e89c:	00051018 	.word	0x00051018
    e8a0:	00040010 	.word	0x00040010

0000e8a4 <CVirtualGPIOPin::Invert()>:
    e8a4:	e5901008 	ldr	r1, [r0, #8]
    e8a8:	e2211001 	eor	r1, r1, #1
    e8ac:	eaffff8f 	b	e6f0 <CVirtualGPIOPin::Write(unsigned int)>

0000e8b0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    e8b0:	e3a02000 	mov	r2, #0
    e8b4:	e59f3004 	ldr	r3, [pc, #4]	; e8c0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
    e8b8:	e5832004 	str	r2, [r3, #4]
    e8bc:	e12fff1e 	bx	lr
    e8c0:	00051018 	.word	0x00051018

0000e8c4 <CMachineInfo::CMachineInfo()>:
    e8c4:	e3a03000 	mov	r3, #0
    e8c8:	e92d4030 	push	{r4, r5, lr}
    e8cc:	e3a01003 	mov	r1, #3
    e8d0:	e1a04000 	mov	r4, r0
    e8d4:	e3a0000a 	mov	r0, #10
    e8d8:	e59f219c 	ldr	r2, [pc, #412]	; ea7c <CMachineInfo::CMachineInfo()+0x1b8>
    e8dc:	e24dd024 	sub	sp, sp, #36	; 0x24
    e8e0:	e5925000 	ldr	r5, [r2]
    e8e4:	e5840004 	str	r0, [r4, #4]
    e8e8:	e1550003 	cmp	r5, r3
    e8ec:	e5841010 	str	r1, [r4, #16]
    e8f0:	e5843000 	str	r3, [r4]
    e8f4:	e5843008 	str	r3, [r4, #8]
    e8f8:	e584300c 	str	r3, [r4, #12]
    e8fc:	e5843014 	str	r3, [r4, #20]
    e900:	0a00000c 	beq	e938 <CMachineInfo::CMachineInfo()+0x74>
    e904:	e595e000 	ldr	lr, [r5]
    e908:	e595c004 	ldr	ip, [r5, #4]
    e90c:	e2850008 	add	r0, r5, #8
    e910:	e890000f 	ldm	r0, {r0, r1, r2, r3}
    e914:	e584e000 	str	lr, [r4]
    e918:	e584c004 	str	ip, [r4, #4]
    e91c:	e5840008 	str	r0, [r4, #8]
    e920:	e584100c 	str	r1, [r4, #12]
    e924:	e5842010 	str	r2, [r4, #16]
    e928:	e5843014 	str	r3, [r4, #20]
    e92c:	e1a00004 	mov	r0, r4
    e930:	e28dd024 	add	sp, sp, #36	; 0x24
    e934:	e8bd8030 	pop	{r4, r5, pc}
    e938:	e28d0008 	add	r0, sp, #8
    e93c:	e5824000 	str	r4, [r2]
    e940:	ebffe84b 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    e944:	e58d5000 	str	r5, [sp]
    e948:	e28d0008 	add	r0, sp, #8
    e94c:	e59f112c 	ldr	r1, [pc, #300]	; ea80 <CMachineInfo::CMachineInfo()+0x1bc>
    e950:	e28d2010 	add	r2, sp, #16
    e954:	e3a03010 	mov	r3, #16
    e958:	ebffe88d 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e95c:	e3500000 	cmp	r0, #0
    e960:	0a00000f 	beq	e9a4 <CMachineInfo::CMachineInfo()+0xe0>
    e964:	e59d201c 	ldr	r2, [sp, #28]
    e968:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    e96c:	e5842000 	str	r2, [r4]
    e970:	0a00000e 	beq	e9b0 <CMachineInfo::CMachineInfo()+0xec>
    e974:	e1a03005 	mov	r3, r5
    e978:	e1a00222 	lsr	r0, r2, #4
    e97c:	e59fc100 	ldr	ip, [pc, #256]	; ea84 <CMachineInfo::CMachineInfo()+0x1c0>
    e980:	e6ef0070 	uxtb	r0, r0
    e984:	e79c1005 	ldr	r1, [ip, r5]
    e988:	e59fe0f4 	ldr	lr, [pc, #244]	; ea84 <CMachineInfo::CMachineInfo()+0x1c0>
    e98c:	e1510000 	cmp	r1, r0
    e990:	0a00001c 	beq	ea08 <CMachineInfo::CMachineInfo()+0x144>
    e994:	e2833001 	add	r3, r3, #1
    e998:	e3530008 	cmp	r3, #8
    e99c:	e285500c 	add	r5, r5, #12
    e9a0:	1afffff7 	bne	e984 <CMachineInfo::CMachineInfo()+0xc0>
    e9a4:	e28d0008 	add	r0, sp, #8
    e9a8:	ebffe837 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    e9ac:	eaffffde 	b	e92c <CMachineInfo::CMachineInfo()+0x68>
    e9b0:	e59fc0d0 	ldr	ip, [pc, #208]	; ea88 <CMachineInfo::CMachineInfo()+0x1c4>
    e9b4:	e79c1203 	ldr	r1, [ip, r3, lsl #4]
    e9b8:	e59f00c4 	ldr	r0, [pc, #196]	; ea84 <CMachineInfo::CMachineInfo()+0x1c0>
    e9bc:	e1520001 	cmp	r2, r1
    e9c0:	e1a01203 	lsl	r1, r3, #4
    e9c4:	e2833001 	add	r3, r3, #1
    e9c8:	0a000002 	beq	e9d8 <CMachineInfo::CMachineInfo()+0x114>
    e9cc:	e3530011 	cmp	r3, #17
    e9d0:	1afffff7 	bne	e9b4 <CMachineInfo::CMachineInfo()+0xf0>
    e9d4:	eafffff2 	b	e9a4 <CMachineInfo::CMachineInfo()+0xe0>
    e9d8:	e3a02001 	mov	r2, #1
    e9dc:	e3a03000 	mov	r3, #0
    e9e0:	e0800001 	add	r0, r0, r1
    e9e4:	e590e064 	ldr	lr, [r0, #100]	; 0x64
    e9e8:	e590c068 	ldr	ip, [r0, #104]	; 0x68
    e9ec:	e590106c 	ldr	r1, [r0, #108]	; 0x6c
    e9f0:	e584e004 	str	lr, [r4, #4]
    e9f4:	e584c00c 	str	ip, [r4, #12]
    e9f8:	e5841014 	str	r1, [r4, #20]
    e9fc:	e5842008 	str	r2, [r4, #8]
    ea00:	e5843010 	str	r3, [r4, #16]
    ea04:	eaffffe6 	b	e9a4 <CMachineInfo::CMachineInfo()+0xe0>
    ea08:	e3a01c01 	mov	r1, #256	; 0x100
    ea0c:	e1a00622 	lsr	r0, r2, #12
    ea10:	e0833083 	add	r3, r3, r3, lsl #1
    ea14:	e1a03103 	lsl	r3, r3, #2
    ea18:	e1a0ca22 	lsr	ip, r2, #20
    ea1c:	e200000f 	and	r0, r0, #15
    ea20:	e08e5003 	add	r5, lr, r3
    ea24:	e3500002 	cmp	r0, #2
    ea28:	e2833008 	add	r3, r3, #8
    ea2c:	e20cc007 	and	ip, ip, #7
    ea30:	e79ee003 	ldr	lr, [lr, r3]
    ea34:	e202300f 	and	r3, r2, #15
    ea38:	e1a02c11 	lsl	r2, r1, ip
    ea3c:	83a01003 	movhi	r1, #3
    ea40:	e5955004 	ldr	r5, [r5, #4]
    ea44:	e5840010 	str	r0, [r4, #16]
    ea48:	85841010 	strhi	r1, [r4, #16]
    ea4c:	e3520c01 	cmp	r2, #256	; 0x100
    ea50:	03550003 	cmpeq	r5, #3
    ea54:	e2833001 	add	r3, r3, #1
    ea58:	e9844020 	stmib	r4, {r5, lr}
    ea5c:	e5842014 	str	r2, [r4, #20]
    ea60:	e584300c 	str	r3, [r4, #12]
    ea64:	1affffce 	bne	e9a4 <CMachineInfo::CMachineInfo()+0xe0>
    ea68:	e3530001 	cmp	r3, #1
    ea6c:	03a03001 	moveq	r3, #1
    ea70:	13a03002 	movne	r3, #2
    ea74:	e5843004 	str	r3, [r4, #4]
    ea78:	eaffffc9 	b	e9a4 <CMachineInfo::CMachineInfo()+0xe0>
    ea7c:	00051020 	.word	0x00051020
    ea80:	00010002 	.word	0x00010002
    ea84:	00011748 	.word	0x00011748
    ea88:	000117a8 	.word	0x000117a8

0000ea8c <CMachineInfo::~CMachineInfo()>:
    ea8c:	e3a0200a 	mov	r2, #10
    ea90:	e59f3014 	ldr	r3, [pc, #20]	; eaac <CMachineInfo::~CMachineInfo()+0x20>
    ea94:	e5802004 	str	r2, [r0, #4]
    ea98:	e5932000 	ldr	r2, [r3]
    ea9c:	e1520000 	cmp	r2, r0
    eaa0:	03a02000 	moveq	r2, #0
    eaa4:	05832000 	streq	r2, [r3]
    eaa8:	e12fff1e 	bx	lr
    eaac:	00051020 	.word	0x00051020

0000eab0 <CMachineInfo::GetMachineModel() const>:
    eab0:	e5900004 	ldr	r0, [r0, #4]
    eab4:	e12fff1e 	bx	lr

0000eab8 <CMachineInfo::GetMachineName() const>:
    eab8:	e5902004 	ldr	r2, [r0, #4]
    eabc:	e59f3008 	ldr	r3, [pc, #8]	; eacc <CMachineInfo::GetMachineName() const+0x14>
    eac0:	e0833102 	add	r3, r3, r2, lsl #2
    eac4:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    eac8:	e12fff1e 	bx	lr
    eacc:	00011748 	.word	0x00011748

0000ead0 <CMachineInfo::GetModelMajor() const>:
    ead0:	e5900008 	ldr	r0, [r0, #8]
    ead4:	e12fff1e 	bx	lr

0000ead8 <CMachineInfo::GetModelRevision() const>:
    ead8:	e590000c 	ldr	r0, [r0, #12]
    eadc:	e12fff1e 	bx	lr

0000eae0 <CMachineInfo::GetSoCType() const>:
    eae0:	e5900010 	ldr	r0, [r0, #16]
    eae4:	e12fff1e 	bx	lr

0000eae8 <CMachineInfo::GetRAMSize() const>:
    eae8:	e5900014 	ldr	r0, [r0, #20]
    eaec:	e12fff1e 	bx	lr

0000eaf0 <CMachineInfo::GetSoCName() const>:
    eaf0:	e5902010 	ldr	r2, [r0, #16]
    eaf4:	e59f3008 	ldr	r3, [pc, #8]	; eb04 <CMachineInfo::GetSoCName() const+0x14>
    eaf8:	e0833102 	add	r3, r3, r2, lsl #2
    eafc:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    eb00:	e12fff1e 	bx	lr
    eb04:	00011748 	.word	0x00011748

0000eb08 <CMachineInfo::GetRevisionRaw() const>:
    eb08:	e5900000 	ldr	r0, [r0]
    eb0c:	e12fff1e 	bx	lr

0000eb10 <CMachineInfo::GetClockRate(unsigned int) const>:
    eb10:	e92d4070 	push	{r4, r5, r6, lr}
    eb14:	e24dd028 	sub	sp, sp, #40	; 0x28
    eb18:	e1a06000 	mov	r6, r0
    eb1c:	e28d000c 	add	r0, sp, #12
    eb20:	e1a05001 	mov	r5, r1
    eb24:	ebffe7d2 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    eb28:	e3a03004 	mov	r3, #4
    eb2c:	e28d000c 	add	r0, sp, #12
    eb30:	e58d3000 	str	r3, [sp]
    eb34:	e59f1084 	ldr	r1, [pc, #132]	; ebc0 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    eb38:	e28d2014 	add	r2, sp, #20
    eb3c:	e3a03014 	mov	r3, #20
    eb40:	e58d5020 	str	r5, [sp, #32]
    eb44:	ebffe812 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eb48:	e2504000 	subs	r4, r0, #0
    eb4c:	1a00000e 	bne	eb8c <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    eb50:	e3550002 	cmp	r5, #2
    eb54:	0a00000e 	beq	eb94 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    eb58:	e3550004 	cmp	r5, #4
    eb5c:	0a000010 	beq	eba4 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    eb60:	e3550001 	cmp	r5, #1
    eb64:	0a00000c 	beq	eb9c <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    eb68:	e59f0054 	ldr	r0, [pc, #84]	; ebc4 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    eb6c:	e59f1054 	ldr	r1, [pc, #84]	; ebc8 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    eb70:	e3a02f43 	mov	r2, #268	; 0x10c
    eb74:	ebfff7cd 	bl	cab0 <assertion_failed>
    eb78:	e28d000c 	add	r0, sp, #12
    eb7c:	ebffe7c2 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    eb80:	e1a00004 	mov	r0, r4
    eb84:	e28dd028 	add	sp, sp, #40	; 0x28
    eb88:	e8bd8070 	pop	{r4, r5, r6, pc}
    eb8c:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    eb90:	eafffff8 	b	eb78 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    eb94:	e59f4030 	ldr	r4, [pc, #48]	; ebcc <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    eb98:	eafffff6 	b	eb78 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    eb9c:	e59f402c 	ldr	r4, [pc, #44]	; ebd0 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    eba0:	eafffff4 	b	eb78 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    eba4:	e5964008 	ldr	r4, [r6, #8]
    eba8:	e59f3024 	ldr	r3, [pc, #36]	; ebd4 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    ebac:	e59f2024 	ldr	r2, [pc, #36]	; ebd8 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    ebb0:	e3540002 	cmp	r4, #2
    ebb4:	91a04003 	movls	r4, r3
    ebb8:	81a04002 	movhi	r4, r2
    ebbc:	eaffffed 	b	eb78 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    ebc0:	00030002 	.word	0x00030002
    ebc4:	000116ac 	.word	0x000116ac
    ebc8:	000118f4 	.word	0x000118f4
    ebcc:	02dc6c00 	.word	0x02dc6c00
    ebd0:	05f5e100 	.word	0x05f5e100
    ebd4:	0ee6b280 	.word	0x0ee6b280
    ebd8:	11e1a300 	.word	0x11e1a300

0000ebdc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    ebdc:	e3510036 	cmp	r1, #54	; 0x36
    ebe0:	e92d4008 	push	{r3, lr}
    ebe4:	0a00000c 	beq	ec1c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    ebe8:	e3510037 	cmp	r1, #55	; 0x37
    ebec:	1a000004 	bne	ec04 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x28>
    ebf0:	e5900004 	ldr	r0, [r0, #4]
    ebf4:	e3500003 	cmp	r0, #3
    ebf8:	d3a0002d 	movle	r0, #45	; 0x2d
    ebfc:	c3a00028 	movgt	r0, #40	; 0x28
    ec00:	e8bd8008 	pop	{r3, pc}
    ec04:	e59f0038 	ldr	r0, [pc, #56]	; ec44 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    ec08:	e59f1038 	ldr	r1, [pc, #56]	; ec48 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    ec0c:	e59f2038 	ldr	r2, [pc, #56]	; ec4c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    ec10:	ebfff7a6 	bl	cab0 <assertion_failed>
    ec14:	e3a00000 	mov	r0, #0
    ec18:	e8bd8008 	pop	{r3, pc}
    ec1c:	e5903004 	ldr	r3, [r0, #4]
    ec20:	e3530003 	cmp	r3, #3
    ec24:	ca000001 	bgt	ec30 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    ec28:	e3a00028 	mov	r0, #40	; 0x28
    ec2c:	e8bd8008 	pop	{r3, pc}
    ec30:	e5900008 	ldr	r0, [r0, #8]
    ec34:	e3500002 	cmp	r0, #2
    ec38:	93a0002d 	movls	r0, #45	; 0x2d
    ec3c:	83a00029 	movhi	r0, #41	; 0x29
    ec40:	e8bd8008 	pop	{r3, pc}
    ec44:	000116ac 	.word	0x000116ac
    ec48:	000118f4 	.word	0x000118f4
    ec4c:	00000137 	.word	0x00000137

0000ec50 <CMachineInfo::GetDevice(TDeviceId) const>:
    ec50:	e3510000 	cmp	r1, #0
    ec54:	1a000003 	bne	ec68 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    ec58:	e5900004 	ldr	r0, [r0, #4]
    ec5c:	e2500001 	subs	r0, r0, #1
    ec60:	13a00001 	movne	r0, #1
    ec64:	e12fff1e 	bx	lr
    ec68:	e92d4008 	push	{r3, lr}
    ec6c:	e59f0010 	ldr	r0, [pc, #16]	; ec84 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    ec70:	e59f1010 	ldr	r1, [pc, #16]	; ec88 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    ec74:	e3a02e15 	mov	r2, #336	; 0x150
    ec78:	ebfff78c 	bl	cab0 <assertion_failed>
    ec7c:	e3a00000 	mov	r0, #0
    ec80:	e8bd8008 	pop	{r3, pc}
    ec84:	000116ac 	.word	0x000116ac
    ec88:	000118f4 	.word	0x000118f4

0000ec8c <CMachineInfo::Get()>:
    ec8c:	e92d4010 	push	{r4, lr}
    ec90:	e59f4020 	ldr	r4, [pc, #32]	; ecb8 <CMachineInfo::Get()+0x2c>
    ec94:	e5940000 	ldr	r0, [r4]
    ec98:	e3500000 	cmp	r0, #0
    ec9c:	18bd8010 	popne	{r4, pc}
    eca0:	e59f0014 	ldr	r0, [pc, #20]	; ecbc <CMachineInfo::Get()+0x30>
    eca4:	e59f1014 	ldr	r1, [pc, #20]	; ecc0 <CMachineInfo::Get()+0x34>
    eca8:	e59f2014 	ldr	r2, [pc, #20]	; ecc4 <CMachineInfo::Get()+0x38>
    ecac:	ebfff77f 	bl	cab0 <assertion_failed>
    ecb0:	e5940000 	ldr	r0, [r4]
    ecb4:	e8bd8010 	pop	{r4, pc}
    ecb8:	00051020 	.word	0x00051020
    ecbc:	0001058c 	.word	0x0001058c
    ecc0:	000118f4 	.word	0x000118f4
    ecc4:	00000159 	.word	0x00000159

0000ecc8 <CPtrList::CPtrList()>:
    ecc8:	e3a02000 	mov	r2, #0
    eccc:	e5802000 	str	r2, [r0]
    ecd0:	e12fff1e 	bx	lr

0000ecd4 <CPtrList::~CPtrList()>:
    ecd4:	e5903000 	ldr	r3, [r0]
    ecd8:	e92d4010 	push	{r4, lr}
    ecdc:	e3530000 	cmp	r3, #0
    ece0:	e1a04000 	mov	r4, r0
    ece4:	0a000003 	beq	ecf8 <CPtrList::~CPtrList()+0x24>
    ece8:	e59f0010 	ldr	r0, [pc, #16]	; ed00 <CPtrList::~CPtrList()+0x2c>
    ecec:	e59f1010 	ldr	r1, [pc, #16]	; ed04 <CPtrList::~CPtrList()+0x30>
    ecf0:	e3a0202a 	mov	r2, #42	; 0x2a
    ecf4:	ebfff76d 	bl	cab0 <assertion_failed>
    ecf8:	e1a00004 	mov	r0, r4
    ecfc:	e8bd8010 	pop	{r4, pc}
    ed00:	000119e8 	.word	0x000119e8
    ed04:	000119f8 	.word	0x000119f8

0000ed08 <CPtrList::GetFirst()>:
    ed08:	e5900000 	ldr	r0, [r0]
    ed0c:	e12fff1e 	bx	lr

0000ed10 <CPtrList::GetNext(TPtrListElement*)>:
    ed10:	e92d4010 	push	{r4, lr}
    ed14:	e2514000 	subs	r4, r1, #0
    ed18:	0a000009 	beq	ed44 <CPtrList::GetNext(TPtrListElement*)+0x34>
    ed1c:	e59f3034 	ldr	r3, [pc, #52]	; ed58 <CPtrList::GetNext(TPtrListElement*)+0x48>
    ed20:	e5942000 	ldr	r2, [r4]
    ed24:	e1520003 	cmp	r2, r3
    ed28:	0a000003 	beq	ed3c <CPtrList::GetNext(TPtrListElement*)+0x2c>
    ed2c:	e59f0028 	ldr	r0, [pc, #40]	; ed5c <CPtrList::GetNext(TPtrListElement*)+0x4c>
    ed30:	e59f1028 	ldr	r1, [pc, #40]	; ed60 <CPtrList::GetNext(TPtrListElement*)+0x50>
    ed34:	e3a02035 	mov	r2, #53	; 0x35
    ed38:	ebfff75c 	bl	cab0 <assertion_failed>
    ed3c:	e5940008 	ldr	r0, [r4, #8]
    ed40:	e8bd8010 	pop	{r4, pc}
    ed44:	e59f0018 	ldr	r0, [pc, #24]	; ed64 <CPtrList::GetNext(TPtrListElement*)+0x54>
    ed48:	e59f1010 	ldr	r1, [pc, #16]	; ed60 <CPtrList::GetNext(TPtrListElement*)+0x50>
    ed4c:	e3a02034 	mov	r2, #52	; 0x34
    ed50:	ebfff756 	bl	cab0 <assertion_failed>
    ed54:	eafffff0 	b	ed1c <CPtrList::GetNext(TPtrListElement*)+0xc>
    ed58:	504c4d43 	.word	0x504c4d43
    ed5c:	00011a14 	.word	0x00011a14
    ed60:	000119f8 	.word	0x000119f8
    ed64:	00011a04 	.word	0x00011a04

0000ed68 <CPtrList::GetPtr(TPtrListElement*)>:
    ed68:	e92d4010 	push	{r4, lr}
    ed6c:	e2514000 	subs	r4, r1, #0
    ed70:	0a000009 	beq	ed9c <CPtrList::GetPtr(TPtrListElement*)+0x34>
    ed74:	e59f3034 	ldr	r3, [pc, #52]	; edb0 <CPtrList::GetPtr(TPtrListElement*)+0x48>
    ed78:	e5942000 	ldr	r2, [r4]
    ed7c:	e1520003 	cmp	r2, r3
    ed80:	0a000003 	beq	ed94 <CPtrList::GetPtr(TPtrListElement*)+0x2c>
    ed84:	e59f0028 	ldr	r0, [pc, #40]	; edb4 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
    ed88:	e59f1028 	ldr	r1, [pc, #40]	; edb8 <CPtrList::GetPtr(TPtrListElement*)+0x50>
    ed8c:	e3a0203d 	mov	r2, #61	; 0x3d
    ed90:	ebfff746 	bl	cab0 <assertion_failed>
    ed94:	e594000c 	ldr	r0, [r4, #12]
    ed98:	e8bd8010 	pop	{r4, pc}
    ed9c:	e59f0018 	ldr	r0, [pc, #24]	; edbc <CPtrList::GetPtr(TPtrListElement*)+0x54>
    eda0:	e59f1010 	ldr	r1, [pc, #16]	; edb8 <CPtrList::GetPtr(TPtrListElement*)+0x50>
    eda4:	e3a0203c 	mov	r2, #60	; 0x3c
    eda8:	ebfff740 	bl	cab0 <assertion_failed>
    edac:	eafffff0 	b	ed74 <CPtrList::GetPtr(TPtrListElement*)+0xc>
    edb0:	504c4d43 	.word	0x504c4d43
    edb4:	00011a14 	.word	0x00011a14
    edb8:	000119f8 	.word	0x000119f8
    edbc:	00011a04 	.word	0x00011a04

0000edc0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    edc0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    edc4:	e1a06000 	mov	r6, r0
    edc8:	e3a00010 	mov	r0, #16
    edcc:	e1a07002 	mov	r7, r2
    edd0:	e1a04001 	mov	r4, r1
    edd4:	ebffebfc 	bl	9dcc <operator new(unsigned int)>
    edd8:	e5962000 	ldr	r2, [r6]
    eddc:	e59f30c4 	ldr	r3, [pc, #196]	; eea8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>
    ede0:	e3520000 	cmp	r2, #0
    ede4:	e1a05000 	mov	r5, r0
    ede8:	e580700c 	str	r7, [r0, #12]
    edec:	e5803000 	str	r3, [r0]
    edf0:	0a000022 	beq	ee80 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    edf4:	e3540000 	cmp	r4, #0
    edf8:	0a000025 	beq	ee94 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
    edfc:	e59f30a4 	ldr	r3, [pc, #164]	; eea8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>
    ee00:	e5942000 	ldr	r2, [r4]
    ee04:	e1520003 	cmp	r2, r3
    ee08:	0a000003 	beq	ee1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
    ee0c:	e59f0098 	ldr	r0, [pc, #152]	; eeac <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
    ee10:	e59f1098 	ldr	r1, [pc, #152]	; eeb0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ee14:	e3a0204e 	mov	r2, #78	; 0x4e
    ee18:	ebfff724 	bl	cab0 <assertion_failed>
    ee1c:	e5963000 	ldr	r3, [r6]
    ee20:	e1530004 	cmp	r3, r4
    ee24:	0a000010 	beq	ee6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
    ee28:	e5943004 	ldr	r3, [r4, #4]
    ee2c:	e9850018 	stmib	r5, {r3, r4}
    ee30:	e5943004 	ldr	r3, [r4, #4]
    ee34:	e3530000 	cmp	r3, #0
    ee38:	0a000009 	beq	ee64 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
    ee3c:	e59f2064 	ldr	r2, [pc, #100]	; eea8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>
    ee40:	e5931000 	ldr	r1, [r3]
    ee44:	e1510002 	cmp	r1, r2
    ee48:	0a000004 	beq	ee60 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
    ee4c:	e59f0060 	ldr	r0, [pc, #96]	; eeb4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    ee50:	e59f1058 	ldr	r1, [pc, #88]	; eeb0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ee54:	e3a02060 	mov	r2, #96	; 0x60
    ee58:	ebfff714 	bl	cab0 <assertion_failed>
    ee5c:	e5943004 	ldr	r3, [r4, #4]
    ee60:	e5835008 	str	r5, [r3, #8]
    ee64:	e5845004 	str	r5, [r4, #4]
    ee68:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ee6c:	e3a03000 	mov	r3, #0
    ee70:	e9850018 	stmib	r5, {r3, r4}
    ee74:	e5845004 	str	r5, [r4, #4]
    ee78:	e5865000 	str	r5, [r6]
    ee7c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ee80:	e59f0030 	ldr	r0, [pc, #48]	; eeb8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
    ee84:	e59f1024 	ldr	r1, [pc, #36]	; eeb0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ee88:	e3a0204c 	mov	r2, #76	; 0x4c
    ee8c:	ebfff707 	bl	cab0 <assertion_failed>
    ee90:	eaffffd7 	b	edf4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
    ee94:	e59f0020 	ldr	r0, [pc, #32]	; eebc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    ee98:	e59f1010 	ldr	r1, [pc, #16]	; eeb0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ee9c:	e3a0204d 	mov	r2, #77	; 0x4d
    eea0:	ebfff702 	bl	cab0 <assertion_failed>
    eea4:	eaffffd4 	b	edfc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
    eea8:	504c4d43 	.word	0x504c4d43
    eeac:	00011a54 	.word	0x00011a54
    eeb0:	000119f8 	.word	0x000119f8
    eeb4:	00011a78 	.word	0x00011a78
    eeb8:	00011a38 	.word	0x00011a38
    eebc:	00011a48 	.word	0x00011a48

0000eec0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    eec0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    eec4:	e1a06000 	mov	r6, r0
    eec8:	e1a05001 	mov	r5, r1
    eecc:	e3a00010 	mov	r0, #16
    eed0:	e1a07002 	mov	r7, r2
    eed4:	ebffebbc 	bl	9dcc <operator new(unsigned int)>
    eed8:	e59f30c4 	ldr	r3, [pc, #196]	; efa4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    eedc:	e3550000 	cmp	r5, #0
    eee0:	e5803000 	str	r3, [r0]
    eee4:	e1a04000 	mov	r4, r0
    eee8:	e580700c 	str	r7, [r0, #12]
    eeec:	e5963000 	ldr	r3, [r6]
    eef0:	0a00001b 	beq	ef64 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa4>
    eef4:	e3530000 	cmp	r3, #0
    eef8:	0a000024 	beq	ef90 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
    eefc:	e59f30a0 	ldr	r3, [pc, #160]	; efa4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    ef00:	e5952000 	ldr	r2, [r5]
    ef04:	e1520003 	cmp	r2, r3
    ef08:	0a000003 	beq	ef1c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
    ef0c:	e59f0094 	ldr	r0, [pc, #148]	; efa8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    ef10:	e59f1094 	ldr	r1, [pc, #148]	; efac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    ef14:	e3a0207e 	mov	r2, #126	; 0x7e
    ef18:	ebfff6e4 	bl	cab0 <assertion_failed>
    ef1c:	e5953008 	ldr	r3, [r5, #8]
    ef20:	e5845004 	str	r5, [r4, #4]
    ef24:	e5843008 	str	r3, [r4, #8]
    ef28:	e5953008 	ldr	r3, [r5, #8]
    ef2c:	e3530000 	cmp	r3, #0
    ef30:	0a000009 	beq	ef5c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
    ef34:	e59f2068 	ldr	r2, [pc, #104]	; efa4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    ef38:	e5931000 	ldr	r1, [r3]
    ef3c:	e1510002 	cmp	r1, r2
    ef40:	0a000004 	beq	ef58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
    ef44:	e59f0064 	ldr	r0, [pc, #100]	; efb0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    ef48:	e59f105c 	ldr	r1, [pc, #92]	; efac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    ef4c:	e3a02085 	mov	r2, #133	; 0x85
    ef50:	ebfff6d6 	bl	cab0 <assertion_failed>
    ef54:	e5953008 	ldr	r3, [r5, #8]
    ef58:	e5834004 	str	r4, [r3, #4]
    ef5c:	e5854008 	str	r4, [r5, #8]
    ef60:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ef64:	e3530000 	cmp	r3, #0
    ef68:	0a000003 	beq	ef7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    ef6c:	e59f0040 	ldr	r0, [pc, #64]	; efb4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
    ef70:	e59f1034 	ldr	r1, [pc, #52]	; efac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    ef74:	e3a02074 	mov	r2, #116	; 0x74
    ef78:	ebfff6cc 	bl	cab0 <assertion_failed>
    ef7c:	e3a03000 	mov	r3, #0
    ef80:	e5843004 	str	r3, [r4, #4]
    ef84:	e5843008 	str	r3, [r4, #8]
    ef88:	e5864000 	str	r4, [r6]
    ef8c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ef90:	e59f0020 	ldr	r0, [pc, #32]	; efb8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf8>
    ef94:	e59f1010 	ldr	r1, [pc, #16]	; efac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    ef98:	e3a0207d 	mov	r2, #125	; 0x7d
    ef9c:	ebfff6c3 	bl	cab0 <assertion_failed>
    efa0:	eaffffd5 	b	eefc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
    efa4:	504c4d43 	.word	0x504c4d43
    efa8:	00011aa0 	.word	0x00011aa0
    efac:	000119f8 	.word	0x000119f8
    efb0:	00011ac4 	.word	0x00011ac4
    efb4:	000119e8 	.word	0x000119e8
    efb8:	00011a38 	.word	0x00011a38

0000efbc <CPtrList::Remove(TPtrListElement*)>:
    efbc:	e92d4038 	push	{r3, r4, r5, lr}
    efc0:	e2514000 	subs	r4, r1, #0
    efc4:	e1a05000 	mov	r5, r0
    efc8:	0a00003b 	beq	f0bc <CPtrList::Remove(TPtrListElement*)+0x100>
    efcc:	e59f3114 	ldr	r3, [pc, #276]	; f0e8 <CPtrList::Remove(TPtrListElement*)+0x12c>
    efd0:	e5942000 	ldr	r2, [r4]
    efd4:	e1520003 	cmp	r2, r3
    efd8:	0a000003 	beq	efec <CPtrList::Remove(TPtrListElement*)+0x30>
    efdc:	e59f0108 	ldr	r0, [pc, #264]	; f0ec <CPtrList::Remove(TPtrListElement*)+0x130>
    efe0:	e59f1108 	ldr	r1, [pc, #264]	; f0f0 <CPtrList::Remove(TPtrListElement*)+0x134>
    efe4:	e3a02090 	mov	r2, #144	; 0x90
    efe8:	ebfff6b0 	bl	cab0 <assertion_failed>
    efec:	e5953000 	ldr	r3, [r5]
    eff0:	e1530004 	cmp	r3, r4
    eff4:	0a000020 	beq	f07c <CPtrList::Remove(TPtrListElement*)+0xc0>
    eff8:	e5943004 	ldr	r3, [r4, #4]
    effc:	e3530000 	cmp	r3, #0
    f000:	0a000032 	beq	f0d0 <CPtrList::Remove(TPtrListElement*)+0x114>
    f004:	e59f20dc 	ldr	r2, [pc, #220]	; f0e8 <CPtrList::Remove(TPtrListElement*)+0x12c>
    f008:	e5931000 	ldr	r1, [r3]
    f00c:	e1510002 	cmp	r1, r2
    f010:	0a000004 	beq	f028 <CPtrList::Remove(TPtrListElement*)+0x6c>
    f014:	e59f00d8 	ldr	r0, [pc, #216]	; f0f4 <CPtrList::Remove(TPtrListElement*)+0x138>
    f018:	e59f10d0 	ldr	r1, [pc, #208]	; f0f0 <CPtrList::Remove(TPtrListElement*)+0x134>
    f01c:	e3a0209f 	mov	r2, #159	; 0x9f
    f020:	ebfff6a2 	bl	cab0 <assertion_failed>
    f024:	e5943004 	ldr	r3, [r4, #4]
    f028:	e5942008 	ldr	r2, [r4, #8]
    f02c:	e5832008 	str	r2, [r3, #8]
    f030:	e5942008 	ldr	r2, [r4, #8]
    f034:	e3520000 	cmp	r2, #0
    f038:	0a00000a 	beq	f068 <CPtrList::Remove(TPtrListElement*)+0xac>
    f03c:	e59f10a4 	ldr	r1, [pc, #164]	; f0e8 <CPtrList::Remove(TPtrListElement*)+0x12c>
    f040:	e5920000 	ldr	r0, [r2]
    f044:	e1500001 	cmp	r0, r1
    f048:	0a000005 	beq	f064 <CPtrList::Remove(TPtrListElement*)+0xa8>
    f04c:	e3a020a4 	mov	r2, #164	; 0xa4
    f050:	e59f00a0 	ldr	r0, [pc, #160]	; f0f8 <CPtrList::Remove(TPtrListElement*)+0x13c>
    f054:	e59f1094 	ldr	r1, [pc, #148]	; f0f0 <CPtrList::Remove(TPtrListElement*)+0x134>
    f058:	ebfff694 	bl	cab0 <assertion_failed>
    f05c:	e5942008 	ldr	r2, [r4, #8]
    f060:	e5943004 	ldr	r3, [r4, #4]
    f064:	e5823004 	str	r3, [r2, #4]
    f068:	e3a03000 	mov	r3, #0
    f06c:	e1a00004 	mov	r0, r4
    f070:	e5843000 	str	r3, [r4]
    f074:	e8bd4038 	pop	{r3, r4, r5, lr}
    f078:	eaffeb55 	b	9dd4 <operator delete(void*)>
    f07c:	e5943008 	ldr	r3, [r4, #8]
    f080:	e3530000 	cmp	r3, #0
    f084:	e5853000 	str	r3, [r5]
    f088:	0afffff6 	beq	f068 <CPtrList::Remove(TPtrListElement*)+0xac>
    f08c:	e59f2054 	ldr	r2, [pc, #84]	; f0e8 <CPtrList::Remove(TPtrListElement*)+0x12c>
    f090:	e5931000 	ldr	r1, [r3]
    f094:	e1510002 	cmp	r1, r2
    f098:	0a000004 	beq	f0b0 <CPtrList::Remove(TPtrListElement*)+0xf4>
    f09c:	e59f0054 	ldr	r0, [pc, #84]	; f0f8 <CPtrList::Remove(TPtrListElement*)+0x13c>
    f0a0:	e59f1048 	ldr	r1, [pc, #72]	; f0f0 <CPtrList::Remove(TPtrListElement*)+0x134>
    f0a4:	e3a02098 	mov	r2, #152	; 0x98
    f0a8:	ebfff680 	bl	cab0 <assertion_failed>
    f0ac:	e5943008 	ldr	r3, [r4, #8]
    f0b0:	e3a02000 	mov	r2, #0
    f0b4:	e5832004 	str	r2, [r3, #4]
    f0b8:	eaffffea 	b	f068 <CPtrList::Remove(TPtrListElement*)+0xac>
    f0bc:	e59f0038 	ldr	r0, [pc, #56]	; f0fc <CPtrList::Remove(TPtrListElement*)+0x140>
    f0c0:	e59f1028 	ldr	r1, [pc, #40]	; f0f0 <CPtrList::Remove(TPtrListElement*)+0x134>
    f0c4:	e3a0208f 	mov	r2, #143	; 0x8f
    f0c8:	ebfff678 	bl	cab0 <assertion_failed>
    f0cc:	eaffffbe 	b	efcc <CPtrList::Remove(TPtrListElement*)+0x10>
    f0d0:	e59f0028 	ldr	r0, [pc, #40]	; f100 <CPtrList::Remove(TPtrListElement*)+0x144>
    f0d4:	e59f1014 	ldr	r1, [pc, #20]	; f0f0 <CPtrList::Remove(TPtrListElement*)+0x134>
    f0d8:	e3a0209e 	mov	r2, #158	; 0x9e
    f0dc:	ebfff673 	bl	cab0 <assertion_failed>
    f0e0:	e5943004 	ldr	r3, [r4, #4]
    f0e4:	eaffffc6 	b	f004 <CPtrList::Remove(TPtrListElement*)+0x48>
    f0e8:	504c4d43 	.word	0x504c4d43
    f0ec:	00011a14 	.word	0x00011a14
    f0f0:	000119f8 	.word	0x000119f8
    f0f4:	00011b34 	.word	0x00011b34
    f0f8:	00011af0 	.word	0x00011af0
    f0fc:	00011a04 	.word	0x00011a04
    f100:	00011b1c 	.word	0x00011b1c

0000f104 <CPtrList::Find(void*)>:
    f104:	e92d4070 	push	{r4, r5, r6, lr}
    f108:	e5904000 	ldr	r4, [r0]
    f10c:	e3540000 	cmp	r4, #0
    f110:	0a000011 	beq	f15c <CPtrList::Find(void*)+0x58>
    f114:	e1a05001 	mov	r5, r1
    f118:	e59f6044 	ldr	r6, [pc, #68]	; f164 <CPtrList::Find(void*)+0x60>
    f11c:	ea000002 	b	f12c <CPtrList::Find(void*)+0x28>
    f120:	e5944008 	ldr	r4, [r4, #8]
    f124:	e3540000 	cmp	r4, #0
    f128:	0a00000b 	beq	f15c <CPtrList::Find(void*)+0x58>
    f12c:	e5943000 	ldr	r3, [r4]
    f130:	e59f0030 	ldr	r0, [pc, #48]	; f168 <CPtrList::Find(void*)+0x64>
    f134:	e1530006 	cmp	r3, r6
    f138:	e59f102c 	ldr	r1, [pc, #44]	; f16c <CPtrList::Find(void*)+0x68>
    f13c:	0a000001 	beq	f148 <CPtrList::Find(void*)+0x44>
    f140:	e3a020b3 	mov	r2, #179	; 0xb3
    f144:	ebfff659 	bl	cab0 <assertion_failed>
    f148:	e594300c 	ldr	r3, [r4, #12]
    f14c:	e1530005 	cmp	r3, r5
    f150:	1afffff2 	bne	f120 <CPtrList::Find(void*)+0x1c>
    f154:	e1a00004 	mov	r0, r4
    f158:	e8bd8070 	pop	{r4, r5, r6, pc}
    f15c:	e3a00000 	mov	r0, #0
    f160:	e8bd8070 	pop	{r4, r5, r6, pc}
    f164:	504c4d43 	.word	0x504c4d43
    f168:	00011a14 	.word	0x00011a14
    f16c:	000119f8 	.word	0x000119f8

0000f170 <mem_init>:
    f170:	e3500605 	cmp	r0, #5242880	; 0x500000
    f174:	21a0c000 	movcs	ip, r0
    f178:	33a0c605 	movcc	ip, #5242880	; 0x500000
    f17c:	e0801001 	add	r1, r0, r1
    f180:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    f184:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    f188:	e59f2018 	ldr	r2, [pc, #24]	; f1a8 <mem_init+0x38>
    f18c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    f190:	e2410501 	sub	r0, r1, #4194304	; 0x400000
    f194:	e3c3300f 	bic	r3, r3, #15
    f198:	e582c000 	str	ip, [r2]
    f19c:	e582100c 	str	r1, [r2, #12]
    f1a0:	e9820009 	stmib	r2, {r0, r3}
    f1a4:	e12fff1e 	bx	lr
    f1a8:	00051024 	.word	0x00051024

0000f1ac <mem_get_size>:
    f1ac:	e59f301c 	ldr	r3, [pc, #28]	; f1d0 <mem_get_size+0x24>
    f1b0:	e593100c 	ldr	r1, [r3, #12]
    f1b4:	e5930008 	ldr	r0, [r3, #8]
    f1b8:	e5932004 	ldr	r2, [r3, #4]
    f1bc:	e5933000 	ldr	r3, [r3]
    f1c0:	e0600001 	rsb	r0, r0, r1
    f1c4:	e0633002 	rsb	r3, r3, r2
    f1c8:	e0800003 	add	r0, r0, r3
    f1cc:	e12fff1e 	bx	lr
    f1d0:	00051024 	.word	0x00051024

0000f1d4 <malloc>:
    f1d4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    f1d8:	e59f719c 	ldr	r7, [pc, #412]	; f37c <malloc+0x1a8>
    f1dc:	e1a05000 	mov	r5, r0
    f1e0:	e5973000 	ldr	r3, [r7]
    f1e4:	e3530000 	cmp	r3, #0
    f1e8:	0a00005e 	beq	f368 <malloc+0x194>
    f1ec:	e5973010 	ldr	r3, [r7, #16]
    f1f0:	e3530000 	cmp	r3, #0
    f1f4:	1a000053 	bne	f348 <malloc+0x174>
    f1f8:	e59f4180 	ldr	r4, [pc, #384]	; f380 <malloc+0x1ac>
    f1fc:	e5943000 	ldr	r3, [r4]
    f200:	e3530000 	cmp	r3, #0
    f204:	1a000003 	bne	f218 <malloc+0x44>
    f208:	ea00002b 	b	f2bc <malloc+0xe8>
    f20c:	e5b43008 	ldr	r3, [r4, #8]!
    f210:	e3530000 	cmp	r3, #0
    f214:	0a000028 	beq	f2bc <malloc+0xe8>
    f218:	e1530005 	cmp	r3, r5
    f21c:	3afffffa 	bcc	f20c <malloc+0x38>
    f220:	e5946004 	ldr	r6, [r4, #4]
    f224:	e3560000 	cmp	r6, #0
    f228:	01a05003 	moveq	r5, r3
    f22c:	0a000022 	beq	f2bc <malloc+0xe8>
    f230:	e5d61001 	ldrb	r1, [r6, #1]
    f234:	e5d62000 	ldrb	r2, [r6]
    f238:	e5d63002 	ldrb	r3, [r6, #2]
    f23c:	e1822401 	orr	r2, r2, r1, lsl #8
    f240:	e5d61003 	ldrb	r1, [r6, #3]
    f244:	e1823803 	orr	r3, r2, r3, lsl #16
    f248:	e59f2134 	ldr	r2, [pc, #308]	; f384 <malloc+0x1b0>
    f24c:	e1833c01 	orr	r3, r3, r1, lsl #24
    f250:	e1530002 	cmp	r3, r2
    f254:	0a000003 	beq	f268 <malloc+0x94>
    f258:	e59f0128 	ldr	r0, [pc, #296]	; f388 <malloc+0x1b4>
    f25c:	e59f1128 	ldr	r1, [pc, #296]	; f38c <malloc+0x1b8>
    f260:	e3a02089 	mov	r2, #137	; 0x89
    f264:	ebfff611 	bl	cab0 <assertion_failed>
    f268:	e5d61009 	ldrb	r1, [r6, #9]
    f26c:	e5d62008 	ldrb	r2, [r6, #8]
    f270:	e5d6300a 	ldrb	r3, [r6, #10]
    f274:	e1822401 	orr	r2, r2, r1, lsl #8
    f278:	e5d6100b 	ldrb	r1, [r6, #11]
    f27c:	e1823803 	orr	r3, r2, r3, lsl #16
    f280:	e1833c01 	orr	r3, r3, r1, lsl #24
    f284:	e5843004 	str	r3, [r4, #4]
    f288:	e5973010 	ldr	r3, [r7, #16]
    f28c:	e3530000 	cmp	r3, #0
    f290:	1a00002a 	bne	f340 <malloc+0x16c>
    f294:	e3a03000 	mov	r3, #0
    f298:	e2864010 	add	r4, r6, #16
    f29c:	e314000f 	tst	r4, #15
    f2a0:	e5c63008 	strb	r3, [r6, #8]
    f2a4:	e5c63009 	strb	r3, [r6, #9]
    f2a8:	e5c6300a 	strb	r3, [r6, #10]
    f2ac:	e5c6300b 	strb	r3, [r6, #11]
    f2b0:	1a000026 	bne	f350 <malloc+0x17c>
    f2b4:	e1a00004 	mov	r0, r4
    f2b8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    f2bc:	e5976000 	ldr	r6, [r7]
    f2c0:	e285301f 	add	r3, r5, #31
    f2c4:	e3c3300f 	bic	r3, r3, #15
    f2c8:	e5972004 	ldr	r2, [r7, #4]
    f2cc:	e0863003 	add	r3, r6, r3
    f2d0:	e1530002 	cmp	r3, r2
    f2d4:	e5873000 	str	r3, [r7]
    f2d8:	e59f309c 	ldr	r3, [pc, #156]	; f37c <malloc+0x1a8>
    f2dc:	9a000005 	bls	f2f8 <malloc+0x124>
    f2e0:	e5934010 	ldr	r4, [r3, #16]
    f2e4:	e3540000 	cmp	r4, #0
    f2e8:	0afffff1 	beq	f2b4 <malloc+0xe0>
    f2ec:	ebffeac9 	bl	9e18 <LeaveCritical>
    f2f0:	e3a00000 	mov	r0, #0
    f2f4:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    f2f8:	e3a04043 	mov	r4, #67	; 0x43
    f2fc:	e3a0e04d 	mov	lr, #77	; 0x4d
    f300:	e3a0c04c 	mov	ip, #76	; 0x4c
    f304:	e3a00042 	mov	r0, #66	; 0x42
    f308:	e1a03c25 	lsr	r3, r5, #24
    f30c:	e5c63007 	strb	r3, [r6, #7]
    f310:	e5973010 	ldr	r3, [r7, #16]
    f314:	e1a01425 	lsr	r1, r5, #8
    f318:	e1a02825 	lsr	r2, r5, #16
    f31c:	e3530000 	cmp	r3, #0
    f320:	e5c65004 	strb	r5, [r6, #4]
    f324:	e5c64000 	strb	r4, [r6]
    f328:	e5c6e001 	strb	lr, [r6, #1]
    f32c:	e5c6c002 	strb	ip, [r6, #2]
    f330:	e5c60003 	strb	r0, [r6, #3]
    f334:	e5c61005 	strb	r1, [r6, #5]
    f338:	e5c62006 	strb	r2, [r6, #6]
    f33c:	0affffd4 	beq	f294 <malloc+0xc0>
    f340:	ebffeab4 	bl	9e18 <LeaveCritical>
    f344:	eaffffd2 	b	f294 <malloc+0xc0>
    f348:	ebffeaa3 	bl	9ddc <EnterCritical>
    f34c:	eaffffa9 	b	f1f8 <malloc+0x24>
    f350:	e59f0038 	ldr	r0, [pc, #56]	; f390 <malloc+0x1bc>
    f354:	e59f1030 	ldr	r1, [pc, #48]	; f38c <malloc+0x1b8>
    f358:	e3a020a1 	mov	r2, #161	; 0xa1
    f35c:	ebfff5d3 	bl	cab0 <assertion_failed>
    f360:	e1a00004 	mov	r0, r4
    f364:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    f368:	e59f0024 	ldr	r0, [pc, #36]	; f394 <malloc+0x1c0>
    f36c:	e59f1018 	ldr	r1, [pc, #24]	; f38c <malloc+0x1b8>
    f370:	e3a0206f 	mov	r2, #111	; 0x6f
    f374:	ebfff5cd 	bl	cab0 <assertion_failed>
    f378:	eaffff9b 	b	f1ec <malloc+0x18>
    f37c:	00051024 	.word	0x00051024
    f380:	00012738 	.word	0x00012738
    f384:	424c4d43 	.word	0x424c4d43
    f388:	00011b80 	.word	0x00011b80
    f38c:	00011b74 	.word	0x00011b74
    f390:	00011ba4 	.word	0x00011ba4
    f394:	00011b60 	.word	0x00011b60

0000f398 <free>:
    f398:	e3500000 	cmp	r0, #0
    f39c:	012fff1e 	bxeq	lr
    f3a0:	e92d4070 	push	{r4, r5, r6, lr}
    f3a4:	e2405010 	sub	r5, r0, #16
    f3a8:	e5d51001 	ldrb	r1, [r5, #1]
    f3ac:	e5502010 	ldrb	r2, [r0, #-16]
    f3b0:	e5d53002 	ldrb	r3, [r5, #2]
    f3b4:	e1822401 	orr	r2, r2, r1, lsl #8
    f3b8:	e5d51003 	ldrb	r1, [r5, #3]
    f3bc:	e1823803 	orr	r3, r2, r3, lsl #16
    f3c0:	e59f20dc 	ldr	r2, [pc, #220]	; f4a4 <free+0x10c>
    f3c4:	e1833c01 	orr	r3, r3, r1, lsl #24
    f3c8:	e1530002 	cmp	r3, r2
    f3cc:	0a000003 	beq	f3e0 <free+0x48>
    f3d0:	e59f00d0 	ldr	r0, [pc, #208]	; f4a8 <free+0x110>
    f3d4:	e59f10d0 	ldr	r1, [pc, #208]	; f4ac <free+0x114>
    f3d8:	e3a020ae 	mov	r2, #174	; 0xae
    f3dc:	ebfff5b3 	bl	cab0 <assertion_failed>
    f3e0:	e59f40c8 	ldr	r4, [pc, #200]	; f4b0 <free+0x118>
    f3e4:	e5940000 	ldr	r0, [r4]
    f3e8:	e3500000 	cmp	r0, #0
    f3ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    f3f0:	e5d51004 	ldrb	r1, [r5, #4]
    f3f4:	e5d53005 	ldrb	r3, [r5, #5]
    f3f8:	e5d52006 	ldrb	r2, [r5, #6]
    f3fc:	e1813403 	orr	r3, r1, r3, lsl #8
    f400:	e5d51007 	ldrb	r1, [r5, #7]
    f404:	e1833802 	orr	r3, r3, r2, lsl #16
    f408:	e1832c01 	orr	r2, r3, r1, lsl #24
    f40c:	e1500002 	cmp	r0, r2
    f410:	1a000002 	bne	f420 <free+0x88>
    f414:	ea000005 	b	f430 <free+0x98>
    f418:	e1530002 	cmp	r3, r2
    f41c:	0a000003 	beq	f430 <free+0x98>
    f420:	e5b43008 	ldr	r3, [r4, #8]!
    f424:	e3530000 	cmp	r3, #0
    f428:	1afffffa 	bne	f418 <free+0x80>
    f42c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f430:	e59f607c 	ldr	r6, [pc, #124]	; f4b4 <free+0x11c>
    f434:	e5963010 	ldr	r3, [r6, #16]
    f438:	e3530000 	cmp	r3, #0
    f43c:	1a000009 	bne	f468 <free+0xd0>
    f440:	e5d40004 	ldrb	r0, [r4, #4]
    f444:	e5d41005 	ldrb	r1, [r4, #5]
    f448:	e5d42006 	ldrb	r2, [r4, #6]
    f44c:	e5d43007 	ldrb	r3, [r4, #7]
    f450:	e5c50008 	strb	r0, [r5, #8]
    f454:	e5c51009 	strb	r1, [r5, #9]
    f458:	e5c5200a 	strb	r2, [r5, #10]
    f45c:	e5c5300b 	strb	r3, [r5, #11]
    f460:	e5845004 	str	r5, [r4, #4]
    f464:	e8bd8070 	pop	{r4, r5, r6, pc}
    f468:	ebffea5b 	bl	9ddc <EnterCritical>
    f46c:	e596c010 	ldr	ip, [r6, #16]
    f470:	e5d40004 	ldrb	r0, [r4, #4]
    f474:	e5d41005 	ldrb	r1, [r4, #5]
    f478:	e5d42006 	ldrb	r2, [r4, #6]
    f47c:	e5d43007 	ldrb	r3, [r4, #7]
    f480:	e35c0000 	cmp	ip, #0
    f484:	e5c50008 	strb	r0, [r5, #8]
    f488:	e5c51009 	strb	r1, [r5, #9]
    f48c:	e5c5200a 	strb	r2, [r5, #10]
    f490:	e5c5300b 	strb	r3, [r5, #11]
    f494:	e5845004 	str	r5, [r4, #4]
    f498:	08bd8070 	popeq	{r4, r5, r6, pc}
    f49c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f4a0:	eaffea5c 	b	9e18 <LeaveCritical>
    f4a4:	424c4d43 	.word	0x424c4d43
    f4a8:	00011b80 	.word	0x00011b80
    f4ac:	00011b74 	.word	0x00011b74
    f4b0:	00012738 	.word	0x00012738
    f4b4:	00051024 	.word	0x00051024

0000f4b8 <palloc>:
    f4b8:	e92d4038 	push	{r3, r4, r5, lr}
    f4bc:	e59f50d0 	ldr	r5, [pc, #208]	; f594 <palloc+0xdc>
    f4c0:	e5953008 	ldr	r3, [r5, #8]
    f4c4:	e3530000 	cmp	r3, #0
    f4c8:	0a00002a 	beq	f578 <palloc+0xc0>
    f4cc:	e5953014 	ldr	r3, [r5, #20]
    f4d0:	e3530000 	cmp	r3, #0
    f4d4:	1a000014 	bne	f52c <palloc+0x74>
    f4d8:	e5954018 	ldr	r4, [r5, #24]
    f4dc:	e59f30b0 	ldr	r3, [pc, #176]	; f594 <palloc+0xdc>
    f4e0:	e3540000 	cmp	r4, #0
    f4e4:	0a000015 	beq	f540 <palloc+0x88>
    f4e8:	e59f30a8 	ldr	r3, [pc, #168]	; f598 <palloc+0xe0>
    f4ec:	e5942000 	ldr	r2, [r4]
    f4f0:	e1520003 	cmp	r2, r3
    f4f4:	0a000003 	beq	f508 <palloc+0x50>
    f4f8:	e59f009c 	ldr	r0, [pc, #156]	; f59c <palloc+0xe4>
    f4fc:	e59f109c 	ldr	r1, [pc, #156]	; f5a0 <palloc+0xe8>
    f500:	e3a020d4 	mov	r2, #212	; 0xd4
    f504:	ebfff569 	bl	cab0 <assertion_failed>
    f508:	e3a02000 	mov	r2, #0
    f50c:	e5943004 	ldr	r3, [r4, #4]
    f510:	e5842000 	str	r2, [r4]
    f514:	e5853018 	str	r3, [r5, #24]
    f518:	e5953014 	ldr	r3, [r5, #20]
    f51c:	e3530000 	cmp	r3, #0
    f520:	1a000011 	bne	f56c <palloc+0xb4>
    f524:	e1a00004 	mov	r0, r4
    f528:	e8bd8038 	pop	{r3, r4, r5, pc}
    f52c:	ebffea2a 	bl	9ddc <EnterCritical>
    f530:	e5954018 	ldr	r4, [r5, #24]
    f534:	e59f3058 	ldr	r3, [pc, #88]	; f594 <palloc+0xdc>
    f538:	e3540000 	cmp	r4, #0
    f53c:	1affffe9 	bne	f4e8 <palloc+0x30>
    f540:	e5934008 	ldr	r4, [r3, #8]
    f544:	e593100c 	ldr	r1, [r3, #12]
    f548:	e2842a01 	add	r2, r4, #4096	; 0x1000
    f54c:	e1520001 	cmp	r2, r1
    f550:	e5832008 	str	r2, [r3, #8]
    f554:	9affffef 	bls	f518 <palloc+0x60>
    f558:	e5934014 	ldr	r4, [r3, #20]
    f55c:	e3540000 	cmp	r4, #0
    f560:	1a000009 	bne	f58c <palloc+0xd4>
    f564:	e3a00000 	mov	r0, #0
    f568:	e8bd8038 	pop	{r3, r4, r5, pc}
    f56c:	ebffea29 	bl	9e18 <LeaveCritical>
    f570:	e1a00004 	mov	r0, r4
    f574:	e8bd8038 	pop	{r3, r4, r5, pc}
    f578:	e59f0024 	ldr	r0, [pc, #36]	; f5a4 <palloc+0xec>
    f57c:	e59f101c 	ldr	r1, [pc, #28]	; f5a0 <palloc+0xe8>
    f580:	e3a020c6 	mov	r2, #198	; 0xc6
    f584:	ebfff549 	bl	cab0 <assertion_failed>
    f588:	eaffffcf 	b	f4cc <palloc+0x14>
    f58c:	ebffea21 	bl	9e18 <LeaveCritical>
    f590:	eafffff3 	b	f564 <palloc+0xac>
    f594:	00051024 	.word	0x00051024
    f598:	50474d43 	.word	0x50474d43
    f59c:	00011be4 	.word	0x00011be4
    f5a0:	00011b74 	.word	0x00011b74
    f5a4:	00011bd0 	.word	0x00011bd0

0000f5a8 <pfree>:
    f5a8:	e3500000 	cmp	r0, #0
    f5ac:	012fff1e 	bxeq	lr
    f5b0:	e92d4038 	push	{r3, r4, r5, lr}
    f5b4:	e59f5048 	ldr	r5, [pc, #72]	; f604 <pfree+0x5c>
    f5b8:	e5953014 	ldr	r3, [r5, #20]
    f5bc:	e3530000 	cmp	r3, #0
    f5c0:	1a000004 	bne	f5d8 <pfree+0x30>
    f5c4:	e5953018 	ldr	r3, [r5, #24]
    f5c8:	e59f2038 	ldr	r2, [pc, #56]	; f608 <pfree+0x60>
    f5cc:	e5850018 	str	r0, [r5, #24]
    f5d0:	e880000c 	stm	r0, {r2, r3}
    f5d4:	e8bd8038 	pop	{r3, r4, r5, pc}
    f5d8:	e1a04000 	mov	r4, r0
    f5dc:	ebffe9fe 	bl	9ddc <EnterCritical>
    f5e0:	e5951014 	ldr	r1, [r5, #20]
    f5e4:	e5953018 	ldr	r3, [r5, #24]
    f5e8:	e59f2018 	ldr	r2, [pc, #24]	; f608 <pfree+0x60>
    f5ec:	e3510000 	cmp	r1, #0
    f5f0:	e884000c 	stm	r4, {r2, r3}
    f5f4:	e5854018 	str	r4, [r5, #24]
    f5f8:	08bd8038 	popeq	{r3, r4, r5, pc}
    f5fc:	e8bd4038 	pop	{r3, r4, r5, lr}
    f600:	eaffea04 	b	9e18 <LeaveCritical>
    f604:	00051024 	.word	0x00051024
    f608:	50474d43 	.word	0x50474d43

0000f60c <_GLOBAL__sub_I_mem_init>:
    f60c:	e3a02001 	mov	r2, #1
    f610:	e59f3008 	ldr	r3, [pc, #8]	; f620 <_GLOBAL__sub_I_mem_init+0x14>
    f614:	e5832010 	str	r2, [r3, #16]
    f618:	e5832014 	str	r2, [r3, #20]
    f61c:	e12fff1e 	bx	lr
    f620:	00051024 	.word	0x00051024

0000f624 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    f624:	e3a02000 	mov	r2, #0
    f628:	e8800006 	stm	r0, {r1, r2}
    f62c:	e12fff1e 	bx	lr

0000f630 <CBcmMailBox::~CBcmMailBox()>:
    f630:	e12fff1e 	bx	lr

0000f634 <CBcmMailBox::Flush()>:
    f634:	e92d4010 	push	{r4, lr}
    f638:	e59f4024 	ldr	r4, [pc, #36]	; f664 <CBcmMailBox::Flush()+0x30>
    f63c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f640:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f644:	18bd8010 	popne	{r4, pc}
    f648:	e3a00014 	mov	r0, #20
    f64c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f650:	ebffed07 	bl	aa74 <CTimer::SimpleMsDelay(unsigned int)>
    f654:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f658:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f65c:	0afffff9 	beq	f648 <CBcmMailBox::Flush()+0x14>
    f660:	e8bd8010 	pop	{r4, pc}
    f664:	2000b000 	.word	0x2000b000

0000f668 <CBcmMailBox::Read()>:
    f668:	e590c000 	ldr	ip, [r0]
    f66c:	e59f1024 	ldr	r1, [pc, #36]	; f698 <CBcmMailBox::Read()+0x30>
    f670:	e5913898 	ldr	r3, [r1, #2200]	; 0x898
    f674:	e59f201c 	ldr	r2, [pc, #28]	; f698 <CBcmMailBox::Read()+0x30>
    f678:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f67c:	1afffffb 	bne	f670 <CBcmMailBox::Read()+0x8>
    f680:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    f684:	e200300f 	and	r3, r0, #15
    f688:	e15c0003 	cmp	ip, r3
    f68c:	1afffff7 	bne	f670 <CBcmMailBox::Read()+0x8>
    f690:	e3c0000f 	bic	r0, r0, #15
    f694:	e12fff1e 	bx	lr
    f698:	2000b000 	.word	0x2000b000

0000f69c <CBcmMailBox::Write(unsigned int)>:
    f69c:	e92d4038 	push	{r3, r4, r5, lr}
    f6a0:	e1a05000 	mov	r5, r0
    f6a4:	e1a04001 	mov	r4, r1
    f6a8:	e59f2034 	ldr	r2, [pc, #52]	; f6e4 <CBcmMailBox::Write(unsigned int)+0x48>
    f6ac:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    f6b0:	e3530000 	cmp	r3, #0
    f6b4:	bafffffc 	blt	f6ac <CBcmMailBox::Write(unsigned int)+0x10>
    f6b8:	e314000f 	tst	r4, #15
    f6bc:	0a000003 	beq	f6d0 <CBcmMailBox::Write(unsigned int)+0x34>
    f6c0:	e59f0020 	ldr	r0, [pc, #32]	; f6e8 <CBcmMailBox::Write(unsigned int)+0x4c>
    f6c4:	e59f1020 	ldr	r1, [pc, #32]	; f6ec <CBcmMailBox::Write(unsigned int)+0x50>
    f6c8:	e3a0205a 	mov	r2, #90	; 0x5a
    f6cc:	ebfff4f7 	bl	cab0 <assertion_failed>
    f6d0:	e5953000 	ldr	r3, [r5]
    f6d4:	e59f2008 	ldr	r2, [pc, #8]	; f6e4 <CBcmMailBox::Write(unsigned int)+0x48>
    f6d8:	e1841003 	orr	r1, r4, r3
    f6dc:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
    f6e0:	e8bd8038 	pop	{r3, r4, r5, pc}
    f6e4:	2000b000 	.word	0x2000b000
    f6e8:	00011c08 	.word	0x00011c08
    f6ec:	00011c1c 	.word	0x00011c1c

0000f6f0 <CBcmMailBox::WriteRead(unsigned int)>:
    f6f0:	e92d4070 	push	{r4, r5, r6, lr}
    f6f4:	e3a03000 	mov	r3, #0
    f6f8:	e1a05000 	mov	r5, r0
    f6fc:	e1a06001 	mov	r6, r1
    f700:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f704:	e5903004 	ldr	r3, [r0, #4]
    f708:	e3530000 	cmp	r3, #0
    f70c:	1a00001f 	bne	f790 <CBcmMailBox::WriteRead(unsigned int)+0xa0>
    f710:	e59f4080 	ldr	r4, [pc, #128]	; f798 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    f714:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f718:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f71c:	1a000005 	bne	f738 <CBcmMailBox::WriteRead(unsigned int)+0x48>
    f720:	e3a00014 	mov	r0, #20
    f724:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f728:	ebffecd1 	bl	aa74 <CTimer::SimpleMsDelay(unsigned int)>
    f72c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f730:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f734:	0afffff9 	beq	f720 <CBcmMailBox::WriteRead(unsigned int)+0x30>
    f738:	e1a01006 	mov	r1, r6
    f73c:	e1a00005 	mov	r0, r5
    f740:	ebffffd5 	bl	f69c <CBcmMailBox::Write(unsigned int)>
    f744:	e5950000 	ldr	r0, [r5]
    f748:	e59f1048 	ldr	r1, [pc, #72]	; f798 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    f74c:	e5913898 	ldr	r3, [r1, #2200]	; 0x898
    f750:	e59f2040 	ldr	r2, [pc, #64]	; f798 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    f754:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f758:	1afffffb 	bne	f74c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    f75c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    f760:	e203200f 	and	r2, r3, #15
    f764:	e1520000 	cmp	r2, r0
    f768:	1afffff7 	bne	f74c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    f76c:	e5952004 	ldr	r2, [r5, #4]
    f770:	e3c3400f 	bic	r4, r3, #15
    f774:	e3520000 	cmp	r2, #0
    f778:	0a000000 	beq	f780 <CBcmMailBox::WriteRead(unsigned int)+0x90>
    f77c:	ebffe9a5 	bl	9e18 <LeaveCritical>
    f780:	e3a03000 	mov	r3, #0
    f784:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f788:	e1a00004 	mov	r0, r4
    f78c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f790:	ebffe991 	bl	9ddc <EnterCritical>
    f794:	eaffffdd 	b	f710 <CBcmMailBox::WriteRead(unsigned int)+0x20>
    f798:	2000b000 	.word	0x2000b000

0000f79c <__aeabi_uidiv>:
    f79c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f7a0:	e3a02000 	mov	r2, #0
    f7a4:	eb000135 	bl	fc80 <__Divide>
    f7a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f7ac <__aeabi_uidivmod>:
    f7ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f7b0:	e24dd00c 	sub	sp, sp, #12
    f7b4:	e28d2004 	add	r2, sp, #4
    f7b8:	eb000130 	bl	fc80 <__Divide>
    f7bc:	e59d1004 	ldr	r1, [sp, #4]
    f7c0:	e28dd00c 	add	sp, sp, #12
    f7c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f7c8 <__aeabi_idiv>:
    f7c8:	ea000161 	b	fd54 <__DivideInteger>

0000f7cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    f7cc:	e3a01000 	mov	r1, #0
    f7d0:	e3a02c01 	mov	r2, #256	; 0x100
    f7d4:	e92d4010 	push	{r4, lr}
    f7d8:	e1a04000 	mov	r4, r0
    f7dc:	e5903020 	ldr	r3, [r0, #32]
    f7e0:	e24dd010 	sub	sp, sp, #16
    f7e4:	e583100c 	str	r1, [r3, #12]
    f7e8:	e5832010 	str	r2, [r3, #16]
    f7ec:	e28d0008 	add	r0, sp, #8
    f7f0:	ebffe49f 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    f7f4:	e59f3050 	ldr	r3, [pc, #80]	; f84c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x80>
    f7f8:	e5942020 	ldr	r2, [r4, #32]
    f7fc:	e28d0008 	add	r0, sp, #8
    f800:	e58d3000 	str	r3, [sp]
    f804:	e59f1044 	ldr	r1, [pc, #68]	; f850 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x84>
    f808:	e283300c 	add	r3, r3, #12
    f80c:	ebffe4e0 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f810:	e3500000 	cmp	r0, #0
    f814:	e28d0008 	add	r0, sp, #8
    f818:	0a000003 	beq	f82c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x60>
    f81c:	e5943020 	ldr	r3, [r4, #32]
    f820:	e593300c 	ldr	r3, [r3, #12]
    f824:	e3530000 	cmp	r3, #0
    f828:	0a000003 	beq	f83c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x70>
    f82c:	ebffe496 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    f830:	e3a00000 	mov	r0, #0
    f834:	e28dd010 	add	sp, sp, #16
    f838:	e8bd8010 	pop	{r4, pc}
    f83c:	ebffe492 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    f840:	e3a00001 	mov	r0, #1
    f844:	e28dd010 	add	sp, sp, #16
    f848:	e8bd8010 	pop	{r4, pc}
    f84c:	00000408 	.word	0x00000408
    f850:	0004800b 	.word	0x0004800b

0000f854 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    f854:	e92d4030 	push	{r4, r5, lr}
    f858:	e3520000 	cmp	r2, #0
    f85c:	13510000 	cmpne	r1, #0
    f860:	e1a04000 	mov	r4, r0
    f864:	e3a05000 	mov	r5, #0
    f868:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f86c:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
    f870:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    f874:	e8840006 	stm	r4, {r1, r2}
    f878:	e5843010 	str	r3, [r4, #16]
    f87c:	e584c00c 	str	ip, [r4, #12]
    f880:	e5840008 	str	r0, [r4, #8]
    f884:	e5845014 	str	r5, [r4, #20]
    f888:	e5845018 	str	r5, [r4, #24]
    f88c:	e584501c 	str	r5, [r4, #28]
    f890:	e5845020 	str	r5, [r4, #32]
    f894:	1a000011 	bne	f8e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
    f898:	e28d000c 	add	r0, sp, #12
    f89c:	ebffe474 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    f8a0:	e3a03014 	mov	r3, #20
    f8a4:	e28d2014 	add	r2, sp, #20
    f8a8:	e59f10b0 	ldr	r1, [pc, #176]	; f960 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
    f8ac:	e58d5000 	str	r5, [sp]
    f8b0:	e28d000c 	add	r0, sp, #12
    f8b4:	ebffe4b6 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f8b8:	e1500005 	cmp	r0, r5
    f8bc:	03a03e1e 	moveq	r3, #480	; 0x1e0
    f8c0:	03a02d0a 	moveq	r2, #640	; 0x280
    f8c4:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
    f8c8:	159d2020 	ldrne	r2, [sp, #32]
    f8cc:	e28d000c 	add	r0, sp, #12
    f8d0:	e884000c 	stm	r4, {r2, r3}
    f8d4:	ebffe46c 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    f8d8:	e5940008 	ldr	r0, [r4, #8]
    f8dc:	e5943010 	ldr	r3, [r4, #16]
    f8e0:	e3500000 	cmp	r0, #0
    f8e4:	0a000019 	beq	f950 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
    f8e8:	e594200c 	ldr	r2, [r4, #12]
    f8ec:	e3520000 	cmp	r2, #0
    f8f0:	0a000016 	beq	f950 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
    f8f4:	e3530008 	cmp	r3, #8
    f8f8:	8a000007 	bhi	f91c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    f8fc:	e59f0060 	ldr	r0, [pc, #96]	; f964 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
    f900:	ebffe932 	bl	9dd0 <operator new[](unsigned int)>
    f904:	e3a01000 	mov	r1, #0
    f908:	e5840020 	str	r0, [r4, #32]
    f90c:	e3a02b01 	mov	r2, #1024	; 0x400
    f910:	e2800014 	add	r0, r0, #20
    f914:	ebffec9e 	bl	ab94 <memset>
    f918:	e5943010 	ldr	r3, [r4, #16]
    f91c:	e5940008 	ldr	r0, [r4, #8]
    f920:	e59f2040 	ldr	r2, [pc, #64]	; f968 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    f924:	e594e000 	ldr	lr, [r4]
    f928:	e594c004 	ldr	ip, [r4, #4]
    f92c:	e594100c 	ldr	r1, [r4, #12]
    f930:	e5820020 	str	r0, [r2, #32]
    f934:	e1a00004 	mov	r0, r4
    f938:	e582e00c 	str	lr, [r2, #12]
    f93c:	e582c010 	str	ip, [r2, #16]
    f940:	e5821024 	str	r1, [r2, #36]	; 0x24
    f944:	e5823034 	str	r3, [r2, #52]	; 0x34
    f948:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f94c:	e8bd8030 	pop	{r4, r5, pc}
    f950:	e8940006 	ldm	r4, {r1, r2}
    f954:	e5841008 	str	r1, [r4, #8]
    f958:	e584200c 	str	r2, [r4, #12]
    f95c:	eaffffe4 	b	f8f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
    f960:	00040003 	.word	0x00040003
    f964:	00000414 	.word	0x00000414
    f968:	00012770 	.word	0x00012770

0000f96c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    f96c:	e92d4010 	push	{r4, lr}
    f970:	e1a04000 	mov	r4, r0
    f974:	e5900020 	ldr	r0, [r0, #32]
    f978:	ebffe915 	bl	9dd4 <operator delete(void*)>
    f97c:	e1a00004 	mov	r0, r4
    f980:	e8bd8010 	pop	{r4, pc}

0000f984 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    f984:	e5903010 	ldr	r3, [r0, #16]
    f988:	e3530008 	cmp	r3, #8
    f98c:	812fff1e 	bxhi	lr
    f990:	e202301f 	and	r3, r2, #31
    f994:	e1a0c5a2 	lsr	ip, r2, #11
    f998:	e1a03983 	lsl	r3, r3, #19
    f99c:	e5900020 	ldr	r0, [r0, #32]
    f9a0:	e183318c 	orr	r3, r3, ip, lsl #3
    f9a4:	e1a02282 	lsl	r2, r2, #5
    f9a8:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    f9ac:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    f9b0:	e0801101 	add	r1, r0, r1, lsl #2
    f9b4:	e1832002 	orr	r2, r3, r2
    f9b8:	e5812014 	str	r2, [r1, #20]
    f9bc:	e12fff1e 	bx	lr

0000f9c0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    f9c0:	e5903010 	ldr	r3, [r0, #16]
    f9c4:	e3530008 	cmp	r3, #8
    f9c8:	95903020 	ldrls	r3, [r0, #32]
    f9cc:	90831101 	addls	r1, r3, r1, lsl #2
    f9d0:	95812014 	strls	r2, [r1, #20]
    f9d4:	e12fff1e 	bx	lr

0000f9d8 <CBcmFrameBuffer::Initialize()>:
    f9d8:	e92d4070 	push	{r4, r5, r6, lr}
    f9dc:	e59f50b4 	ldr	r5, [pc, #180]	; fa98 <CBcmFrameBuffer::Initialize()+0xc0>
    f9e0:	e24dd008 	sub	sp, sp, #8
    f9e4:	e1a06000 	mov	r6, r0
    f9e8:	e1a0000d 	mov	r0, sp
    f9ec:	ebffe420 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    f9f0:	e1a0000d 	mov	r0, sp
    f9f4:	e1a01005 	mov	r1, r5
    f9f8:	e3a02070 	mov	r2, #112	; 0x70
    f9fc:	ebffe427 	bl	8aa0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    fa00:	e2504000 	subs	r4, r0, #0
    fa04:	0a00001e 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa08:	e595400c 	ldr	r4, [r5, #12]
    fa0c:	e3540000 	cmp	r4, #0
    fa10:	0a00001b 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa14:	e5954010 	ldr	r4, [r5, #16]
    fa18:	e3540000 	cmp	r4, #0
    fa1c:	0a000018 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa20:	e5954020 	ldr	r4, [r5, #32]
    fa24:	e3540000 	cmp	r4, #0
    fa28:	0a000015 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa2c:	e5954024 	ldr	r4, [r5, #36]	; 0x24
    fa30:	e3540000 	cmp	r4, #0
    fa34:	0a000012 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa38:	e5954034 	ldr	r4, [r5, #52]	; 0x34
    fa3c:	e3540000 	cmp	r4, #0
    fa40:	0a00000f 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa44:	e5954058 	ldr	r4, [r5, #88]	; 0x58
    fa48:	e3540000 	cmp	r4, #0
    fa4c:	0a00000c 	beq	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa50:	e5961010 	ldr	r1, [r6, #16]
    fa54:	e595205c 	ldr	r2, [r5, #92]	; 0x5c
    fa58:	e595306c 	ldr	r3, [r5, #108]	; 0x6c
    fa5c:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    fa60:	e3510008 	cmp	r1, #8
    fa64:	e5864014 	str	r4, [r6, #20]
    fa68:	e5862018 	str	r2, [r6, #24]
    fa6c:	e586301c 	str	r3, [r6, #28]
    fa70:	83a04001 	movhi	r4, #1
    fa74:	8a000002 	bhi	fa84 <CBcmFrameBuffer::Initialize()+0xac>
    fa78:	e1a00006 	mov	r0, r6
    fa7c:	ebffff52 	bl	f7cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    fa80:	e1a04000 	mov	r4, r0
    fa84:	e1a0000d 	mov	r0, sp
    fa88:	ebffe3ff 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    fa8c:	e1a00004 	mov	r0, r4
    fa90:	e28dd008 	add	sp, sp, #8
    fa94:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa98:	00012770 	.word	0x00012770

0000fa9c <CBcmFrameBuffer::GetWidth() const>:
    fa9c:	e5900000 	ldr	r0, [r0]
    faa0:	e12fff1e 	bx	lr

0000faa4 <CBcmFrameBuffer::GetHeight() const>:
    faa4:	e5900004 	ldr	r0, [r0, #4]
    faa8:	e12fff1e 	bx	lr

0000faac <CBcmFrameBuffer::GetVirtWidth() const>:
    faac:	e5900008 	ldr	r0, [r0, #8]
    fab0:	e12fff1e 	bx	lr

0000fab4 <CBcmFrameBuffer::GetVirtHeight() const>:
    fab4:	e590000c 	ldr	r0, [r0, #12]
    fab8:	e12fff1e 	bx	lr

0000fabc <CBcmFrameBuffer::GetPitch() const>:
    fabc:	e590001c 	ldr	r0, [r0, #28]
    fac0:	e12fff1e 	bx	lr

0000fac4 <CBcmFrameBuffer::GetDepth() const>:
    fac4:	e5900010 	ldr	r0, [r0, #16]
    fac8:	e12fff1e 	bx	lr

0000facc <CBcmFrameBuffer::GetBuffer() const>:
    facc:	e5900014 	ldr	r0, [r0, #20]
    fad0:	e12fff1e 	bx	lr

0000fad4 <CBcmFrameBuffer::GetSize() const>:
    fad4:	e5900018 	ldr	r0, [r0, #24]
    fad8:	e12fff1e 	bx	lr

0000fadc <CBcmFrameBuffer::UpdatePalette()>:
    fadc:	e5903010 	ldr	r3, [r0, #16]
    fae0:	e3530008 	cmp	r3, #8
    fae4:	9a000001 	bls	faf0 <CBcmFrameBuffer::UpdatePalette()+0x14>
    fae8:	e3a00001 	mov	r0, #1
    faec:	e12fff1e 	bx	lr
    faf0:	eaffff35 	b	f7cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000faf4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    faf4:	e92d4070 	push	{r4, r5, r6, lr}
    faf8:	e24dd028 	sub	sp, sp, #40	; 0x28
    fafc:	e28d000c 	add	r0, sp, #12
    fb00:	e1a05001 	mov	r5, r1
    fb04:	e1a06002 	mov	r6, r2
    fb08:	ebffe3d9 	bl	8a74 <CBcmPropertyTags::CBcmPropertyTags()>
    fb0c:	e3a03008 	mov	r3, #8
    fb10:	e28d000c 	add	r0, sp, #12
    fb14:	e58d3000 	str	r3, [sp]
    fb18:	e59f1048 	ldr	r1, [pc, #72]	; fb68 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
    fb1c:	e28d2014 	add	r2, sp, #20
    fb20:	e3a03014 	mov	r3, #20
    fb24:	e58d5020 	str	r5, [sp, #32]
    fb28:	e58d6024 	str	r6, [sp, #36]	; 0x24
    fb2c:	ebffe418 	bl	8b94 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fb30:	e2504000 	subs	r4, r0, #0
    fb34:	0a000006 	beq	fb54 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
    fb38:	e59d3020 	ldr	r3, [sp, #32]
    fb3c:	e1530005 	cmp	r3, r5
    fb40:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    fb44:	13a04000 	movne	r4, #0
    fb48:	00644006 	rsbeq	r4, r4, r6
    fb4c:	016f4f14 	clzeq	r4, r4
    fb50:	01a042a4 	lsreq	r4, r4, #5
    fb54:	e28d000c 	add	r0, sp, #12
    fb58:	ebffe3cb 	bl	8a8c <CBcmPropertyTags::~CBcmPropertyTags()>
    fb5c:	e1a00004 	mov	r0, r4
    fb60:	e28dd028 	add	sp, sp, #40	; 0x28
    fb64:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb68:	00048009 	.word	0x00048009

0000fb6c <CDevice::~CDevice()>:
    fb6c:	e12fff1e 	bx	lr

0000fb70 <CDevice::Read(void*, unsigned int)>:
    fb70:	e3e00000 	mvn	r0, #0
    fb74:	e12fff1e 	bx	lr

0000fb78 <CDevice::Write(void const*, unsigned int)>:
    fb78:	e3e00000 	mvn	r0, #0
    fb7c:	e12fff1e 	bx	lr

0000fb80 <CDevice::Seek(unsigned long long)>:
    fb80:	e3e00000 	mvn	r0, #0
    fb84:	e3e01000 	mvn	r1, #0
    fb88:	e12fff1e 	bx	lr

0000fb8c <CDevice::~CDevice()>:
    fb8c:	e92d4010 	push	{r4, lr}
    fb90:	e1a04000 	mov	r4, r0
    fb94:	ebffe88e 	bl	9dd4 <operator delete(void*)>
    fb98:	e1a00004 	mov	r0, r4
    fb9c:	e8bd8010 	pop	{r4, pc}

0000fba0 <CDevice::CDevice()>:
    fba0:	e59f3004 	ldr	r3, [pc, #4]	; fbac <CDevice::CDevice()+0xc>
    fba4:	e5803000 	str	r3, [r0]
    fba8:	e12fff1e 	bx	lr
    fbac:	00011c38 	.word	0x00011c38

0000fbb0 <UndefinedInstructionStub>:
    fbb0:	e24ee004 	sub	lr, lr, #4
    fbb4:	e92d4000 	stmfd	sp!, {lr}
    fbb8:	e14fe000 	mrs	lr, SPSR
    fbbc:	e92d4000 	stmfd	sp!, {lr}
    fbc0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    fbc4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fbc8:	e1a0100d 	mov	r1, sp
    fbcc:	f1020012 	cps	#18
    fbd0:	e1a0200d 	mov	r2, sp
    fbd4:	e1a0300e 	mov	r3, lr
    fbd8:	f102001f 	cps	#31
    fbdc:	e1a0d001 	mov	sp, r1
    fbe0:	e92d000c 	push	{r2, r3}
    fbe4:	e1a0100d 	mov	r1, sp
    fbe8:	e3a00001 	mov	r0, #1
    fbec:	ea0000ea 	b	ff9c <ExceptionHandler>

0000fbf0 <PrefetchAbortStub>:
    fbf0:	e24ee004 	sub	lr, lr, #4
    fbf4:	e92d4000 	stmfd	sp!, {lr}
    fbf8:	e14fe000 	mrs	lr, SPSR
    fbfc:	e92d4000 	stmfd	sp!, {lr}
    fc00:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    fc04:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fc08:	e1a0100d 	mov	r1, sp
    fc0c:	f1020012 	cps	#18
    fc10:	e1a0200d 	mov	r2, sp
    fc14:	e1a0300e 	mov	r3, lr
    fc18:	f102001f 	cps	#31
    fc1c:	e1a0d001 	mov	sp, r1
    fc20:	e92d000c 	push	{r2, r3}
    fc24:	e1a0100d 	mov	r1, sp
    fc28:	e3a00002 	mov	r0, #2
    fc2c:	ea0000da 	b	ff9c <ExceptionHandler>

0000fc30 <DataAbortStub>:
    fc30:	e24ee008 	sub	lr, lr, #8
    fc34:	e92d4000 	stmfd	sp!, {lr}
    fc38:	e14fe000 	mrs	lr, SPSR
    fc3c:	e92d4000 	stmfd	sp!, {lr}
    fc40:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    fc44:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fc48:	e1a0100d 	mov	r1, sp
    fc4c:	f1020012 	cps	#18
    fc50:	e1a0200d 	mov	r2, sp
    fc54:	e1a0300e 	mov	r3, lr
    fc58:	f102001f 	cps	#31
    fc5c:	e1a0d001 	mov	sp, r1
    fc60:	e92d000c 	push	{r2, r3}
    fc64:	e1a0100d 	mov	r1, sp
    fc68:	e3a00003 	mov	r0, #3
    fc6c:	ea0000ca 	b	ff9c <ExceptionHandler>

0000fc70 <IRQStub>:
    fc70:	e24ee004 	sub	lr, lr, #4
    fc74:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    fc78:	ebfff9b0 	bl	e340 <InterruptHandler>
    fc7c:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000fc80 <__Divide>:
    fc80:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    fc84:	e2514000 	subs	r4, r1, #0
    fc88:	e1a08000 	mov	r8, r0
    fc8c:	e1a09002 	mov	r9, r2
    fc90:	0a000021 	beq	fd1c <__Divide+0x9c>
    fc94:	e3a05000 	mov	r5, #0
    fc98:	e3a07000 	mov	r7, #0
    fc9c:	e1550007 	cmp	r5, r7
    fca0:	01540008 	cmpeq	r4, r8
    fca4:	e1a06008 	mov	r6, r8
    fca8:	2a000025 	bcs	fd44 <__Divide+0xc4>
    fcac:	e3a01001 	mov	r1, #1
    fcb0:	ea000000 	b	fcb8 <__Divide+0x38>
    fcb4:	e1a01003 	mov	r1, r3
    fcb8:	e0944004 	adds	r4, r4, r4
    fcbc:	e0a55005 	adc	r5, r5, r5
    fcc0:	e1550007 	cmp	r5, r7
    fcc4:	01540006 	cmpeq	r4, r6
    fcc8:	e2813001 	add	r3, r1, #1
    fccc:	3afffff8 	bcc	fcb4 <__Divide+0x34>
    fcd0:	e3530000 	cmp	r3, #0
    fcd4:	0a000018 	beq	fd3c <__Divide+0xbc>
    fcd8:	e3a00000 	mov	r0, #0
    fcdc:	ea000001 	b	fce8 <__Divide+0x68>
    fce0:	e1a06008 	mov	r6, r8
    fce4:	e3a07000 	mov	r7, #0
    fce8:	e1570005 	cmp	r7, r5
    fcec:	01560004 	cmpeq	r6, r4
    fcf0:	e2411001 	sub	r1, r1, #1
    fcf4:	e1a00080 	lsl	r0, r0, #1
    fcf8:	23800001 	orrcs	r0, r0, #1
    fcfc:	20648008 	rsbcs	r8, r4, r8
    fd00:	e1b050a5 	lsrs	r5, r5, #1
    fd04:	e1a04064 	rrx	r4, r4
    fd08:	e3710001 	cmn	r1, #1
    fd0c:	1afffff3 	bne	fce0 <__Divide+0x60>
    fd10:	e3590000 	cmp	r9, #0
    fd14:	15898000 	strne	r8, [r9]
    fd18:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    fd1c:	e59f1028 	ldr	r1, [pc, #40]	; fd4c <__Divide+0xcc>
    fd20:	e3a0201f 	mov	r2, #31
    fd24:	e59f0024 	ldr	r0, [pc, #36]	; fd50 <__Divide+0xd0>
    fd28:	ebfff360 	bl	cab0 <assertion_failed>
    fd2c:	eb00008c 	bl	ff64 <CExceptionHandler::Get()>
    fd30:	e1a01004 	mov	r1, r4
    fd34:	eb000044 	bl	fe4c <CExceptionHandler::Throw(unsigned int)>
    fd38:	eaffffd5 	b	fc94 <__Divide+0x14>
    fd3c:	e1a00003 	mov	r0, r3
    fd40:	eafffff2 	b	fd10 <__Divide+0x90>
    fd44:	e3a01000 	mov	r1, #0
    fd48:	eaffffe2 	b	fcd8 <__Divide+0x58>
    fd4c:	00011c50 	.word	0x00011c50
    fd50:	000116ac 	.word	0x000116ac

0000fd54 <__DivideInteger>:
    fd54:	e2502000 	subs	r2, r0, #0
    fd58:	e92d4008 	push	{r3, lr}
    fd5c:	ba000004 	blt	fd74 <__DivideInteger+0x20>
    fd60:	e3510000 	cmp	r1, #0
    fd64:	ba00000d 	blt	fda0 <__DivideInteger+0x4c>
    fd68:	e8bd4008 	pop	{r3, lr}
    fd6c:	e3a02000 	mov	r2, #0
    fd70:	eaffffc2 	b	fc80 <__Divide>
    fd74:	e3510000 	cmp	r1, #0
    fd78:	e2620000 	rsb	r0, r2, #0
    fd7c:	ba000003 	blt	fd90 <__DivideInteger+0x3c>
    fd80:	e3a02000 	mov	r2, #0
    fd84:	ebffffbd 	bl	fc80 <__Divide>
    fd88:	e2600000 	rsb	r0, r0, #0
    fd8c:	e8bd8008 	pop	{r3, pc}
    fd90:	e2611000 	rsb	r1, r1, #0
    fd94:	e3a02000 	mov	r2, #0
    fd98:	e8bd4008 	pop	{r3, lr}
    fd9c:	eaffffb7 	b	fc80 <__Divide>
    fda0:	e2611000 	rsb	r1, r1, #0
    fda4:	eafffff5 	b	fd80 <__DivideInteger+0x2c>

0000fda8 <CExceptionHandler::CExceptionHandler()>:
    fda8:	e92d4038 	push	{r3, r4, r5, lr}
    fdac:	e59f506c 	ldr	r5, [pc, #108]	; fe20 <CExceptionHandler::CExceptionHandler()+0x78>
    fdb0:	e1a04000 	mov	r4, r0
    fdb4:	e5953000 	ldr	r3, [r5]
    fdb8:	e3530000 	cmp	r3, #0
    fdbc:	0a000003 	beq	fdd0 <CExceptionHandler::CExceptionHandler()+0x28>
    fdc0:	e59f005c 	ldr	r0, [pc, #92]	; fe24 <CExceptionHandler::CExceptionHandler()+0x7c>
    fdc4:	e59f105c 	ldr	r1, [pc, #92]	; fe28 <CExceptionHandler::CExceptionHandler()+0x80>
    fdc8:	e3a0202e 	mov	r2, #46	; 0x2e
    fdcc:	ebfff337 	bl	cab0 <assertion_failed>
    fdd0:	e3a00000 	mov	r0, #0
    fdd4:	e59f1050 	ldr	r1, [pc, #80]	; fe2c <CExceptionHandler::CExceptionHandler()+0x84>
    fdd8:	e59f2050 	ldr	r2, [pc, #80]	; fe30 <CExceptionHandler::CExceptionHandler()+0x88>
    fddc:	e59f3050 	ldr	r3, [pc, #80]	; fe34 <CExceptionHandler::CExceptionHandler()+0x8c>
    fde0:	e1a01141 	asr	r1, r1, #2
    fde4:	e1a02142 	asr	r2, r2, #2
    fde8:	e1a03143 	asr	r3, r3, #2
    fdec:	e2411002 	sub	r1, r1, #2
    fdf0:	e2422002 	sub	r2, r2, #2
    fdf4:	e2433002 	sub	r3, r3, #2
    fdf8:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    fdfc:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    fe00:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    fe04:	e5854000 	str	r4, [r5]
    fe08:	e5801004 	str	r1, [r0, #4]
    fe0c:	e580200c 	str	r2, [r0, #12]
    fe10:	e5803010 	str	r3, [r0, #16]
    fe14:	ebffe828 	bl	9ebc <SyncDataAndInstructionCache>
    fe18:	e1a00004 	mov	r0, r4
    fe1c:	e8bd8038 	pop	{r3, r4, r5, pc}
    fe20:	00051040 	.word	0x00051040
    fe24:	00010474 	.word	0x00010474
    fe28:	00011c68 	.word	0x00011c68
    fe2c:	0000fbac 	.word	0x0000fbac
    fe30:	0000fbe4 	.word	0x0000fbe4
    fe34:	0000fc20 	.word	0x0000fc20

0000fe38 <CExceptionHandler::~CExceptionHandler()>:
    fe38:	e3a02000 	mov	r2, #0
    fe3c:	e59f3004 	ldr	r3, [pc, #4]	; fe48 <CExceptionHandler::~CExceptionHandler()+0x10>
    fe40:	e5832000 	str	r2, [r3]
    fe44:	e12fff1e 	bx	lr
    fe48:	00051040 	.word	0x00051040

0000fe4c <CExceptionHandler::Throw(unsigned int)>:
    fe4c:	e92d4010 	push	{r4, lr}
    fe50:	e1a04001 	mov	r4, r1
    fe54:	e24dd008 	sub	sp, sp, #8
    fe58:	ebfff48c 	bl	d090 <CLogger::Get()>
    fe5c:	e59f301c 	ldr	r3, [pc, #28]	; fe80 <CExceptionHandler::Throw(unsigned int)+0x34>
    fe60:	e59f101c 	ldr	r1, [pc, #28]	; fe84 <CExceptionHandler::Throw(unsigned int)+0x38>
    fe64:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    fe68:	e3a02000 	mov	r2, #0
    fe6c:	e58d3000 	str	r3, [sp]
    fe70:	e59f3010 	ldr	r3, [pc, #16]	; fe88 <CExceptionHandler::Throw(unsigned int)+0x3c>
    fe74:	ebfff564 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe78:	e28dd008 	add	sp, sp, #8
    fe7c:	e8bd8010 	pop	{r4, pc}
    fe80:	000127e0 	.word	0x000127e0
    fe84:	00011c60 	.word	0x00011c60
    fe88:	00011c80 	.word	0x00011c80

0000fe8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    fe8c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    fe90:	e3510002 	cmp	r1, #2
    fe94:	e24dd024 	sub	sp, sp, #36	; 0x24
    fe98:	e1a05001 	mov	r5, r1
    fe9c:	e1a04002 	mov	r4, r2
    fea0:	0a000022 	beq	ff30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
    fea4:	e3510003 	cmp	r1, #3
    fea8:	0a00001d 	beq	ff24 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x98>
    feac:	e3a08000 	mov	r8, #0
    feb0:	e1a09008 	mov	r9, r8
    feb4:	e3540000 	cmp	r4, #0
    feb8:	0a00001f 	beq	ff3c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
    febc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    fec0:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    fec4:	e203301f 	and	r3, r3, #31
    fec8:	e3530012 	cmp	r3, #18
    fecc:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    fed0:	e59f1078 	ldr	r1, [pc, #120]	; ff50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    fed4:	089400c0 	ldmeq	r4, {r6, r7}
    fed8:	e1a00006 	mov	r0, r6
    fedc:	ebfff381 	bl	cce8 <debug_stacktrace(unsigned int const*, char const*)>
    fee0:	ebfff46a 	bl	d090 <CLogger::Get()>
    fee4:	e59f3068 	ldr	r3, [pc, #104]	; ff54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
    fee8:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    feec:	e7931105 	ldr	r1, [r3, r5, lsl #2]
    fef0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    fef4:	e88d0006 	stm	sp, {r1, r2}
    fef8:	e58d3018 	str	r3, [sp, #24]
    fefc:	e58d9008 	str	r9, [sp, #8]
    ff00:	e58d800c 	str	r8, [sp, #12]
    ff04:	e58d6010 	str	r6, [sp, #16]
    ff08:	e58d7014 	str	r7, [sp, #20]
    ff0c:	e59f103c 	ldr	r1, [pc, #60]	; ff50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    ff10:	e3a02000 	mov	r2, #0
    ff14:	e59f303c 	ldr	r3, [pc, #60]	; ff58 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
    ff18:	ebfff53b 	bl	d40c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff1c:	e28dd024 	add	sp, sp, #36	; 0x24
    ff20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ff24:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    ff28:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    ff2c:	eaffffe0 	b	feb4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    ff30:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    ff34:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    ff38:	eaffffdd 	b	feb4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    ff3c:	e59f0018 	ldr	r0, [pc, #24]	; ff5c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
    ff40:	e59f1018 	ldr	r1, [pc, #24]	; ff60 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd4>
    ff44:	e3a02067 	mov	r2, #103	; 0x67
    ff48:	ebfff2d8 	bl	cab0 <assertion_failed>
    ff4c:	eaffffda 	b	febc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
    ff50:	00011c60 	.word	0x00011c60
    ff54:	000127e0 	.word	0x000127e0
    ff58:	00011c9c 	.word	0x00011c9c
    ff5c:	00011c90 	.word	0x00011c90
    ff60:	00011c68 	.word	0x00011c68

0000ff64 <CExceptionHandler::Get()>:
    ff64:	e92d4010 	push	{r4, lr}
    ff68:	e59f4020 	ldr	r4, [pc, #32]	; ff90 <CExceptionHandler::Get()+0x2c>
    ff6c:	e5940000 	ldr	r0, [r4]
    ff70:	e3500000 	cmp	r0, #0
    ff74:	18bd8010 	popne	{r4, pc}
    ff78:	e59f0014 	ldr	r0, [pc, #20]	; ff94 <CExceptionHandler::Get()+0x30>
    ff7c:	e59f1014 	ldr	r1, [pc, #20]	; ff98 <CExceptionHandler::Get()+0x34>
    ff80:	e3a0207e 	mov	r2, #126	; 0x7e
    ff84:	ebfff2c9 	bl	cab0 <assertion_failed>
    ff88:	e5940000 	ldr	r0, [r4]
    ff8c:	e8bd8010 	pop	{r4, pc}
    ff90:	00051040 	.word	0x00051040
    ff94:	0001058c 	.word	0x0001058c
    ff98:	00011c68 	.word	0x00011c68

0000ff9c <ExceptionHandler>:
    ff9c:	e92d4038 	push	{r3, r4, r5, lr}
    ffa0:	e1a05000 	mov	r5, r0
    ffa4:	e1a04001 	mov	r4, r1
    ffa8:	e3a03000 	mov	r3, #0
    ffac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ffb0:	ebffffeb 	bl	ff64 <CExceptionHandler::Get()>
    ffb4:	e1a01005 	mov	r1, r5
    ffb8:	e1a02004 	mov	r2, r4
    ffbc:	e8bd4038 	pop	{r3, r4, r5, lr}
    ffc0:	eaffffb1 	b	fe8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
