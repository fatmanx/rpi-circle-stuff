
kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8040:	f1020017 	cps	#23
    8044:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8048:	f102001b 	cps	#27
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea0007cb 	b	9f8c <sysinit>

0000805c <main>:
    805c:	e92d4010 	push	{r4, lr}
    8060:	e24dde8d 	sub	sp, sp, #2256	; 0x8d0
    8064:	e28d300c 	add	r3, sp, #12
    8068:	e1a00003 	mov	r0, r3
    806c:	e58d3004 	str	r3, [sp, #4]
    8070:	eb000076 	bl	8250 <CKernel::CKernel()>
    8074:	e59d0004 	ldr	r0, [sp, #4]
    8078:	eb00008d 	bl	82b4 <CKernel::Initialize()>
    807c:	e2504000 	subs	r4, r0, #0
    8080:	0a00000d 	beq	80bc <main+0x60>
    8084:	e59d0004 	ldr	r0, [sp, #4]
    8088:	eb0000dc 	bl	8400 <CKernel::Run()>
    808c:	e3500002 	cmp	r0, #2
    8090:	0a000006 	beq	80b0 <main+0x54>
    8094:	eb0007af 	bl	9f58 <halt>
    8098:	e3a04000 	mov	r4, #0
    809c:	e59d0004 	ldr	r0, [sp, #4]
    80a0:	eb0000b3 	bl	8374 <CKernel::~CKernel()>
    80a4:	e1a00004 	mov	r0, r4
    80a8:	e28dde8d 	add	sp, sp, #2256	; 0x8d0
    80ac:	e8bd8010 	pop	{r4, pc}
    80b0:	eb0007aa 	bl	9f60 <reboot>
    80b4:	e3a04001 	mov	r4, #1
    80b8:	eafffff7 	b	809c <main+0x40>
    80bc:	eb0007a5 	bl	9f58 <halt>
    80c0:	eafffff5 	b	809c <main+0x40>
    80c4:	00000000 	andeq	r0, r0, r0

000080c8 <isine(double)>:
    80c8:	ed9f6b4c 	vldr	d6, [pc, #304]	; 8200 <isine(double)+0x138>
    80cc:	ee807b06 	vdiv.f64	d7, d0, d6
    80d0:	eebd7bc7 	vcvt.s32.f64	s14, d7
    80d4:	eeb87bc7 	vcvt.f64.s32	d7, s14
    80d8:	ee070b46 	vmls.f64	d0, d7, d6
    80dc:	ee307b06 	vadd.f64	d7, d0, d6
    80e0:	ee875b06 	vdiv.f64	d5, d7, d6
    80e4:	eebd5bc5 	vcvt.s32.f64	s10, d5
    80e8:	eeb85bc5 	vcvt.f64.s32	d5, s10
    80ec:	ed9f4b45 	vldr	d4, [pc, #276]	; 8208 <isine(double)+0x140>
    80f0:	ee057b46 	vmls.f64	d7, d5, d6
    80f4:	ed9f5b45 	vldr	d5, [pc, #276]	; 8210 <isine(double)+0x148>
    80f8:	eeb47bc4 	vcmpe.f64	d7, d4
    80fc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8100:	eeb47bc5 	vcmpe.f64	d7, d5
    8104:	c3a03001 	movgt	r3, #1
    8108:	d3a03000 	movle	r3, #0
    810c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8110:	83a03000 	movhi	r3, #0
    8114:	92033001 	andls	r3, r3, #1
    8118:	e3530000 	cmp	r3, #0
    811c:	1e357b47 	vsubne.f64	d7, d5, d7
    8120:	13a02001 	movne	r2, #1
    8124:	1a00000c 	bne	815c <isine(double)+0x94>
    8128:	eeb47bc5 	vcmpe.f64	d7, d5
    812c:	ed9f3b39 	vldr	d3, [pc, #228]	; 8218 <isine(double)+0x150>
    8130:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8134:	eeb47bc3 	vcmpe.f64	d7, d3
    8138:	c3a03001 	movgt	r3, #1
    813c:	d3a03000 	movle	r3, #0
    8140:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8144:	83a03000 	movhi	r3, #0
    8148:	92033001 	andls	r3, r3, #1
    814c:	e3530000 	cmp	r3, #0
    8150:	1e377b45 	vsubne.f64	d7, d7, d5
    8154:	13e02000 	mvnne	r2, #0
    8158:	0a000017 	beq	81bc <isine(double)+0xf4>
    815c:	ed9f5b2f 	vldr	d5, [pc, #188]	; 8220 <isine(double)+0x158>
    8160:	ee876b05 	vdiv.f64	d6, d7, d5
    8164:	eefd6bc6 	vcvt.s32.f64	s13, d6
    8168:	ee163a90 	vmov	r3, s13
    816c:	e59f10bc 	ldr	r1, [pc, #188]	; 8230 <isine(double)+0x168>
    8170:	e1530001 	cmp	r3, r1
    8174:	0a00001e 	beq	81f4 <isine(double)+0x12c>
    8178:	ca00000d 	bgt	81b4 <isine(double)+0xec>
    817c:	e59f10b0 	ldr	r1, [pc, #176]	; 8234 <isine(double)+0x16c>
    8180:	e283c001 	add	ip, r3, #1
    8184:	e0810183 	add	r0, r1, r3, lsl #3
    8188:	e081118c 	add	r1, r1, ip, lsl #3
    818c:	ed900b00 	vldr	d0, [r0]
    8190:	eeb86be6 	vcvt.f64.s32	d6, s13
    8194:	ed914b00 	vldr	d4, [r1]
    8198:	ee067b45 	vmls.f64	d7, d6, d5
    819c:	ee344b40 	vsub.f64	d4, d4, d0
    81a0:	ee062a90 	vmov	s13, r2
    81a4:	ee040b07 	vmla.f64	d0, d4, d7
    81a8:	eeb86be6 	vcvt.f64.s32	d6, s13
    81ac:	ee260b00 	vmul.f64	d0, d6, d0
    81b0:	e12fff1e 	bx	lr
    81b4:	ed9f0b1b 	vldr	d0, [pc, #108]	; 8228 <isine(double)+0x160>
    81b8:	e12fff1e 	bx	lr
    81bc:	eeb47bc3 	vcmpe.f64	d7, d3
    81c0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    81c4:	eeb47bc6 	vcmpe.f64	d7, d6
    81c8:	c3a03001 	movgt	r3, #1
    81cc:	d3a03000 	movle	r3, #0
    81d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    81d4:	53a03000 	movpl	r3, #0
    81d8:	42033001 	andmi	r3, r3, #1
    81dc:	e3530000 	cmp	r3, #0
    81e0:	1e377b43 	vsubne.f64	d7, d7, d3
    81e4:	13e02000 	mvnne	r2, #0
    81e8:	1e347b47 	vsubne.f64	d7, d4, d7
    81ec:	03a02001 	moveq	r2, #1
    81f0:	eaffffd9 	b	815c <isine(double)+0x94>
    81f4:	e59f303c 	ldr	r3, [pc, #60]	; 8238 <isine(double)+0x170>
    81f8:	ed930b00 	vldr	d0, [r3]
    81fc:	e12fff1e 	bx	lr
    8200:	54442eea 	.word	0x54442eea
    8204:	401921fb 	.word	0x401921fb
    8208:	5443d6f4 	.word	0x5443d6f4
    820c:	3ff921fb 	.word	0x3ff921fb
    8210:	54442eea 	.word	0x54442eea
    8214:	400921fb 	.word	0x400921fb
    8218:	7f330d32 	.word	0x7f330d32
    821c:	4012d97c 	.word	0x4012d97c
    8220:	47ae147b 	.word	0x47ae147b
    8224:	3f747ae1 	.word	0x3f747ae1
	...
    8230:	0000013a 	.word	0x0000013a
    8234:	00011e40 	.word	0x00011e40
    8238:	00012810 	.word	0x00012810

0000823c <icosine(double)>:
    823c:	ed9f7b01 	vldr	d7, [pc, #4]	; 8248 <icosine(double)+0xc>
    8240:	ee370b40 	vsub.f64	d0, d7, d0
    8244:	eaffff9f 	b	80c8 <isine(double)>
    8248:	5443d6f4 	.word	0x5443d6f4
    824c:	3ff921fb 	.word	0x3ff921fb

00008250 <CKernel::CKernel()>:
    8250:	e92d4070 	push	{r4, r5, r6, lr}
    8254:	e1a04000 	mov	r4, r0
    8258:	e3a01001 	mov	r1, #1
    825c:	eb0006bf 	bl	9d60 <CMemorySystem::CMemorySystem(int)>
    8260:	e284501c 	add	r5, r4, #28
    8264:	e2840010 	add	r0, r4, #16
    8268:	eb0001bf 	bl	896c <CActLED::CActLED()>
    826c:	e1a00005 	mov	r0, r5
    8270:	eb000acc 	bl	ada8 <CKernelOptions::CKernelOptions()>
    8274:	e2840e85 	add	r0, r4, #2128	; 0x850
    8278:	e280000c 	add	r0, r0, #12
    827c:	eb0011ad 	bl	c938 <CDeviceNameService::CDeviceNameService()>
    8280:	e1a00005 	mov	r0, r5
    8284:	eb000a95 	bl	ace0 <CKernelOptions::GetWidth() const>
    8288:	e1a06000 	mov	r6, r0
    828c:	e1a00005 	mov	r0, r5
    8290:	eb000a94 	bl	ace8 <CKernelOptions::GetHeight() const>
    8294:	e1a02000 	mov	r2, r0
    8298:	e2840e86 	add	r0, r4, #2144	; 0x860
    829c:	e1a01006 	mov	r1, r6
    82a0:	e3a03000 	mov	r3, #0
    82a4:	e2800004 	add	r0, r0, #4
    82a8:	eb0010e1 	bl	c634 <CScreenDeviceExt::CScreenDeviceExt(unsigned int, unsigned int, int)>
    82ac:	e1a00004 	mov	r0, r4
    82b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000082b4 <CKernel::Initialize()>:
    82b4:	e2800e86 	add	r0, r0, #2144	; 0x860
    82b8:	e2800004 	add	r0, r0, #4
    82bc:	ea000eaa 	b	bd6c <CScreenDevice::Initialize()>

000082c0 <fact(int)>:
    82c0:	e2503000 	subs	r3, r0, #0
    82c4:	e3a00001 	mov	r0, #1
    82c8:	0a000003 	beq	82dc <fact(int)+0x1c>
    82cc:	e0000093 	mul	r0, r3, r0
    82d0:	e2533001 	subs	r3, r3, #1
    82d4:	1afffffc 	bne	82cc <fact(int)+0xc>
    82d8:	e12fff1e 	bx	lr
    82dc:	e12fff1e 	bx	lr

000082e0 <pow(float, int)>:
    82e0:	e3500000 	cmp	r0, #0
    82e4:	eddf7a07 	vldr	s15, [pc, #28]	; 8308 <pow(float, int)+0x28>
    82e8:	e2400001 	sub	r0, r0, #1
    82ec:	da000003 	ble	8300 <pow(float, int)+0x20>
    82f0:	e2400001 	sub	r0, r0, #1
    82f4:	e3700001 	cmn	r0, #1
    82f8:	ee677a80 	vmul.f32	s15, s15, s0
    82fc:	1afffffb 	bne	82f0 <pow(float, int)+0x10>
    8300:	eeb00a67 	vmov.f32	s0, s15
    8304:	e12fff1e 	bx	lr
    8308:	3f800000 	.word	0x3f800000

0000830c <sine(float)>:
    830c:	e3a01001 	mov	r1, #1
    8310:	eef06a40 	vmov.f32	s13, s0
    8314:	e1a00001 	mov	r0, r1
    8318:	eddf7a14 	vldr	s15, [pc, #80]	; 8370 <sine(float)+0x64>
    831c:	e2600000 	rsb	r0, r0, #0
    8320:	e2413001 	sub	r3, r1, #1
    8324:	e2433001 	sub	r3, r3, #1
    8328:	e3730001 	cmn	r3, #1
    832c:	ee677aa6 	vmul.f32	s15, s15, s13
    8330:	1afffffb 	bne	8324 <sine(float)+0x18>
    8334:	e1a03001 	mov	r3, r1
    8338:	e3a02001 	mov	r2, #1
    833c:	e0020293 	mul	r2, r3, r2
    8340:	e2533001 	subs	r3, r3, #1
    8344:	1afffffc 	bne	833c <sine(float)+0x30>
    8348:	ee072a10 	vmov	s14, r2
    834c:	eeb87ac7 	vcvt.f32.s32	s14, s14
    8350:	eec77a87 	vdiv.f32	s15, s15, s14
    8354:	ee070a10 	vmov	s14, r0
    8358:	eeb87ac7 	vcvt.f32.s32	s14, s14
    835c:	e2811001 	add	r1, r1, #1
    8360:	e3510006 	cmp	r1, #6
    8364:	ee070a87 	vmla.f32	s0, s15, s14
    8368:	1affffea 	bne	8318 <sine(float)+0xc>
    836c:	e12fff1e 	bx	lr
    8370:	3f800000 	.word	0x3f800000

00008374 <CKernel::~CKernel()>:
    8374:	e92d4010 	push	{r4, lr}
    8378:	e1a04000 	mov	r4, r0
    837c:	e2800e86 	add	r0, r0, #2144	; 0x860
    8380:	e2800004 	add	r0, r0, #4
    8384:	eb001098 	bl	c5ec <CScreenDeviceExt::~CScreenDeviceExt()>
    8388:	e2840e85 	add	r0, r4, #2128	; 0x850
    838c:	e280000c 	add	r0, r0, #12
    8390:	eb00117b 	bl	c984 <CDeviceNameService::~CDeviceNameService()>
    8394:	e284001c 	add	r0, r4, #28
    8398:	eb000a4b 	bl	accc <CKernelOptions::~CKernelOptions()>
    839c:	e2840010 	add	r0, r4, #16
    83a0:	eb00014c 	bl	88d8 <CActLED::~CActLED()>
    83a4:	e1a00004 	mov	r0, r4
    83a8:	eb0005c1 	bl	9ab4 <CMemorySystem::~CMemorySystem()>
    83ac:	e1a00004 	mov	r0, r4
    83b0:	e8bd8010 	pop	{r4, pc}

000083b4 <CKernel::writeln(CString)>:
    83b4:	e92d4070 	push	{r4, r5, r6, lr}
    83b8:	e2804e86 	add	r4, r0, #2144	; 0x860
    83bc:	e1a00001 	mov	r0, r1
    83c0:	e1a05001 	mov	r5, r1
    83c4:	eb001369 	bl	d170 <CString::operator char const*() const>
    83c8:	e1a06000 	mov	r6, r0
    83cc:	e1a00005 	mov	r0, r5
    83d0:	eb00137d 	bl	d1cc <CString::GetLength() const>
    83d4:	e2844004 	add	r4, r4, #4
    83d8:	e1a02000 	mov	r2, r0
    83dc:	e1a01006 	mov	r1, r6
    83e0:	e1a00004 	mov	r0, r4
    83e4:	eb00101a 	bl	c454 <CScreenDevice::Write(void const*, unsigned int)>
    83e8:	e1a00004 	mov	r0, r4
    83ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    83f0:	e59f1004 	ldr	r1, [pc, #4]	; 83fc <CKernel::writeln(CString)+0x48>
    83f4:	e3a02001 	mov	r2, #1
    83f8:	ea001015 	b	c454 <CScreenDevice::Write(void const*, unsigned int)>
    83fc:	000100d8 	.word	0x000100d8

00008400 <CKernel::Run()>:
    8400:	e92d4070 	push	{r4, r5, r6, lr}
    8404:	ed2d8b10 	vpush	{d8-d15}
    8408:	e1a04000 	mov	r4, r0
    840c:	e24dd030 	sub	sp, sp, #48	; 0x30
    8410:	e28d0010 	add	r0, sp, #16
    8414:	eb00133f 	bl	d118 <CString::CString()>
    8418:	e28d0010 	add	r0, sp, #16
    841c:	e59f2464 	ldr	r2, [pc, #1124]	; 8888 <CKernel::Run()+0x488>
    8420:	e59f3464 	ldr	r3, [pc, #1124]	; 888c <CKernel::Run()+0x48c>
    8424:	e59f1464 	ldr	r1, [pc, #1124]	; 8890 <CKernel::Run()+0x490>
    8428:	eb0015aa 	bl	dad8 <CString::Format(char const*, ...)>
    842c:	e59f5460 	ldr	r5, [pc, #1120]	; 8894 <CKernel::Run()+0x494>
    8430:	e59dc014 	ldr	ip, [sp, #20]
    8434:	e59d2018 	ldr	r2, [sp, #24]
    8438:	e59d301c 	ldr	r3, [sp, #28]
    843c:	e28d1020 	add	r1, sp, #32
    8440:	e1a00004 	mov	r0, r4
    8444:	e58dc024 	str	ip, [sp, #36]	; 0x24
    8448:	e58d2028 	str	r2, [sp, #40]	; 0x28
    844c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8450:	e58d5020 	str	r5, [sp, #32]
    8454:	ebffffd6 	bl	83b4 <CKernel::writeln(CString)>
    8458:	e28d0020 	add	r0, sp, #32
    845c:	eb0012f9 	bl	d048 <CString::~CString()>
    8460:	ed9f0bea 	vldr	d0, [pc, #936]	; 8810 <CKernel::Run()+0x410>
    8464:	ebffff17 	bl	80c8 <isine(double)>
    8468:	e28d0010 	add	r0, sp, #16
    846c:	ec532b10 	vmov	r2, r3, d0
    8470:	e59f1418 	ldr	r1, [pc, #1048]	; 8890 <CKernel::Run()+0x490>
    8474:	eb001597 	bl	dad8 <CString::Format(char const*, ...)>
    8478:	e59dc014 	ldr	ip, [sp, #20]
    847c:	e59d301c 	ldr	r3, [sp, #28]
    8480:	e59d2018 	ldr	r2, [sp, #24]
    8484:	e1a00004 	mov	r0, r4
    8488:	e28d1020 	add	r1, sp, #32
    848c:	e58dc024 	str	ip, [sp, #36]	; 0x24
    8490:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8494:	e58d2028 	str	r2, [sp, #40]	; 0x28
    8498:	e58d5020 	str	r5, [sp, #32]
    849c:	ebffffc4 	bl	83b4 <CKernel::writeln(CString)>
    84a0:	e28d0020 	add	r0, sp, #32
    84a4:	eb0012e7 	bl	d048 <CString::~CString()>
    84a8:	e3a00000 	mov	r0, #0
    84ac:	e3a0200c 	mov	r2, #12
    84b0:	e1a01000 	mov	r1, r0
    84b4:	eb0009d4 	bl	ac0c <memcpy>
    84b8:	ed9f0bd6 	vldr	d0, [pc, #856]	; 8818 <CKernel::Run()+0x418>
    84bc:	ebffff01 	bl	80c8 <isine(double)>
    84c0:	e28d0010 	add	r0, sp, #16
    84c4:	ed8d0b00 	vstr	d0, [sp]
    84c8:	e59f13c8 	ldr	r1, [pc, #968]	; 8898 <CKernel::Run()+0x498>
    84cc:	e3a02000 	mov	r2, #0
    84d0:	eb001580 	bl	dad8 <CString::Format(char const*, ...)>
    84d4:	e59dc014 	ldr	ip, [sp, #20]
    84d8:	e59d2018 	ldr	r2, [sp, #24]
    84dc:	e59d301c 	ldr	r3, [sp, #28]
    84e0:	e28d1020 	add	r1, sp, #32
    84e4:	e1a00004 	mov	r0, r4
    84e8:	e58dc024 	str	ip, [sp, #36]	; 0x24
    84ec:	e58d2028 	str	r2, [sp, #40]	; 0x28
    84f0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    84f4:	e58d5020 	str	r5, [sp, #32]
    84f8:	ebffffad 	bl	83b4 <CKernel::writeln(CString)>
    84fc:	e28d0020 	add	r0, sp, #32
    8500:	eb0012d0 	bl	d048 <CString::~CString()>
    8504:	ed9f0bc5 	vldr	d0, [pc, #788]	; 8820 <CKernel::Run()+0x420>
    8508:	ebfffeee 	bl	80c8 <isine(double)>
    850c:	e59f2388 	ldr	r2, [pc, #904]	; 889c <CKernel::Run()+0x49c>
    8510:	ed8d0b00 	vstr	d0, [sp]
    8514:	e59f3384 	ldr	r3, [pc, #900]	; 88a0 <CKernel::Run()+0x4a0>
    8518:	e28d0010 	add	r0, sp, #16
    851c:	e59f1380 	ldr	r1, [pc, #896]	; 88a4 <CKernel::Run()+0x4a4>
    8520:	eb00156c 	bl	dad8 <CString::Format(char const*, ...)>
    8524:	e59dc014 	ldr	ip, [sp, #20]
    8528:	e59d2018 	ldr	r2, [sp, #24]
    852c:	e59d301c 	ldr	r3, [sp, #28]
    8530:	e28d1020 	add	r1, sp, #32
    8534:	e1a00004 	mov	r0, r4
    8538:	e58dc024 	str	ip, [sp, #36]	; 0x24
    853c:	e58d2028 	str	r2, [sp, #40]	; 0x28
    8540:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8544:	e58d5020 	str	r5, [sp, #32]
    8548:	ebffff99 	bl	83b4 <CKernel::writeln(CString)>
    854c:	e28d0020 	add	r0, sp, #32
    8550:	eb0012bc 	bl	d048 <CString::~CString()>
    8554:	ed9f0bb3 	vldr	d0, [pc, #716]	; 8828 <CKernel::Run()+0x428>
    8558:	ebfffeda 	bl	80c8 <isine(double)>
    855c:	e59f2344 	ldr	r2, [pc, #836]	; 88a8 <CKernel::Run()+0x4a8>
    8560:	ed8d0b00 	vstr	d0, [sp]
    8564:	e59f3340 	ldr	r3, [pc, #832]	; 88ac <CKernel::Run()+0x4ac>
    8568:	e28d0010 	add	r0, sp, #16
    856c:	e59f133c 	ldr	r1, [pc, #828]	; 88b0 <CKernel::Run()+0x4b0>
    8570:	eb001558 	bl	dad8 <CString::Format(char const*, ...)>
    8574:	e59dc014 	ldr	ip, [sp, #20]
    8578:	e59d2018 	ldr	r2, [sp, #24]
    857c:	e59d301c 	ldr	r3, [sp, #28]
    8580:	e28d1020 	add	r1, sp, #32
    8584:	e1a00004 	mov	r0, r4
    8588:	e58dc024 	str	ip, [sp, #36]	; 0x24
    858c:	e58d2028 	str	r2, [sp, #40]	; 0x28
    8590:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8594:	e58d5020 	str	r5, [sp, #32]
    8598:	ebffff85 	bl	83b4 <CKernel::writeln(CString)>
    859c:	e28d0020 	add	r0, sp, #32
    85a0:	eb0012a8 	bl	d048 <CString::~CString()>
    85a4:	ed9f0ba1 	vldr	d0, [pc, #644]	; 8830 <CKernel::Run()+0x430>
    85a8:	ebfffec6 	bl	80c8 <isine(double)>
    85ac:	e59f22e8 	ldr	r2, [pc, #744]	; 889c <CKernel::Run()+0x49c>
    85b0:	ed8d0b00 	vstr	d0, [sp]
    85b4:	e59f32f8 	ldr	r3, [pc, #760]	; 88b4 <CKernel::Run()+0x4b4>
    85b8:	e28d0010 	add	r0, sp, #16
    85bc:	e59f12f4 	ldr	r1, [pc, #756]	; 88b8 <CKernel::Run()+0x4b8>
    85c0:	eb001544 	bl	dad8 <CString::Format(char const*, ...)>
    85c4:	e59dc014 	ldr	ip, [sp, #20]
    85c8:	e59d2018 	ldr	r2, [sp, #24]
    85cc:	e59d301c 	ldr	r3, [sp, #28]
    85d0:	e28d1020 	add	r1, sp, #32
    85d4:	e1a00004 	mov	r0, r4
    85d8:	e58dc024 	str	ip, [sp, #36]	; 0x24
    85dc:	e58d2028 	str	r2, [sp, #40]	; 0x28
    85e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    85e4:	e58d5020 	str	r5, [sp, #32]
    85e8:	ebffff71 	bl	83b4 <CKernel::writeln(CString)>
    85ec:	e28d0020 	add	r0, sp, #32
    85f0:	eb001294 	bl	d048 <CString::~CString()>
    85f4:	ed9f0b8f 	vldr	d0, [pc, #572]	; 8838 <CKernel::Run()+0x438>
    85f8:	ebfffeb2 	bl	80c8 <isine(double)>
    85fc:	e59f22b8 	ldr	r2, [pc, #696]	; 88bc <CKernel::Run()+0x4bc>
    8600:	ed8d0b00 	vstr	d0, [sp]
    8604:	e59f32b4 	ldr	r3, [pc, #692]	; 88c0 <CKernel::Run()+0x4c0>
    8608:	e28d0010 	add	r0, sp, #16
    860c:	e59f12b0 	ldr	r1, [pc, #688]	; 88c4 <CKernel::Run()+0x4c4>
    8610:	eb001530 	bl	dad8 <CString::Format(char const*, ...)>
    8614:	e59dc014 	ldr	ip, [sp, #20]
    8618:	e59d2018 	ldr	r2, [sp, #24]
    861c:	e59d301c 	ldr	r3, [sp, #28]
    8620:	e28d1020 	add	r1, sp, #32
    8624:	e1a00004 	mov	r0, r4
    8628:	e58dc024 	str	ip, [sp, #36]	; 0x24
    862c:	e58d2028 	str	r2, [sp, #40]	; 0x28
    8630:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8634:	e58d5020 	str	r5, [sp, #32]
    8638:	ebffff5d 	bl	83b4 <CKernel::writeln(CString)>
    863c:	e28d0020 	add	r0, sp, #32
    8640:	eb001280 	bl	d048 <CString::~CString()>
    8644:	ed9f0b7d 	vldr	d0, [pc, #500]	; 8840 <CKernel::Run()+0x440>
    8648:	ebfffe9e 	bl	80c8 <isine(double)>
    864c:	e59f2254 	ldr	r2, [pc, #596]	; 88a8 <CKernel::Run()+0x4a8>
    8650:	ed8d0b00 	vstr	d0, [sp]
    8654:	e59f326c 	ldr	r3, [pc, #620]	; 88c8 <CKernel::Run()+0x4c8>
    8658:	e28d0010 	add	r0, sp, #16
    865c:	e59f1268 	ldr	r1, [pc, #616]	; 88cc <CKernel::Run()+0x4cc>
    8660:	eb00151c 	bl	dad8 <CString::Format(char const*, ...)>
    8664:	e59dc014 	ldr	ip, [sp, #20]
    8668:	e59d2018 	ldr	r2, [sp, #24]
    866c:	e59d301c 	ldr	r3, [sp, #28]
    8670:	e1a00004 	mov	r0, r4
    8674:	e28d1020 	add	r1, sp, #32
    8678:	e58dc024 	str	ip, [sp, #36]	; 0x24
    867c:	e58d2028 	str	r2, [sp, #40]	; 0x28
    8680:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    8684:	e58d5020 	str	r5, [sp, #32]
    8688:	ebffff49 	bl	83b4 <CKernel::writeln(CString)>
    868c:	e28d0020 	add	r0, sp, #32
    8690:	e3a06000 	mov	r6, #0
    8694:	eb00126b 	bl	d048 <CString::~CString()>
    8698:	e2844e86 	add	r4, r4, #2144	; 0x860
    869c:	e2844004 	add	r4, r4, #4
    86a0:	e1a01006 	mov	r1, r6
    86a4:	e1a00004 	mov	r0, r4
    86a8:	e3a02064 	mov	r2, #100	; 0x64
    86ac:	e2866001 	add	r6, r6, #1
    86b0:	e59f3218 	ldr	r3, [pc, #536]	; 88d0 <CKernel::Run()+0x4d0>
    86b4:	eb000f9c 	bl	c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    86b8:	e3560f96 	cmp	r6, #600	; 0x258
    86bc:	1afffff7 	bne	86a0 <CKernel::Run()+0x2a0>
    86c0:	ed9feb54 	vldr	d14, [pc, #336]	; 8818 <CKernel::Run()+0x418>
    86c4:	ed9f8b5f 	vldr	d8, [pc, #380]	; 8848 <CKernel::Run()+0x448>
    86c8:	ed9fab60 	vldr	d10, [pc, #384]	; 8850 <CKernel::Run()+0x450>
    86cc:	ed9f9b61 	vldr	d9, [pc, #388]	; 8858 <CKernel::Run()+0x458>
    86d0:	ed9fdb62 	vldr	d13, [pc, #392]	; 8860 <CKernel::Run()+0x460>
    86d4:	ed9f7b63 	vldr	d7, [pc, #396]	; 8868 <CKernel::Run()+0x468>
    86d8:	eeb48bc7 	vcmpe.f64	d8, d7
    86dc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    86e0:	4a00003b 	bmi	87d4 <CKernel::Run()+0x3d4>
    86e4:	ed9f8b57 	vldr	d8, [pc, #348]	; 8848 <CKernel::Run()+0x448>
    86e8:	ee3efb0e 	vadd.f64	d15, d14, d14
    86ec:	ee388b0a 	vadd.f64	d8, d8, d10
    86f0:	ed9f7b5e 	vldr	d7, [pc, #376]	; 8870 <CKernel::Run()+0x470>
    86f4:	ee087b09 	vmla.f64	d7, d8, d9
    86f8:	ee38cb0e 	vadd.f64	d12, d8, d14
    86fc:	eefc7bc7 	vcvt.u32.f64	s15, d7
    8700:	ee3c0b4a 	vsub.f64	d0, d12, d10
    8704:	edcd7a03 	vstr	s15, [sp, #12]
    8708:	ebfffe6e 	bl	80c8 <isine(double)>
    870c:	ee200b09 	vmul.f64	d0, d0, d9
    8710:	eefd7bc0 	vcvt.s32.f64	s15, d0
    8714:	ee172a90 	vmov	r2, s15
    8718:	e59d100c 	ldr	r1, [sp, #12]
    871c:	e2822064 	add	r2, r2, #100	; 0x64
    8720:	e1a00004 	mov	r0, r4
    8724:	e3a03000 	mov	r3, #0
    8728:	eb000f7f 	bl	c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    872c:	ee3fbb08 	vadd.f64	d11, d15, d8
    8730:	ee3b0b4a 	vsub.f64	d0, d11, d10
    8734:	ee3d0b40 	vsub.f64	d0, d13, d0
    8738:	ebfffe62 	bl	80c8 <isine(double)>
    873c:	ee200b09 	vmul.f64	d0, d0, d9
    8740:	eefd7bc0 	vcvt.s32.f64	s15, d0
    8744:	ee172a90 	vmov	r2, s15
    8748:	e59d100c 	ldr	r1, [sp, #12]
    874c:	e2822064 	add	r2, r2, #100	; 0x64
    8750:	e1a00004 	mov	r0, r4
    8754:	e3a03000 	mov	r3, #0
    8758:	eb000f73 	bl	c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    875c:	eeb00b4c 	vmov.f64	d0, d12
    8760:	ebfffe58 	bl	80c8 <isine(double)>
    8764:	ee200b09 	vmul.f64	d0, d0, d9
    8768:	eefd7bc0 	vcvt.s32.f64	s15, d0
    876c:	ee172a90 	vmov	r2, s15
    8770:	e59d100c 	ldr	r1, [sp, #12]
    8774:	e2822064 	add	r2, r2, #100	; 0x64
    8778:	e1a00004 	mov	r0, r4
    877c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    8780:	eb000f69 	bl	c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8784:	ee3d0b4b 	vsub.f64	d0, d13, d11
    8788:	ebfffe4e 	bl	80c8 <isine(double)>
    878c:	ee200b09 	vmul.f64	d0, d0, d9
    8790:	eefd7bc0 	vcvt.s32.f64	s15, d0
    8794:	ee172a90 	vmov	r2, s15
    8798:	e59d100c 	ldr	r1, [sp, #12]
    879c:	e2822064 	add	r2, r2, #100	; 0x64
    87a0:	e1a00004 	mov	r0, r4
    87a4:	e3a0301f 	mov	r3, #31
    87a8:	eb000f5f 	bl	c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    87ac:	ed9f7b31 	vldr	d7, [pc, #196]	; 8878 <CKernel::Run()+0x478>
    87b0:	eeb48bc7 	vcmpe.f64	d8, d7
    87b4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    87b8:	ed9f7b24 	vldr	d7, [pc, #144]	; 8850 <CKernel::Run()+0x450>
    87bc:	4affffca 	bmi	86ec <CKernel::Run()+0x2ec>
    87c0:	ee3eeb07 	vadd.f64	d14, d14, d7
    87c4:	ed9f7b27 	vldr	d7, [pc, #156]	; 8868 <CKernel::Run()+0x468>
    87c8:	eeb48bc7 	vcmpe.f64	d8, d7
    87cc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    87d0:	5affffc3 	bpl	86e4 <CKernel::Run()+0x2e4>
    87d4:	ed9f7b29 	vldr	d7, [pc, #164]	; 8880 <CKernel::Run()+0x480>
    87d8:	ee388b07 	vadd.f64	d8, d8, d7
    87dc:	ed9f6b23 	vldr	d6, [pc, #140]	; 8870 <CKernel::Run()+0x470>
    87e0:	ee287b09 	vmul.f64	d7, d8, d9
    87e4:	ee286b06 	vmul.f64	d6, d8, d6
    87e8:	eefd7bc7 	vcvt.s32.f64	s15, d7
    87ec:	ee172a90 	vmov	r2, s15
    87f0:	eefc7bc6 	vcvt.u32.f64	s15, d6
    87f4:	e2822064 	add	r2, r2, #100	; 0x64
    87f8:	ee171a90 	vmov	r1, s15
    87fc:	e1a00004 	mov	r0, r4
    8800:	e59f30c8 	ldr	r3, [pc, #200]	; 88d0 <CKernel::Run()+0x4d0>
    8804:	eb000f48 	bl	c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8808:	eaffffb1 	b	86d4 <CKernel::Run()+0x2d4>
    880c:	e1a00000 	nop			; (mov r0, r0)
    8810:	00000000 	.word	0x00000000
    8814:	3ff00000 	.word	0x3ff00000
	...
    8820:	54442eea 	.word	0x54442eea
    8824:	3ff921fb 	.word	0x3ff921fb
    8828:	382d749c 	.word	0x382d749c
    882c:	3ff0c152 	.word	0x3ff0c152
    8830:	54442eea 	.word	0x54442eea
    8834:	3fe921fb 	.word	0x3fe921fb
    8838:	769cf255 	.word	0x769cf255
    883c:	3fe41b2f 	.word	0x3fe41b2f
    8840:	382d749c 	.word	0x382d749c
    8844:	3fe0c152 	.word	0x3fe0c152
    8848:	54442eea 	.word	0x54442eea
    884c:	c00921fb 	.word	0xc00921fb
    8850:	47ae147b 	.word	0x47ae147b
    8854:	3f847ae1 	.word	0x3f847ae1
    8858:	00000000 	.word	0x00000000
    885c:	40490000 	.word	0x40490000
    8860:	5443d6f4 	.word	0x5443d6f4
    8864:	3ff921fb 	.word	0x3ff921fb
    8868:	54442eea 	.word	0x54442eea
    886c:	401921fb 	.word	0x401921fb
    8870:	00000000 	.word	0x00000000
    8874:	40590000 	.word	0x40590000
    8878:	54442eea 	.word	0x54442eea
    887c:	402921fb 	.word	0x402921fb
    8880:	40000000 	.word	0x40000000
    8884:	3f847ae1 	.word	0x3f847ae1
    8888:	9999999a 	.word	0x9999999a
    888c:	3fb99999 	.word	0x3fb99999
    8890:	000100dc 	.word	0x000100dc
    8894:	00011750 	.word	0x00011750
    8898:	000100e4 	.word	0x000100e4
    889c:	54442eea 	.word	0x54442eea
    88a0:	3ff921fb 	.word	0x3ff921fb
    88a4:	000100f0 	.word	0x000100f0
    88a8:	382d749c 	.word	0x382d749c
    88ac:	3ff0c152 	.word	0x3ff0c152
    88b0:	000100fc 	.word	0x000100fc
    88b4:	3fe921fb 	.word	0x3fe921fb
    88b8:	00010108 	.word	0x00010108
    88bc:	769cf255 	.word	0x769cf255
    88c0:	3fe41b2f 	.word	0x3fe41b2f
    88c4:	00010114 	.word	0x00010114
    88c8:	3fe0c152 	.word	0x3fe0c152
    88cc:	00010120 	.word	0x00010120
    88d0:	0000ffdf 	.word	0x0000ffdf
    88d4:	e1a00000 	nop			; (mov r0, r0)

000088d8 <CActLED::~CActLED()>:
    88d8:	e3a02000 	mov	r2, #0
    88dc:	e59f3004 	ldr	r3, [pc, #4]	; 88e8 <CActLED::~CActLED()+0x10>
    88e0:	e5832000 	str	r2, [r3]
    88e4:	e12fff1e 	bx	lr
    88e8:	00012900 	.word	0x00012900

000088ec <CActLED::On()>:
    88ec:	e5903000 	ldr	r3, [r0]
    88f0:	e3530000 	cmp	r3, #0
    88f4:	0a000004 	beq	890c <CActLED::On()+0x20>
    88f8:	e5901008 	ldr	r1, [r0, #8]
    88fc:	e1a00003 	mov	r0, r3
    8900:	e2911000 	adds	r1, r1, #0
    8904:	13a01001 	movne	r1, #1
    8908:	ea0000f0 	b	8cd0 <CGPIOPin::Write(unsigned int)>
    890c:	e5903004 	ldr	r3, [r0, #4]
    8910:	e3530000 	cmp	r3, #0
    8914:	012fff1e 	bxeq	lr
    8918:	e5901008 	ldr	r1, [r0, #8]
    891c:	e1a00003 	mov	r0, r3
    8920:	e2911000 	adds	r1, r1, #0
    8924:	13a01001 	movne	r1, #1
    8928:	ea001662 	b	e2b8 <CVirtualGPIOPin::Write(unsigned int)>

0000892c <CActLED::Off()>:
    892c:	e5903000 	ldr	r3, [r0]
    8930:	e3530000 	cmp	r3, #0
    8934:	0a000004 	beq	894c <CActLED::Off()+0x20>
    8938:	e5901008 	ldr	r1, [r0, #8]
    893c:	e1a00003 	mov	r0, r3
    8940:	e16f1f11 	clz	r1, r1
    8944:	e1a012a1 	lsr	r1, r1, #5
    8948:	ea0000e0 	b	8cd0 <CGPIOPin::Write(unsigned int)>
    894c:	e5903004 	ldr	r3, [r0, #4]
    8950:	e3530000 	cmp	r3, #0
    8954:	012fff1e 	bxeq	lr
    8958:	e5901008 	ldr	r1, [r0, #8]
    895c:	e1a00003 	mov	r0, r3
    8960:	e16f1f11 	clz	r1, r1
    8964:	e1a012a1 	lsr	r1, r1, #5
    8968:	ea001652 	b	e2b8 <CVirtualGPIOPin::Write(unsigned int)>

0000896c <CActLED::CActLED()>:
    896c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8970:	e3a05000 	mov	r5, #0
    8974:	e1a04000 	mov	r4, r0
    8978:	e24dd024 	sub	sp, sp, #36	; 0x24
    897c:	e59f3100 	ldr	r3, [pc, #256]	; 8a84 <CActLED::CActLED()+0x118>
    8980:	e5805000 	str	r5, [r0]
    8984:	e5805004 	str	r5, [r0, #4]
    8988:	e28d0008 	add	r0, sp, #8
    898c:	e5834000 	str	r4, [r3]
    8990:	eb000055 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    8994:	e58d5000 	str	r5, [sp]
    8998:	e28d0008 	add	r0, sp, #8
    899c:	e59f10e4 	ldr	r1, [pc, #228]	; 8a88 <CActLED::CActLED()+0x11c>
    89a0:	e28d2010 	add	r2, sp, #16
    89a4:	e3a03010 	mov	r3, #16
    89a8:	eb000097 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    89ac:	e1500005 	cmp	r0, r5
    89b0:	0a000011 	beq	89fc <CActLED::CActLED()+0x90>
    89b4:	e59d301c 	ldr	r3, [sp, #28]
    89b8:	e3130502 	tst	r3, #8388608	; 0x800000
    89bc:	1a000013 	bne	8a10 <CActLED::CActLED()+0xa4>
    89c0:	e6ff3073 	uxth	r3, r3
    89c4:	e353000f 	cmp	r3, #15
    89c8:	83a05001 	movhi	r5, #1
    89cc:	9a000021 	bls	8a58 <CActLED::CActLED()+0xec>
    89d0:	e3a00024 	mov	r0, #36	; 0x24
    89d4:	eb00051a 	bl	9e44 <operator new(unsigned int)>
    89d8:	e1a06000 	mov	r6, r0
    89dc:	e3a0102f 	mov	r1, #47	; 0x2f
    89e0:	e3a02001 	mov	r2, #1
    89e4:	e3a03000 	mov	r3, #0
    89e8:	eb0003ab 	bl	989c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    89ec:	e5846000 	str	r6, [r4]
    89f0:	e5845008 	str	r5, [r4, #8]
    89f4:	e1a00004 	mov	r0, r4
    89f8:	ebffffcb 	bl	892c <CActLED::Off()>
    89fc:	e28d0008 	add	r0, sp, #8
    8a00:	eb00003f 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    8a04:	e1a00004 	mov	r0, r4
    8a08:	e28dd024 	add	sp, sp, #36	; 0x24
    8a0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8a10:	e1a03223 	lsr	r3, r3, #4
    8a14:	e6ef3073 	uxtb	r3, r3
    8a18:	e2436009 	sub	r6, r3, #9
    8a1c:	e16f6f16 	clz	r6, r6
    8a20:	e3530001 	cmp	r3, #1
    8a24:	e1a062a6 	lsr	r6, r6, #5
    8a28:	9a00000a 	bls	8a58 <CActLED::CActLED()+0xec>
    8a2c:	e3530008 	cmp	r3, #8
    8a30:	12265001 	eorne	r5, r6, #1
    8a34:	1affffe5 	bne	89d0 <CActLED::CActLED()+0x64>
    8a38:	e3a00010 	mov	r0, #16
    8a3c:	eb000500 	bl	9e44 <operator new(unsigned int)>
    8a40:	e1a07000 	mov	r7, r0
    8a44:	e1a01005 	mov	r1, r5
    8a48:	eb00164e 	bl	e388 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8a4c:	e2265001 	eor	r5, r6, #1
    8a50:	e5847004 	str	r7, [r4, #4]
    8a54:	eaffffe5 	b	89f0 <CActLED::CActLED()+0x84>
    8a58:	e3a00024 	mov	r0, #36	; 0x24
    8a5c:	eb0004f8 	bl	9e44 <operator new(unsigned int)>
    8a60:	e3a03000 	mov	r3, #0
    8a64:	e3a01010 	mov	r1, #16
    8a68:	e3a02001 	mov	r2, #1
    8a6c:	e1a05000 	mov	r5, r0
    8a70:	eb000389 	bl	989c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8a74:	e3a03000 	mov	r3, #0
    8a78:	e5845000 	str	r5, [r4]
    8a7c:	e5843008 	str	r3, [r4, #8]
    8a80:	eaffffdb 	b	89f4 <CActLED::CActLED()+0x88>
    8a84:	00012900 	.word	0x00012900
    8a88:	00010002 	.word	0x00010002

00008a8c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8a8c:	e3510000 	cmp	r1, #0
    8a90:	012fff1e 	bxeq	lr
    8a94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a98:	e1a08003 	mov	r8, r3
    8a9c:	e1a07002 	mov	r7, r2
    8aa0:	e1a05000 	mov	r5, r0
    8aa4:	e1a06001 	mov	r6, r1
    8aa8:	e3a04001 	mov	r4, #1
    8aac:	e1a00005 	mov	r0, r5
    8ab0:	ebffff8d 	bl	88ec <CActLED::On()>
    8ab4:	e1a00007 	mov	r0, r7
    8ab8:	eb00080b 	bl	aaec <CTimer::SimpleMsDelay(unsigned int)>
    8abc:	e1a00005 	mov	r0, r5
    8ac0:	ebffff99 	bl	892c <CActLED::Off()>
    8ac4:	e2844001 	add	r4, r4, #1
    8ac8:	e1a00008 	mov	r0, r8
    8acc:	eb000806 	bl	aaec <CTimer::SimpleMsDelay(unsigned int)>
    8ad0:	e1560004 	cmp	r6, r4
    8ad4:	2afffff4 	bcs	8aac <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8ad8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008adc <CActLED::Get()>:
    8adc:	e59f3004 	ldr	r3, [pc, #4]	; 8ae8 <CActLED::Get()+0xc>
    8ae0:	e5930000 	ldr	r0, [r3]
    8ae4:	e12fff1e 	bx	lr
    8ae8:	00012900 	.word	0x00012900

00008aec <CBcmPropertyTags::CBcmPropertyTags()>:
    8aec:	e92d4010 	push	{r4, lr}
    8af0:	e1a04000 	mov	r4, r0
    8af4:	e3a01008 	mov	r1, #8
    8af8:	eb0019bb 	bl	f1ec <CBcmMailBox::CBcmMailBox(unsigned int)>
    8afc:	e1a00004 	mov	r0, r4
    8b00:	e8bd8010 	pop	{r4, pc}

00008b04 <CBcmPropertyTags::~CBcmPropertyTags()>:
    8b04:	e92d4010 	push	{r4, lr}
    8b08:	e1a04000 	mov	r4, r0
    8b0c:	eb0019b9 	bl	f1f8 <CBcmMailBox::~CBcmMailBox()>
    8b10:	e1a00004 	mov	r0, r4
    8b14:	e8bd8010 	pop	{r4, pc}

00008b18 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    8b18:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    8b1c:	e2518000 	subs	r8, r1, #0
    8b20:	e1a09000 	mov	r9, r0
    8b24:	e1a04002 	mov	r4, r2
    8b28:	0a00002c 	beq	8be0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc8>
    8b2c:	e3540010 	cmp	r4, #16
    8b30:	3a000025 	bcc	8bcc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xb4>
    8b34:	e284700c 	add	r7, r4, #12
    8b38:	e3170003 	tst	r7, #3
    8b3c:	1a00001d 	bne	8bb8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8b40:	e3a06501 	mov	r6, #4194304	; 0x400000
    8b44:	e3a05000 	mov	r5, #0
    8b48:	e5867000 	str	r7, [r6]
    8b4c:	e5865004 	str	r5, [r6, #4]
    8b50:	e1a01008 	mov	r1, r8
    8b54:	e1a02004 	mov	r2, r4
    8b58:	e59f0094 	ldr	r0, [pc, #148]	; 8bf4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
    8b5c:	eb00082a 	bl	ac0c <memcpy>
    8b60:	e2843008 	add	r3, r4, #8
    8b64:	e0833006 	add	r3, r3, r6
    8b68:	e5835000 	str	r5, [r3]
    8b6c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    8b70:	e59f7080 	ldr	r7, [pc, #128]	; 8bf8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
    8b74:	e1a00009 	mov	r0, r9
    8b78:	e1a01007 	mov	r1, r7
    8b7c:	eb0019cd 	bl	f2b8 <CBcmMailBox::WriteRead(unsigned int)>
    8b80:	e1500007 	cmp	r0, r7
    8b84:	0a000001 	beq	8b90 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8b88:	e3a00000 	mov	r0, #0
    8b8c:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    8b90:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    8b94:	e5963004 	ldr	r3, [r6, #4]
    8b98:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8b9c:	1afffff9 	bne	8b88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    8ba0:	e1a00008 	mov	r0, r8
    8ba4:	e1a02004 	mov	r2, r4
    8ba8:	e59f1044 	ldr	r1, [pc, #68]	; 8bf4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
    8bac:	eb000816 	bl	ac0c <memcpy>
    8bb0:	e3a00001 	mov	r0, #1
    8bb4:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    8bb8:	e59f003c 	ldr	r0, [pc, #60]	; 8bfc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    8bbc:	e59f103c 	ldr	r1, [pc, #60]	; 8c00 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    8bc0:	e3a02051 	mov	r2, #81	; 0x51
    8bc4:	eb000eaa 	bl	c674 <assertion_failed>
    8bc8:	eaffffdc 	b	8b40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    8bcc:	e59f0030 	ldr	r0, [pc, #48]	; 8c04 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xec>
    8bd0:	e59f1028 	ldr	r1, [pc, #40]	; 8c00 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    8bd4:	e3a0204f 	mov	r2, #79	; 0x4f
    8bd8:	eb000ea5 	bl	c674 <assertion_failed>
    8bdc:	eaffffd4 	b	8b34 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    8be0:	e59f0020 	ldr	r0, [pc, #32]	; 8c08 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
    8be4:	e59f1014 	ldr	r1, [pc, #20]	; 8c00 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    8be8:	e3a0204e 	mov	r2, #78	; 0x4e
    8bec:	eb000ea0 	bl	c674 <assertion_failed>
    8bf0:	eaffffcd 	b	8b2c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    8bf4:	00400008 	.word	0x00400008
    8bf8:	40400000 	.word	0x40400000
    8bfc:	00010178 	.word	0x00010178
    8c00:	00010138 	.word	0x00010138
    8c04:	0001014c 	.word	0x0001014c
    8c08:	0001012c 	.word	0x0001012c

00008c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8c0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c10:	e2524000 	subs	r4, r2, #0
    8c14:	e1a07000 	mov	r7, r0
    8c18:	e1a08001 	mov	r8, r1
    8c1c:	e1a05003 	mov	r5, r3
    8c20:	e59d6018 	ldr	r6, [sp, #24]
    8c24:	0a00001b 	beq	8c98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x8c>
    8c28:	e3550010 	cmp	r5, #16
    8c2c:	3a000014 	bcc	8c84 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8c30:	e245300c 	sub	r3, r5, #12
    8c34:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8c38:	e5846008 	str	r6, [r4, #8]
    8c3c:	e5848000 	str	r8, [r4]
    8c40:	e1a00007 	mov	r0, r7
    8c44:	e5843004 	str	r3, [r4, #4]
    8c48:	e1a02005 	mov	r2, r5
    8c4c:	e1a01004 	mov	r1, r4
    8c50:	ebffffb0 	bl	8b18 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8c54:	e3500000 	cmp	r0, #0
    8c58:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8c5c:	e5940008 	ldr	r0, [r4, #8]
    8c60:	e3500000 	cmp	r0, #0
    8c64:	ba000001 	blt	8c70 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8c68:	e3a00000 	mov	r0, #0
    8c6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c70:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8c74:	e5840008 	str	r0, [r4, #8]
    8c78:	e2900000 	adds	r0, r0, #0
    8c7c:	13a00001 	movne	r0, #1
    8c80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c84:	e59f0020 	ldr	r0, [pc, #32]	; 8cac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa0>
    8c88:	e59f1020 	ldr	r1, [pc, #32]	; 8cb0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa4>
    8c8c:	e3a02032 	mov	r2, #50	; 0x32
    8c90:	eb000e77 	bl	c674 <assertion_failed>
    8c94:	eaffffe5 	b	8c30 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    8c98:	e59f0014 	ldr	r0, [pc, #20]	; 8cb4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa8>
    8c9c:	e59f100c 	ldr	r1, [pc, #12]	; 8cb0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xa4>
    8ca0:	e3a02031 	mov	r2, #49	; 0x31
    8ca4:	eb000e72 	bl	c674 <assertion_failed>
    8ca8:	eaffffde 	b	8c28 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    8cac:	0001019c 	.word	0x0001019c
    8cb0:	00010138 	.word	0x00010138
    8cb4:	00010190 	.word	0x00010190

00008cb8 <CGPIOPin::~CGPIOPin()>:
    8cb8:	e12fff1e 	bx	lr

00008cbc <CGPIOPin::~CGPIOPin()>:
    8cbc:	e92d4010 	push	{r4, lr}
    8cc0:	e1a04000 	mov	r4, r0
    8cc4:	eb000460 	bl	9e4c <operator delete(void*)>
    8cc8:	e1a00004 	mov	r0, r4
    8ccc:	e8bd8010 	pop	{r4, pc}

00008cd0 <CGPIOPin::Write(unsigned int)>:
    8cd0:	e92d4038 	push	{r3, r4, r5, lr}
    8cd4:	e5903008 	ldr	r3, [r0, #8]
    8cd8:	e1a05000 	mov	r5, r0
    8cdc:	e3530003 	cmp	r3, #3
    8ce0:	e1a04001 	mov	r4, r1
    8ce4:	ca000018 	bgt	8d4c <CGPIOPin::Write(unsigned int)+0x7c>
    8ce8:	e3a03000 	mov	r3, #0
    8cec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8cf0:	e3540001 	cmp	r4, #1
    8cf4:	9a000003 	bls	8d08 <CGPIOPin::Write(unsigned int)+0x38>
    8cf8:	e59f007c 	ldr	r0, [pc, #124]	; 8d7c <CGPIOPin::Write(unsigned int)+0xac>
    8cfc:	e59f107c 	ldr	r1, [pc, #124]	; 8d80 <CGPIOPin::Write(unsigned int)+0xb0>
    8d00:	e3a02081 	mov	r2, #129	; 0x81
    8d04:	eb000e5a 	bl	c674 <assertion_failed>
    8d08:	e5953004 	ldr	r3, [r5, #4]
    8d0c:	e585400c 	str	r4, [r5, #12]
    8d10:	e3530035 	cmp	r3, #53	; 0x35
    8d14:	8a000011 	bhi	8d60 <CGPIOPin::Write(unsigned int)+0x90>
    8d18:	e59f2064 	ldr	r2, [pc, #100]	; 8d84 <CGPIOPin::Write(unsigned int)+0xb4>
    8d1c:	e59f0064 	ldr	r0, [pc, #100]	; 8d88 <CGPIOPin::Write(unsigned int)+0xb8>
    8d20:	e3540000 	cmp	r4, #0
    8d24:	e3a01001 	mov	r1, #1
    8d28:	11a04002 	movne	r4, r2
    8d2c:	01a04000 	moveq	r4, r0
    8d30:	e203201f 	and	r2, r3, #31
    8d34:	e1a02211 	lsl	r2, r1, r2
    8d38:	e1a032a3 	lsr	r3, r3, #5
    8d3c:	e7842103 	str	r2, [r4, r3, lsl #2]
    8d40:	e3a03000 	mov	r3, #0
    8d44:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8d48:	e8bd8038 	pop	{r3, r4, r5, pc}
    8d4c:	e59f0038 	ldr	r0, [pc, #56]	; 8d8c <CGPIOPin::Write(unsigned int)+0xbc>
    8d50:	e59f1028 	ldr	r1, [pc, #40]	; 8d80 <CGPIOPin::Write(unsigned int)+0xb0>
    8d54:	e3a0207d 	mov	r2, #125	; 0x7d
    8d58:	eb000e45 	bl	c674 <assertion_failed>
    8d5c:	eaffffe1 	b	8ce8 <CGPIOPin::Write(unsigned int)+0x18>
    8d60:	e59f0028 	ldr	r0, [pc, #40]	; 8d90 <CGPIOPin::Write(unsigned int)+0xc0>
    8d64:	e59f1014 	ldr	r1, [pc, #20]	; 8d80 <CGPIOPin::Write(unsigned int)+0xb0>
    8d68:	e3a02084 	mov	r2, #132	; 0x84
    8d6c:	eb000e40 	bl	c674 <assertion_failed>
    8d70:	e595400c 	ldr	r4, [r5, #12]
    8d74:	e5953004 	ldr	r3, [r5, #4]
    8d78:	eaffffe6 	b	8d18 <CGPIOPin::Write(unsigned int)+0x48>
    8d7c:	00010220 	.word	0x00010220
    8d80:	00010214 	.word	0x00010214
    8d84:	2020001c 	.word	0x2020001c
    8d88:	20200028 	.word	0x20200028
    8d8c:	000101f0 	.word	0x000101f0
    8d90:	00010240 	.word	0x00010240

00008d94 <CGPIOPin::Read() const>:
    8d94:	e5903008 	ldr	r3, [r0, #8]
    8d98:	e92d4010 	push	{r4, lr}
    8d9c:	e2432002 	sub	r2, r3, #2
    8da0:	e3530000 	cmp	r3, #0
    8da4:	13520001 	cmpne	r2, #1
    8da8:	e1a04000 	mov	r4, r0
    8dac:	9a000003 	bls	8dc0 <CGPIOPin::Read() const+0x2c>
    8db0:	e59f0068 	ldr	r0, [pc, #104]	; 8e20 <CGPIOPin::Read() const+0x8c>
    8db4:	e59f1068 	ldr	r1, [pc, #104]	; 8e24 <CGPIOPin::Read() const+0x90>
    8db8:	e3a02091 	mov	r2, #145	; 0x91
    8dbc:	eb000e2c 	bl	c674 <assertion_failed>
    8dc0:	e3a03000 	mov	r3, #0
    8dc4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8dc8:	e5943004 	ldr	r3, [r4, #4]
    8dcc:	e3530035 	cmp	r3, #53	; 0x35
    8dd0:	8a00000c 	bhi	8e08 <CGPIOPin::Read() const+0x74>
    8dd4:	e59f204c 	ldr	r2, [pc, #76]	; 8e28 <CGPIOPin::Read() const+0x94>
    8dd8:	e1a012a3 	lsr	r1, r3, #5
    8ddc:	e0812002 	add	r2, r1, r2
    8de0:	e1a02102 	lsl	r2, r2, #2
    8de4:	e5922000 	ldr	r2, [r2]
    8de8:	e3a01000 	mov	r1, #0
    8dec:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
    8df0:	e3a01001 	mov	r1, #1
    8df4:	e203301f 	and	r3, r3, #31
    8df8:	e0123311 	ands	r3, r2, r1, lsl r3
    8dfc:	11a00001 	movne	r0, r1
    8e00:	03a00000 	moveq	r0, #0
    8e04:	e8bd8010 	pop	{r4, pc}
    8e08:	e59f001c 	ldr	r0, [pc, #28]	; 8e2c <CGPIOPin::Read() const+0x98>
    8e0c:	e59f1010 	ldr	r1, [pc, #16]	; 8e24 <CGPIOPin::Read() const+0x90>
    8e10:	e3a02095 	mov	r2, #149	; 0x95
    8e14:	eb000e16 	bl	c674 <assertion_failed>
    8e18:	e5943004 	ldr	r3, [r4, #4]
    8e1c:	eaffffec 	b	8dd4 <CGPIOPin::Read() const+0x40>
    8e20:	00010254 	.word	0x00010254
    8e24:	00010214 	.word	0x00010214
    8e28:	0808000d 	.word	0x0808000d
    8e2c:	00010240 	.word	0x00010240

00008e30 <CGPIOPin::Invert()>:
    8e30:	e5903008 	ldr	r3, [r0, #8]
    8e34:	e92d4010 	push	{r4, lr}
    8e38:	e3530001 	cmp	r3, #1
    8e3c:	e1a04000 	mov	r4, r0
    8e40:	0a000003 	beq	8e54 <CGPIOPin::Invert()+0x24>
    8e44:	e59f001c 	ldr	r0, [pc, #28]	; 8e68 <CGPIOPin::Invert()+0x38>
    8e48:	e59f101c 	ldr	r1, [pc, #28]	; 8e6c <CGPIOPin::Invert()+0x3c>
    8e4c:	e3a020a2 	mov	r2, #162	; 0xa2
    8e50:	eb000e07 	bl	c674 <assertion_failed>
    8e54:	e594100c 	ldr	r1, [r4, #12]
    8e58:	e1a00004 	mov	r0, r4
    8e5c:	e8bd4010 	pop	{r4, lr}
    8e60:	e2211001 	eor	r1, r1, #1
    8e64:	eaffff99 	b	8cd0 <CGPIOPin::Write(unsigned int)>
    8e68:	000102b0 	.word	0x000102b0
    8e6c:	00010214 	.word	0x00010214

00008e70 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8e70:	e5903008 	ldr	r3, [r0, #8]
    8e74:	e92d4070 	push	{r4, r5, r6, lr}
    8e78:	e1a05001 	mov	r5, r1
    8e7c:	e2431002 	sub	r1, r3, #2
    8e80:	e3530000 	cmp	r3, #0
    8e84:	13510001 	cmpne	r1, #1
    8e88:	e1a04000 	mov	r4, r0
    8e8c:	e1a06002 	mov	r6, r2
    8e90:	9a000003 	bls	8ea4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x34>
    8e94:	e59f00b8 	ldr	r0, [pc, #184]	; 8f54 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe4>
    8e98:	e59f10b8 	ldr	r1, [pc, #184]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8e9c:	e3a020ab 	mov	r2, #171	; 0xab
    8ea0:	eb000df3 	bl	c674 <assertion_failed>
    8ea4:	e594301c 	ldr	r3, [r4, #28]
    8ea8:	e3530006 	cmp	r3, #6
    8eac:	0a000003 	beq	8ec0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x50>
    8eb0:	e59f00a4 	ldr	r0, [pc, #164]	; 8f5c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xec>
    8eb4:	e59f109c 	ldr	r1, [pc, #156]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8eb8:	e3a020ad 	mov	r2, #173	; 0xad
    8ebc:	eb000dec 	bl	c674 <assertion_failed>
    8ec0:	e5943020 	ldr	r3, [r4, #32]
    8ec4:	e3530006 	cmp	r3, #6
    8ec8:	0a000003 	beq	8edc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x6c>
    8ecc:	e59f008c 	ldr	r0, [pc, #140]	; 8f60 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf0>
    8ed0:	e59f1080 	ldr	r1, [pc, #128]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8ed4:	e3a020ae 	mov	r2, #174	; 0xae
    8ed8:	eb000de5 	bl	c674 <assertion_failed>
    8edc:	e3550000 	cmp	r5, #0
    8ee0:	0a000016 	beq	8f40 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    8ee4:	e5943014 	ldr	r3, [r4, #20]
    8ee8:	e3530000 	cmp	r3, #0
    8eec:	0a000003 	beq	8f00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
    8ef0:	e59f006c 	ldr	r0, [pc, #108]	; 8f64 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>
    8ef4:	e59f105c 	ldr	r1, [pc, #92]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8ef8:	e3a020b1 	mov	r2, #177	; 0xb1
    8efc:	eb000ddc 	bl	c674 <assertion_failed>
    8f00:	e5940010 	ldr	r0, [r4, #16]
    8f04:	e5845014 	str	r5, [r4, #20]
    8f08:	e3500000 	cmp	r0, #0
    8f0c:	e5846018 	str	r6, [r4, #24]
    8f10:	0a000002 	beq	8f20 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    8f14:	e1a01004 	mov	r1, r4
    8f18:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f1c:	ea00144a 	b	e04c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8f20:	e59f0040 	ldr	r0, [pc, #64]	; 8f68 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    8f24:	e59f102c 	ldr	r1, [pc, #44]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8f28:	e3a020b6 	mov	r2, #182	; 0xb6
    8f2c:	eb000dd0 	bl	c674 <assertion_failed>
    8f30:	e5940010 	ldr	r0, [r4, #16]
    8f34:	e1a01004 	mov	r1, r4
    8f38:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f3c:	ea001442 	b	e04c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8f40:	e59f0024 	ldr	r0, [pc, #36]	; 8f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xfc>
    8f44:	e59f100c 	ldr	r1, [pc, #12]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8f48:	e3a020b0 	mov	r2, #176	; 0xb0
    8f4c:	eb000dc8 	bl	c674 <assertion_failed>
    8f50:	eaffffe3 	b	8ee4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>
    8f54:	00010254 	.word	0x00010254
    8f58:	00010214 	.word	0x00010214
    8f5c:	000102cc 	.word	0x000102cc
    8f60:	000102f0 	.word	0x000102f0
    8f64:	00010328 	.word	0x00010328
    8f68:	00010338 	.word	0x00010338
    8f6c:	00010318 	.word	0x00010318

00008f70 <CGPIOPin::DisconnectInterrupt()>:
    8f70:	e5903008 	ldr	r3, [r0, #8]
    8f74:	e92d4010 	push	{r4, lr}
    8f78:	e2432002 	sub	r2, r3, #2
    8f7c:	e3530000 	cmp	r3, #0
    8f80:	13520001 	cmpne	r2, #1
    8f84:	e1a04000 	mov	r4, r0
    8f88:	9a000003 	bls	8f9c <CGPIOPin::DisconnectInterrupt()+0x2c>
    8f8c:	e59f00a0 	ldr	r0, [pc, #160]	; 9034 <CGPIOPin::DisconnectInterrupt()+0xc4>
    8f90:	e59f10a0 	ldr	r1, [pc, #160]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8f94:	e3a020be 	mov	r2, #190	; 0xbe
    8f98:	eb000db5 	bl	c674 <assertion_failed>
    8f9c:	e594301c 	ldr	r3, [r4, #28]
    8fa0:	e3530006 	cmp	r3, #6
    8fa4:	0a000003 	beq	8fb8 <CGPIOPin::DisconnectInterrupt()+0x48>
    8fa8:	e59f008c 	ldr	r0, [pc, #140]	; 903c <CGPIOPin::DisconnectInterrupt()+0xcc>
    8fac:	e59f1084 	ldr	r1, [pc, #132]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8fb0:	e3a020c0 	mov	r2, #192	; 0xc0
    8fb4:	eb000dae 	bl	c674 <assertion_failed>
    8fb8:	e5943020 	ldr	r3, [r4, #32]
    8fbc:	e3530006 	cmp	r3, #6
    8fc0:	0a000003 	beq	8fd4 <CGPIOPin::DisconnectInterrupt()+0x64>
    8fc4:	e59f0074 	ldr	r0, [pc, #116]	; 9040 <CGPIOPin::DisconnectInterrupt()+0xd0>
    8fc8:	e59f1068 	ldr	r1, [pc, #104]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xc8>
    8fcc:	e3a020c1 	mov	r2, #193	; 0xc1
    8fd0:	eb000da7 	bl	c674 <assertion_failed>
    8fd4:	e5943014 	ldr	r3, [r4, #20]
    8fd8:	e3530000 	cmp	r3, #0
    8fdc:	0a00000f 	beq	9020 <CGPIOPin::DisconnectInterrupt()+0xb0>
    8fe0:	e3a03000 	mov	r3, #0
    8fe4:	e5940010 	ldr	r0, [r4, #16]
    8fe8:	e5843014 	str	r3, [r4, #20]
    8fec:	e1500003 	cmp	r0, r3
    8ff0:	0a000002 	beq	9000 <CGPIOPin::DisconnectInterrupt()+0x90>
    8ff4:	e1a01004 	mov	r1, r4
    8ff8:	e8bd4010 	pop	{r4, lr}
    8ffc:	ea00143b 	b	e0f0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9000:	e59f003c 	ldr	r0, [pc, #60]	; 9044 <CGPIOPin::DisconnectInterrupt()+0xd4>
    9004:	e59f102c 	ldr	r1, [pc, #44]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xc8>
    9008:	e3a020c6 	mov	r2, #198	; 0xc6
    900c:	eb000d98 	bl	c674 <assertion_failed>
    9010:	e5940010 	ldr	r0, [r4, #16]
    9014:	e1a01004 	mov	r1, r4
    9018:	e8bd4010 	pop	{r4, lr}
    901c:	ea001433 	b	e0f0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9020:	e59f0020 	ldr	r0, [pc, #32]	; 9048 <CGPIOPin::DisconnectInterrupt()+0xd8>
    9024:	e59f100c 	ldr	r1, [pc, #12]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xc8>
    9028:	e3a020c3 	mov	r2, #195	; 0xc3
    902c:	eb000d90 	bl	c674 <assertion_failed>
    9030:	eaffffea 	b	8fe0 <CGPIOPin::DisconnectInterrupt()+0x70>
    9034:	00010254 	.word	0x00010254
    9038:	00010214 	.word	0x00010214
    903c:	000102cc 	.word	0x000102cc
    9040:	000102f0 	.word	0x000102f0
    9044:	00010338 	.word	0x00010338
    9048:	00010348 	.word	0x00010348

0000904c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    904c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    9050:	e5903008 	ldr	r3, [r0, #8]
    9054:	e1a05000 	mov	r5, r0
    9058:	e2432002 	sub	r2, r3, #2
    905c:	e3530000 	cmp	r3, #0
    9060:	13520001 	cmpne	r2, #1
    9064:	e1a04001 	mov	r4, r1
    9068:	9a000003 	bls	907c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x30>
    906c:	e59f0128 	ldr	r0, [pc, #296]	; 919c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x150>
    9070:	e59f1128 	ldr	r1, [pc, #296]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9074:	e3a020ce 	mov	r2, #206	; 0xce
    9078:	eb000d7d 	bl	c674 <assertion_failed>
    907c:	e5953010 	ldr	r3, [r5, #16]
    9080:	e3530000 	cmp	r3, #0
    9084:	0a00003a 	beq	9174 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x128>
    9088:	e5953014 	ldr	r3, [r5, #20]
    908c:	e3530000 	cmp	r3, #0
    9090:	0a00003c 	beq	9188 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x13c>
    9094:	e595301c 	ldr	r3, [r5, #28]
    9098:	e3530006 	cmp	r3, #6
    909c:	0a000003 	beq	90b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x64>
    90a0:	e59f00fc 	ldr	r0, [pc, #252]	; 91a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x158>
    90a4:	e59f10f4 	ldr	r1, [pc, #244]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    90a8:	e3a020d2 	mov	r2, #210	; 0xd2
    90ac:	eb000d70 	bl	c674 <assertion_failed>
    90b0:	e3540005 	cmp	r4, #5
    90b4:	ca000022 	bgt	9144 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf8>
    90b8:	e5953020 	ldr	r3, [r5, #32]
    90bc:	e1530004 	cmp	r3, r4
    90c0:	0a000026 	beq	9160 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    90c4:	e5953004 	ldr	r3, [r5, #4]
    90c8:	e585401c 	str	r4, [r5, #28]
    90cc:	e3530035 	cmp	r3, #53	; 0x35
    90d0:	8a000015 	bhi	912c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe0>
    90d4:	e3a02001 	mov	r2, #1
    90d8:	e59f70c8 	ldr	r7, [pc, #200]	; 91a8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x15c>
    90dc:	e59f60c8 	ldr	r6, [pc, #200]	; 91ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x160>
    90e0:	e5971000 	ldr	r1, [r7]
    90e4:	e203501f 	and	r5, r3, #31
    90e8:	e0844084 	add	r4, r4, r4, lsl #1
    90ec:	e1a032a3 	lsr	r3, r3, #5
    90f0:	e3510000 	cmp	r1, #0
    90f4:	e1a04104 	lsl	r4, r4, #2
    90f8:	e1a05512 	lsl	r5, r2, r5
    90fc:	e0836006 	add	r6, r3, r6
    9100:	1a000007 	bne	9124 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
    9104:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    9108:	e1835005 	orr	r5, r3, r5
    910c:	e7845106 	str	r5, [r4, r6, lsl #2]
    9110:	e5973000 	ldr	r3, [r7]
    9114:	e3530000 	cmp	r3, #0
    9118:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    911c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    9120:	ea00035a 	b	9e90 <LeaveCritical>
    9124:	eb00034a 	bl	9e54 <EnterCritical>
    9128:	eafffff5 	b	9104 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb8>
    912c:	e59f007c 	ldr	r0, [pc, #124]	; 91b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x164>
    9130:	e59f1068 	ldr	r1, [pc, #104]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9134:	e3a020d7 	mov	r2, #215	; 0xd7
    9138:	eb000d4d 	bl	c674 <assertion_failed>
    913c:	e5953004 	ldr	r3, [r5, #4]
    9140:	eaffffe3 	b	90d4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x88>
    9144:	e59f0068 	ldr	r0, [pc, #104]	; 91b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x168>
    9148:	e59f1050 	ldr	r1, [pc, #80]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    914c:	e3a020d3 	mov	r2, #211	; 0xd3
    9150:	eb000d47 	bl	c674 <assertion_failed>
    9154:	e5953020 	ldr	r3, [r5, #32]
    9158:	e1530004 	cmp	r3, r4
    915c:	1affffd8 	bne	90c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    9160:	e59f0050 	ldr	r0, [pc, #80]	; 91b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x16c>
    9164:	e59f1034 	ldr	r1, [pc, #52]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9168:	e3a020d4 	mov	r2, #212	; 0xd4
    916c:	eb000d40 	bl	c674 <assertion_failed>
    9170:	eaffffd3 	b	90c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    9174:	e59f0040 	ldr	r0, [pc, #64]	; 91bc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x170>
    9178:	e59f1020 	ldr	r1, [pc, #32]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    917c:	e3a020cf 	mov	r2, #207	; 0xcf
    9180:	eb000d3b 	bl	c674 <assertion_failed>
    9184:	eaffffbf 	b	9088 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x3c>
    9188:	e59f0030 	ldr	r0, [pc, #48]	; 91c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x174>
    918c:	e59f100c 	ldr	r1, [pc, #12]	; 91a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x154>
    9190:	e3a020d0 	mov	r2, #208	; 0xd0
    9194:	eb000d36 	bl	c674 <assertion_failed>
    9198:	eaffffbd 	b	9094 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x48>
    919c:	00010254 	.word	0x00010254
    91a0:	00010214 	.word	0x00010214
    91a4:	000102cc 	.word	0x000102cc
    91a8:	00012904 	.word	0x00012904
    91ac:	08080013 	.word	0x08080013
    91b0:	00010240 	.word	0x00010240
    91b4:	00010358 	.word	0x00010358
    91b8:	0001037c 	.word	0x0001037c
    91bc:	00010338 	.word	0x00010338
    91c0:	00010348 	.word	0x00010348

000091c4 <CGPIOPin::DisableInterrupt()>:
    91c4:	e5903008 	ldr	r3, [r0, #8]
    91c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91cc:	e2432002 	sub	r2, r3, #2
    91d0:	e3530000 	cmp	r3, #0
    91d4:	13520001 	cmpne	r2, #1
    91d8:	e1a05000 	mov	r5, r0
    91dc:	9a000003 	bls	91f0 <CGPIOPin::DisableInterrupt()+0x2c>
    91e0:	e59f00b0 	ldr	r0, [pc, #176]	; 9298 <CGPIOPin::DisableInterrupt()+0xd4>
    91e4:	e59f10b0 	ldr	r1, [pc, #176]	; 929c <CGPIOPin::DisableInterrupt()+0xd8>
    91e8:	e3a020e8 	mov	r2, #232	; 0xe8
    91ec:	eb000d20 	bl	c674 <assertion_failed>
    91f0:	e595301c 	ldr	r3, [r5, #28]
    91f4:	e3530005 	cmp	r3, #5
    91f8:	ca000021 	bgt	9284 <CGPIOPin::DisableInterrupt()+0xc0>
    91fc:	e5953004 	ldr	r3, [r5, #4]
    9200:	e3530035 	cmp	r3, #53	; 0x35
    9204:	8a000018 	bhi	926c <CGPIOPin::DisableInterrupt()+0xa8>
    9208:	e3a02001 	mov	r2, #1
    920c:	e59f808c 	ldr	r8, [pc, #140]	; 92a0 <CGPIOPin::DisableInterrupt()+0xdc>
    9210:	e595401c 	ldr	r4, [r5, #28]
    9214:	e5981000 	ldr	r1, [r8]
    9218:	e59f6084 	ldr	r6, [pc, #132]	; 92a4 <CGPIOPin::DisableInterrupt()+0xe0>
    921c:	e203701f 	and	r7, r3, #31
    9220:	e0844084 	add	r4, r4, r4, lsl #1
    9224:	e1a032a3 	lsr	r3, r3, #5
    9228:	e3510000 	cmp	r1, #0
    922c:	e1a04104 	lsl	r4, r4, #2
    9230:	e1a07712 	lsl	r7, r2, r7
    9234:	e0836006 	add	r6, r3, r6
    9238:	1a000009 	bne	9264 <CGPIOPin::DisableInterrupt()+0xa0>
    923c:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    9240:	e1c33007 	bic	r3, r3, r7
    9244:	e7843106 	str	r3, [r4, r6, lsl #2]
    9248:	e5983000 	ldr	r3, [r8]
    924c:	e3530000 	cmp	r3, #0
    9250:	0a000000 	beq	9258 <CGPIOPin::DisableInterrupt()+0x94>
    9254:	eb00030d 	bl	9e90 <LeaveCritical>
    9258:	e3a03006 	mov	r3, #6
    925c:	e585301c 	str	r3, [r5, #28]
    9260:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9264:	eb0002fa 	bl	9e54 <EnterCritical>
    9268:	eafffff3 	b	923c <CGPIOPin::DisableInterrupt()+0x78>
    926c:	e59f0034 	ldr	r0, [pc, #52]	; 92a8 <CGPIOPin::DisableInterrupt()+0xe4>
    9270:	e59f1024 	ldr	r1, [pc, #36]	; 929c <CGPIOPin::DisableInterrupt()+0xd8>
    9274:	e3a020ec 	mov	r2, #236	; 0xec
    9278:	eb000cfd 	bl	c674 <assertion_failed>
    927c:	e5953004 	ldr	r3, [r5, #4]
    9280:	eaffffe0 	b	9208 <CGPIOPin::DisableInterrupt()+0x44>
    9284:	e59f0020 	ldr	r0, [pc, #32]	; 92ac <CGPIOPin::DisableInterrupt()+0xe8>
    9288:	e59f100c 	ldr	r1, [pc, #12]	; 929c <CGPIOPin::DisableInterrupt()+0xd8>
    928c:	e3a020ea 	mov	r2, #234	; 0xea
    9290:	eb000cf7 	bl	c674 <assertion_failed>
    9294:	eaffffd8 	b	91fc <CGPIOPin::DisableInterrupt()+0x38>
    9298:	00010254 	.word	0x00010254
    929c:	00010214 	.word	0x00010214
    92a0:	00012904 	.word	0x00012904
    92a4:	08080013 	.word	0x08080013
    92a8:	00010240 	.word	0x00010240
    92ac:	00010398 	.word	0x00010398

000092b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    92b0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    92b4:	e5903008 	ldr	r3, [r0, #8]
    92b8:	e1a05000 	mov	r5, r0
    92bc:	e2432002 	sub	r2, r3, #2
    92c0:	e3530000 	cmp	r3, #0
    92c4:	13520001 	cmpne	r2, #1
    92c8:	e1a04001 	mov	r4, r1
    92cc:	9a000003 	bls	92e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x30>
    92d0:	e59f0128 	ldr	r0, [pc, #296]	; 9400 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x150>
    92d4:	e59f1128 	ldr	r1, [pc, #296]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    92d8:	e3a020fe 	mov	r2, #254	; 0xfe
    92dc:	eb000ce4 	bl	c674 <assertion_failed>
    92e0:	e5953010 	ldr	r3, [r5, #16]
    92e4:	e3530000 	cmp	r3, #0
    92e8:	0a00003a 	beq	93d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    92ec:	e5953014 	ldr	r3, [r5, #20]
    92f0:	e3530000 	cmp	r3, #0
    92f4:	0a00003c 	beq	93ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x13c>
    92f8:	e5953020 	ldr	r3, [r5, #32]
    92fc:	e3530006 	cmp	r3, #6
    9300:	0a000003 	beq	9314 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x64>
    9304:	e59f00fc 	ldr	r0, [pc, #252]	; 9408 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x158>
    9308:	e59f10f4 	ldr	r1, [pc, #244]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    930c:	e59f20f8 	ldr	r2, [pc, #248]	; 940c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x15c>
    9310:	eb000cd7 	bl	c674 <assertion_failed>
    9314:	e3540005 	cmp	r4, #5
    9318:	ca000022 	bgt	93a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
    931c:	e595301c 	ldr	r3, [r5, #28]
    9320:	e1530004 	cmp	r3, r4
    9324:	0a000026 	beq	93c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    9328:	e5953004 	ldr	r3, [r5, #4]
    932c:	e5854020 	str	r4, [r5, #32]
    9330:	e3530035 	cmp	r3, #53	; 0x35
    9334:	8a000015 	bhi	9390 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe0>
    9338:	e3a02001 	mov	r2, #1
    933c:	e59f70cc 	ldr	r7, [pc, #204]	; 9410 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x160>
    9340:	e59f60cc 	ldr	r6, [pc, #204]	; 9414 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x164>
    9344:	e5971000 	ldr	r1, [r7]
    9348:	e203501f 	and	r5, r3, #31
    934c:	e0844084 	add	r4, r4, r4, lsl #1
    9350:	e1a032a3 	lsr	r3, r3, #5
    9354:	e3510000 	cmp	r1, #0
    9358:	e1a04104 	lsl	r4, r4, #2
    935c:	e1a05512 	lsl	r5, r2, r5
    9360:	e0836006 	add	r6, r3, r6
    9364:	1a000007 	bne	9388 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
    9368:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    936c:	e1835005 	orr	r5, r3, r5
    9370:	e7845106 	str	r5, [r4, r6, lsl #2]
    9374:	e5973000 	ldr	r3, [r7]
    9378:	e3530000 	cmp	r3, #0
    937c:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    9380:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    9384:	ea0002c1 	b	9e90 <LeaveCritical>
    9388:	eb0002b1 	bl	9e54 <EnterCritical>
    938c:	eafffff5 	b	9368 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb8>
    9390:	e59f0080 	ldr	r0, [pc, #128]	; 9418 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x168>
    9394:	e59f1068 	ldr	r1, [pc, #104]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    9398:	e59f207c 	ldr	r2, [pc, #124]	; 941c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x16c>
    939c:	eb000cb4 	bl	c674 <assertion_failed>
    93a0:	e5953004 	ldr	r3, [r5, #4]
    93a4:	eaffffe3 	b	9338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x88>
    93a8:	e59f0070 	ldr	r0, [pc, #112]	; 9420 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x170>
    93ac:	e59f1050 	ldr	r1, [pc, #80]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    93b0:	e59f206c 	ldr	r2, [pc, #108]	; 9424 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x174>
    93b4:	eb000cae 	bl	c674 <assertion_failed>
    93b8:	e595301c 	ldr	r3, [r5, #28]
    93bc:	e1530004 	cmp	r3, r4
    93c0:	1affffd8 	bne	9328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    93c4:	e59f005c 	ldr	r0, [pc, #92]	; 9428 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x178>
    93c8:	e59f1034 	ldr	r1, [pc, #52]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    93cc:	e3a02f41 	mov	r2, #260	; 0x104
    93d0:	eb000ca7 	bl	c674 <assertion_failed>
    93d4:	eaffffd3 	b	9328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    93d8:	e59f004c 	ldr	r0, [pc, #76]	; 942c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x17c>
    93dc:	e59f1020 	ldr	r1, [pc, #32]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    93e0:	e3a020ff 	mov	r2, #255	; 0xff
    93e4:	eb000ca2 	bl	c674 <assertion_failed>
    93e8:	eaffffbf 	b	92ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x3c>
    93ec:	e59f003c 	ldr	r0, [pc, #60]	; 9430 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x180>
    93f0:	e59f100c 	ldr	r1, [pc, #12]	; 9404 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x154>
    93f4:	e3a02c01 	mov	r2, #256	; 0x100
    93f8:	eb000c9d 	bl	c674 <assertion_failed>
    93fc:	eaffffbd 	b	92f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x48>
    9400:	00010254 	.word	0x00010254
    9404:	00010214 	.word	0x00010214
    9408:	000102f0 	.word	0x000102f0
    940c:	00000102 	.word	0x00000102
    9410:	00012904 	.word	0x00012904
    9414:	08080013 	.word	0x08080013
    9418:	00010240 	.word	0x00010240
    941c:	00000107 	.word	0x00000107
    9420:	00010358 	.word	0x00010358
    9424:	00000103 	.word	0x00000103
    9428:	000103bc 	.word	0x000103bc
    942c:	00010338 	.word	0x00010338
    9430:	00010348 	.word	0x00010348

00009434 <CGPIOPin::DisableInterrupt2()>:
    9434:	e5903008 	ldr	r3, [r0, #8]
    9438:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    943c:	e2432002 	sub	r2, r3, #2
    9440:	e3530000 	cmp	r3, #0
    9444:	13520001 	cmpne	r2, #1
    9448:	e1a05000 	mov	r5, r0
    944c:	9a000003 	bls	9460 <CGPIOPin::DisableInterrupt2()+0x2c>
    9450:	e59f00b0 	ldr	r0, [pc, #176]	; 9508 <CGPIOPin::DisableInterrupt2()+0xd4>
    9454:	e59f10b0 	ldr	r1, [pc, #176]	; 950c <CGPIOPin::DisableInterrupt2()+0xd8>
    9458:	e3a02f46 	mov	r2, #280	; 0x118
    945c:	eb000c84 	bl	c674 <assertion_failed>
    9460:	e5953020 	ldr	r3, [r5, #32]
    9464:	e3530005 	cmp	r3, #5
    9468:	ca000021 	bgt	94f4 <CGPIOPin::DisableInterrupt2()+0xc0>
    946c:	e5953004 	ldr	r3, [r5, #4]
    9470:	e3530035 	cmp	r3, #53	; 0x35
    9474:	8a000018 	bhi	94dc <CGPIOPin::DisableInterrupt2()+0xa8>
    9478:	e3a02001 	mov	r2, #1
    947c:	e59f808c 	ldr	r8, [pc, #140]	; 9510 <CGPIOPin::DisableInterrupt2()+0xdc>
    9480:	e5954020 	ldr	r4, [r5, #32]
    9484:	e5981000 	ldr	r1, [r8]
    9488:	e59f6084 	ldr	r6, [pc, #132]	; 9514 <CGPIOPin::DisableInterrupt2()+0xe0>
    948c:	e203701f 	and	r7, r3, #31
    9490:	e0844084 	add	r4, r4, r4, lsl #1
    9494:	e1a032a3 	lsr	r3, r3, #5
    9498:	e3510000 	cmp	r1, #0
    949c:	e1a04104 	lsl	r4, r4, #2
    94a0:	e1a07712 	lsl	r7, r2, r7
    94a4:	e0836006 	add	r6, r3, r6
    94a8:	1a000009 	bne	94d4 <CGPIOPin::DisableInterrupt2()+0xa0>
    94ac:	e7943106 	ldr	r3, [r4, r6, lsl #2]
    94b0:	e1c33007 	bic	r3, r3, r7
    94b4:	e7843106 	str	r3, [r4, r6, lsl #2]
    94b8:	e5983000 	ldr	r3, [r8]
    94bc:	e3530000 	cmp	r3, #0
    94c0:	0a000000 	beq	94c8 <CGPIOPin::DisableInterrupt2()+0x94>
    94c4:	eb000271 	bl	9e90 <LeaveCritical>
    94c8:	e3a03006 	mov	r3, #6
    94cc:	e5853020 	str	r3, [r5, #32]
    94d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    94d4:	eb00025e 	bl	9e54 <EnterCritical>
    94d8:	eafffff3 	b	94ac <CGPIOPin::DisableInterrupt2()+0x78>
    94dc:	e59f0034 	ldr	r0, [pc, #52]	; 9518 <CGPIOPin::DisableInterrupt2()+0xe4>
    94e0:	e59f1024 	ldr	r1, [pc, #36]	; 950c <CGPIOPin::DisableInterrupt2()+0xd8>
    94e4:	e3a02f47 	mov	r2, #284	; 0x11c
    94e8:	eb000c61 	bl	c674 <assertion_failed>
    94ec:	e5953004 	ldr	r3, [r5, #4]
    94f0:	eaffffe0 	b	9478 <CGPIOPin::DisableInterrupt2()+0x44>
    94f4:	e59f0020 	ldr	r0, [pc, #32]	; 951c <CGPIOPin::DisableInterrupt2()+0xe8>
    94f8:	e59f100c 	ldr	r1, [pc, #12]	; 950c <CGPIOPin::DisableInterrupt2()+0xd8>
    94fc:	e59f201c 	ldr	r2, [pc, #28]	; 9520 <CGPIOPin::DisableInterrupt2()+0xec>
    9500:	eb000c5b 	bl	c674 <assertion_failed>
    9504:	eaffffd8 	b	946c <CGPIOPin::DisableInterrupt2()+0x38>
    9508:	00010254 	.word	0x00010254
    950c:	00010214 	.word	0x00010214
    9510:	00012904 	.word	0x00012904
    9514:	08080013 	.word	0x08080013
    9518:	00010240 	.word	0x00010240
    951c:	000103d8 	.word	0x000103d8
    9520:	0000011a 	.word	0x0000011a

00009524 <CGPIOPin::SetPullUpMode(unsigned int)>:
    9524:	e5903004 	ldr	r3, [r0, #4]
    9528:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    952c:	e3530035 	cmp	r3, #53	; 0x35
    9530:	e1a04000 	mov	r4, r0
    9534:	e1a08001 	mov	r8, r1
    9538:	8a000022 	bhi	95c8 <CGPIOPin::SetPullUpMode(unsigned int)+0xa4>
    953c:	e59f609c 	ldr	r6, [pc, #156]	; 95e0 <CGPIOPin::SetPullUpMode(unsigned int)+0xbc>
    9540:	e59f209c 	ldr	r2, [pc, #156]	; 95e4 <CGPIOPin::SetPullUpMode(unsigned int)+0xc0>
    9544:	e5960000 	ldr	r0, [r6]
    9548:	e1a012a3 	lsr	r1, r3, #5
    954c:	e0812002 	add	r2, r1, r2
    9550:	e3500000 	cmp	r0, #0
    9554:	e1a05102 	lsl	r5, r2, #2
    9558:	e203401f 	and	r4, r3, #31
    955c:	1a000017 	bne	95c0 <CGPIOPin::SetPullUpMode(unsigned int)+0x9c>
    9560:	e3580002 	cmp	r8, #2
    9564:	8a000010 	bhi	95ac <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    9568:	e59f7078 	ldr	r7, [pc, #120]	; 95e8 <CGPIOPin::SetPullUpMode(unsigned int)+0xc4>
    956c:	e3a00005 	mov	r0, #5
    9570:	e5878094 	str	r8, [r7, #148]	; 0x94
    9574:	eb000563 	bl	ab08 <CTimer::SimpleusDelay(unsigned int)>
    9578:	e3a03001 	mov	r3, #1
    957c:	e1a03413 	lsl	r3, r3, r4
    9580:	e5853000 	str	r3, [r5]
    9584:	e3a00005 	mov	r0, #5
    9588:	eb00055e 	bl	ab08 <CTimer::SimpleusDelay(unsigned int)>
    958c:	e3a03000 	mov	r3, #0
    9590:	e5873094 	str	r3, [r7, #148]	; 0x94
    9594:	e5853000 	str	r3, [r5]
    9598:	e5963000 	ldr	r3, [r6]
    959c:	e3530000 	cmp	r3, #0
    95a0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    95a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95a8:	ea000238 	b	9e90 <LeaveCritical>
    95ac:	e59f0038 	ldr	r0, [pc, #56]	; 95ec <CGPIOPin::SetPullUpMode(unsigned int)+0xc8>
    95b0:	e59f1038 	ldr	r1, [pc, #56]	; 95f0 <CGPIOPin::SetPullUpMode(unsigned int)+0xcc>
    95b4:	e59f2038 	ldr	r2, [pc, #56]	; 95f4 <CGPIOPin::SetPullUpMode(unsigned int)+0xd0>
    95b8:	eb000c2d 	bl	c674 <assertion_failed>
    95bc:	eaffffe9 	b	9568 <CGPIOPin::SetPullUpMode(unsigned int)+0x44>
    95c0:	eb000223 	bl	9e54 <EnterCritical>
    95c4:	eaffffe5 	b	9560 <CGPIOPin::SetPullUpMode(unsigned int)+0x3c>
    95c8:	e59f0028 	ldr	r0, [pc, #40]	; 95f8 <CGPIOPin::SetPullUpMode(unsigned int)+0xd4>
    95cc:	e59f101c 	ldr	r1, [pc, #28]	; 95f0 <CGPIOPin::SetPullUpMode(unsigned int)+0xcc>
    95d0:	e59f2024 	ldr	r2, [pc, #36]	; 95fc <CGPIOPin::SetPullUpMode(unsigned int)+0xd8>
    95d4:	eb000c26 	bl	c674 <assertion_failed>
    95d8:	e5943004 	ldr	r3, [r4, #4]
    95dc:	eaffffd6 	b	953c <CGPIOPin::SetPullUpMode(unsigned int)+0x18>
    95e0:	00012904 	.word	0x00012904
    95e4:	08080026 	.word	0x08080026
    95e8:	20200000 	.word	0x20200000
    95ec:	000103fc 	.word	0x000103fc
    95f0:	00010214 	.word	0x00010214
    95f4:	00000133 	.word	0x00000133
    95f8:	00010240 	.word	0x00010240
    95fc:	0000012d 	.word	0x0000012d

00009600 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9600:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    9604:	e5903004 	ldr	r3, [r0, #4]
    9608:	e1a04000 	mov	r4, r0
    960c:	e3530035 	cmp	r3, #53	; 0x35
    9610:	e1a06001 	mov	r6, r1
    9614:	8a000021 	bhi	96a0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    9618:	e59f4098 	ldr	r4, [pc, #152]	; 96b8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    961c:	e3560005 	cmp	r6, #5
    9620:	e0842394 	umull	r2, r4, r4, r3
    9624:	e1a041a4 	lsr	r4, r4, #3
    9628:	e2845302 	add	r5, r4, #134217728	; 0x8000000
    962c:	e0844104 	add	r4, r4, r4, lsl #2
    9630:	e2855702 	add	r5, r5, #524288	; 0x80000
    9634:	e0434084 	sub	r4, r3, r4, lsl #1
    9638:	e1a05105 	lsl	r5, r5, #2
    963c:	e0844084 	add	r4, r4, r4, lsl #1
    9640:	8a000011 	bhi	968c <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9644:	e59f7070 	ldr	r7, [pc, #112]	; 96bc <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    9648:	e5973000 	ldr	r3, [r7]
    964c:	e3530000 	cmp	r3, #0
    9650:	1a00000b 	bne	9684 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    9654:	e3a03007 	mov	r3, #7
    9658:	e59f1060 	ldr	r1, [pc, #96]	; 96c0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    965c:	e5952000 	ldr	r2, [r5]
    9660:	e7911106 	ldr	r1, [r1, r6, lsl #2]
    9664:	e1c23413 	bic	r3, r2, r3, lsl r4
    9668:	e1834411 	orr	r4, r3, r1, lsl r4
    966c:	e5854000 	str	r4, [r5]
    9670:	e5973000 	ldr	r3, [r7]
    9674:	e3530000 	cmp	r3, #0
    9678:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    967c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    9680:	ea000202 	b	9e90 <LeaveCritical>
    9684:	eb0001f2 	bl	9e54 <EnterCritical>
    9688:	eafffff1 	b	9654 <CGPIOPin::SetAlternateFunction(unsigned int)+0x54>
    968c:	e59f0030 	ldr	r0, [pc, #48]	; 96c4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    9690:	e59f1030 	ldr	r1, [pc, #48]	; 96c8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    9694:	e3a02f51 	mov	r2, #324	; 0x144
    9698:	eb000bf5 	bl	c674 <assertion_failed>
    969c:	eaffffe8 	b	9644 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    96a0:	e59f0024 	ldr	r0, [pc, #36]	; 96cc <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    96a4:	e59f101c 	ldr	r1, [pc, #28]	; 96c8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    96a8:	e3a02d05 	mov	r2, #320	; 0x140
    96ac:	eb000bf0 	bl	c674 <assertion_failed>
    96b0:	e5943004 	ldr	r3, [r4, #4]
    96b4:	eaffffd7 	b	9618 <CGPIOPin::SetAlternateFunction(unsigned int)+0x18>
    96b8:	cccccccd 	.word	0xcccccccd
    96bc:	00012904 	.word	0x00012904
    96c0:	000101c8 	.word	0x000101c8
    96c4:	00010408 	.word	0x00010408
    96c8:	00010214 	.word	0x00010214
    96cc:	00010240 	.word	0x00010240

000096d0 <CGPIOPin::SetMode(TGPIOMode, int)>:
    96d0:	e3510009 	cmp	r1, #9
    96d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96d8:	e1a05001 	mov	r5, r1
    96dc:	e1a04000 	mov	r4, r0
    96e0:	e1a07002 	mov	r7, r2
    96e4:	ca000040 	bgt	97ec <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    96e8:	e5845008 	str	r5, [r4, #8]
    96ec:	e3a00000 	mov	r0, #0
    96f0:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
    96f4:	e5943008 	ldr	r3, [r4, #8]
    96f8:	e2431004 	sub	r1, r3, #4
    96fc:	e3510005 	cmp	r1, #5
    9700:	9a000032 	bls	97d0 <CGPIOPin::SetMode(TGPIOMode, int)+0x100>
    9704:	e2977000 	adds	r7, r7, #0
    9708:	13a07001 	movne	r7, #1
    970c:	e3530001 	cmp	r3, #1
    9710:	13a03000 	movne	r3, #0
    9714:	02073001 	andeq	r3, r7, #1
    9718:	e3530000 	cmp	r3, #0
    971c:	1a000055 	bne	9878 <CGPIOPin::SetMode(TGPIOMode, int)+0x1a8>
    9720:	e5943004 	ldr	r3, [r4, #4]
    9724:	e3530035 	cmp	r3, #53	; 0x35
    9728:	8a00003a 	bhi	9818 <CGPIOPin::SetMode(TGPIOMode, int)+0x148>
    972c:	e59f5154 	ldr	r5, [pc, #340]	; 9888 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b8>
    9730:	e59f8154 	ldr	r8, [pc, #340]	; 988c <CGPIOPin::SetMode(TGPIOMode, int)+0x1bc>
    9734:	e0852395 	umull	r2, r5, r5, r3
    9738:	e5982000 	ldr	r2, [r8]
    973c:	e1a051a5 	lsr	r5, r5, #3
    9740:	e2856302 	add	r6, r5, #134217728	; 0x8000000
    9744:	e0855105 	add	r5, r5, r5, lsl #2
    9748:	e2866702 	add	r6, r6, #524288	; 0x80000
    974c:	e0435085 	sub	r5, r3, r5, lsl #1
    9750:	e3520000 	cmp	r2, #0
    9754:	e1a06106 	lsl	r6, r6, #2
    9758:	e0855085 	add	r5, r5, r5, lsl #1
    975c:	1a000033 	bne	9830 <CGPIOPin::SetMode(TGPIOMode, int)+0x160>
    9760:	e5941008 	ldr	r1, [r4, #8]
    9764:	e3a03007 	mov	r3, #7
    9768:	e2411001 	sub	r1, r1, #1
    976c:	e16f1f11 	clz	r1, r1
    9770:	e5962000 	ldr	r2, [r6]
    9774:	e1a012a1 	lsr	r1, r1, #5
    9778:	e1c23513 	bic	r3, r2, r3, lsl r5
    977c:	e1835511 	orr	r5, r3, r1, lsl r5
    9780:	e5865000 	str	r5, [r6]
    9784:	e5983000 	ldr	r3, [r8]
    9788:	e3530000 	cmp	r3, #0
    978c:	1a000029 	bne	9838 <CGPIOPin::SetMode(TGPIOMode, int)+0x168>
    9790:	e3570000 	cmp	r7, #0
    9794:	0a00000a 	beq	97c4 <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9798:	e5943008 	ldr	r3, [r4, #8]
    979c:	e3530003 	cmp	r3, #3
    97a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    97a4:	ea000006 	b	97c4 <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    97a8:	00009868 	.word	0x00009868
    97ac:	00009858 	.word	0x00009858
    97b0:	00009848 	.word	0x00009848
    97b4:	000097b8 	.word	0x000097b8
    97b8:	e1a00004 	mov	r0, r4
    97bc:	e3a01001 	mov	r1, #1
    97c0:	ebffff57 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    97c4:	e3a03000 	mov	r3, #0
    97c8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    97cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    97d0:	e1570000 	cmp	r7, r0
    97d4:	1a000009 	bne	9800 <CGPIOPin::SetMode(TGPIOMode, int)+0x130>
    97d8:	e1a00004 	mov	r0, r4
    97dc:	ebffff87 	bl	9600 <CGPIOPin::SetAlternateFunction(unsigned int)>
    97e0:	e3a03000 	mov	r3, #0
    97e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    97e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    97ec:	e59f009c 	ldr	r0, [pc, #156]	; 9890 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c0>
    97f0:	e59f109c 	ldr	r1, [pc, #156]	; 9894 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c4>
    97f4:	e3a0203a 	mov	r2, #58	; 0x3a
    97f8:	eb000b9d 	bl	c674 <assertion_failed>
    97fc:	eaffffb9 	b	96e8 <CGPIOPin::SetMode(TGPIOMode, int)+0x18>
    9800:	e1a01000 	mov	r1, r0
    9804:	e1a00004 	mov	r0, r4
    9808:	ebffff45 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    980c:	e5943008 	ldr	r3, [r4, #8]
    9810:	e2431004 	sub	r1, r3, #4
    9814:	eaffffef 	b	97d8 <CGPIOPin::SetMode(TGPIOMode, int)+0x108>
    9818:	e59f0078 	ldr	r0, [pc, #120]	; 9898 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c8>
    981c:	e59f1070 	ldr	r1, [pc, #112]	; 9894 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c4>
    9820:	e3a02053 	mov	r2, #83	; 0x53
    9824:	eb000b92 	bl	c674 <assertion_failed>
    9828:	e5943004 	ldr	r3, [r4, #4]
    982c:	eaffffbe 	b	972c <CGPIOPin::SetMode(TGPIOMode, int)+0x5c>
    9830:	eb000187 	bl	9e54 <EnterCritical>
    9834:	eaffffc9 	b	9760 <CGPIOPin::SetMode(TGPIOMode, int)+0x90>
    9838:	eb000194 	bl	9e90 <LeaveCritical>
    983c:	e3570000 	cmp	r7, #0
    9840:	0affffdf 	beq	97c4 <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9844:	eaffffd3 	b	9798 <CGPIOPin::SetMode(TGPIOMode, int)+0xc8>
    9848:	e1a00004 	mov	r0, r4
    984c:	e3a01002 	mov	r1, #2
    9850:	ebffff33 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    9854:	eaffffda 	b	97c4 <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9858:	e1a00004 	mov	r0, r4
    985c:	e3a01000 	mov	r1, #0
    9860:	ebfffd1a 	bl	8cd0 <CGPIOPin::Write(unsigned int)>
    9864:	eaffffd6 	b	97c4 <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9868:	e1a00004 	mov	r0, r4
    986c:	e3a01000 	mov	r1, #0
    9870:	ebffff2b 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    9874:	eaffffd2 	b	97c4 <CGPIOPin::SetMode(TGPIOMode, int)+0xf4>
    9878:	e1a01000 	mov	r1, r0
    987c:	e1a00004 	mov	r0, r4
    9880:	ebffff27 	bl	9524 <CGPIOPin::SetPullUpMode(unsigned int)>
    9884:	eaffffa5 	b	9720 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9888:	cccccccd 	.word	0xcccccccd
    988c:	00012904 	.word	0x00012904
    9890:	00010418 	.word	0x00010418
    9894:	00010214 	.word	0x00010214
    9898:	00010240 	.word	0x00010240

0000989c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    989c:	e92d4070 	push	{r4, r5, r6, lr}
    98a0:	e1a05001 	mov	r5, r1
    98a4:	e1a04000 	mov	r4, r0
    98a8:	e3a0c00a 	mov	ip, #10
    98ac:	e3a00006 	mov	r0, #6
    98b0:	e3a01000 	mov	r1, #0
    98b4:	e59fe068 	ldr	lr, [pc, #104]	; 9924 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x88>
    98b8:	e3550035 	cmp	r5, #53	; 0x35
    98bc:	e5845004 	str	r5, [r4, #4]
    98c0:	e5843010 	str	r3, [r4, #16]
    98c4:	e1a06002 	mov	r6, r2
    98c8:	e584e000 	str	lr, [r4]
    98cc:	e584c008 	str	ip, [r4, #8]
    98d0:	e5841014 	str	r1, [r4, #20]
    98d4:	e584001c 	str	r0, [r4, #28]
    98d8:	e5840020 	str	r0, [r4, #32]
    98dc:	8a000005 	bhi	98f8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x5c>
    98e0:	e1a00004 	mov	r0, r4
    98e4:	e1a01006 	mov	r1, r6
    98e8:	e3a02001 	mov	r2, #1
    98ec:	ebffff77 	bl	96d0 <CGPIOPin::SetMode(TGPIOMode, int)>
    98f0:	e1a00004 	mov	r0, r4
    98f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    98f8:	eb0013d5 	bl	e854 <CMachineInfo::Get()>
    98fc:	e1a01005 	mov	r1, r5
    9900:	eb0013a7 	bl	e7a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9904:	e3500035 	cmp	r0, #53	; 0x35
    9908:	e5840004 	str	r0, [r4, #4]
    990c:	9afffff3 	bls	98e0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9910:	e59f0010 	ldr	r0, [pc, #16]	; 9928 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x8c>
    9914:	e59f1010 	ldr	r1, [pc, #16]	; 992c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x90>
    9918:	e3a0202b 	mov	r2, #43	; 0x2b
    991c:	eb000b54 	bl	c674 <assertion_failed>
    9920:	eaffffee 	b	98e0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9924:	000101e8 	.word	0x000101e8
    9928:	00010240 	.word	0x00010240
    992c:	00010214 	.word	0x00010214

00009930 <CGPIOPin::InterruptHandler()>:
    9930:	e5903008 	ldr	r3, [r0, #8]
    9934:	e92d4010 	push	{r4, lr}
    9938:	e2432002 	sub	r2, r3, #2
    993c:	e3530000 	cmp	r3, #0
    9940:	13520001 	cmpne	r2, #1
    9944:	e1a04000 	mov	r4, r0
    9948:	9a000003 	bls	995c <CGPIOPin::InterruptHandler()+0x2c>
    994c:	e59f0074 	ldr	r0, [pc, #116]	; 99c8 <CGPIOPin::InterruptHandler()+0x98>
    9950:	e59f1074 	ldr	r1, [pc, #116]	; 99cc <CGPIOPin::InterruptHandler()+0x9c>
    9954:	e59f2074 	ldr	r2, [pc, #116]	; 99d0 <CGPIOPin::InterruptHandler()+0xa0>
    9958:	eb000b45 	bl	c674 <assertion_failed>
    995c:	e594301c 	ldr	r3, [r4, #28]
    9960:	e3530005 	cmp	r3, #5
    9964:	da000002 	ble	9974 <CGPIOPin::InterruptHandler()+0x44>
    9968:	e5943020 	ldr	r3, [r4, #32]
    996c:	e3530005 	cmp	r3, #5
    9970:	ca000005 	bgt	998c <CGPIOPin::InterruptHandler()+0x5c>
    9974:	e5943014 	ldr	r3, [r4, #20]
    9978:	e3530000 	cmp	r3, #0
    997c:	0a000009 	beq	99a8 <CGPIOPin::InterruptHandler()+0x78>
    9980:	e5940018 	ldr	r0, [r4, #24]
    9984:	e8bd4010 	pop	{r4, lr}
    9988:	e12fff13 	bx	r3
    998c:	e59f0040 	ldr	r0, [pc, #64]	; 99d4 <CGPIOPin::InterruptHandler()+0xa4>
    9990:	e59f1034 	ldr	r1, [pc, #52]	; 99cc <CGPIOPin::InterruptHandler()+0x9c>
    9994:	e59f203c 	ldr	r2, [pc, #60]	; 99d8 <CGPIOPin::InterruptHandler()+0xa8>
    9998:	eb000b35 	bl	c674 <assertion_failed>
    999c:	e5943014 	ldr	r3, [r4, #20]
    99a0:	e3530000 	cmp	r3, #0
    99a4:	1afffff5 	bne	9980 <CGPIOPin::InterruptHandler()+0x50>
    99a8:	e59f002c 	ldr	r0, [pc, #44]	; 99dc <CGPIOPin::InterruptHandler()+0xac>
    99ac:	e59f1018 	ldr	r1, [pc, #24]	; 99cc <CGPIOPin::InterruptHandler()+0x9c>
    99b0:	e59f2028 	ldr	r2, [pc, #40]	; 99e0 <CGPIOPin::InterruptHandler()+0xb0>
    99b4:	eb000b2e 	bl	c674 <assertion_failed>
    99b8:	e5943014 	ldr	r3, [r4, #20]
    99bc:	e5940018 	ldr	r0, [r4, #24]
    99c0:	e8bd4010 	pop	{r4, lr}
    99c4:	e12fff13 	bx	r3
    99c8:	00010254 	.word	0x00010254
    99cc:	00010214 	.word	0x00010214
    99d0:	00000153 	.word	0x00000153
    99d4:	00010430 	.word	0x00010430
    99d8:	00000155 	.word	0x00000155
    99dc:	00010348 	.word	0x00010348
    99e0:	00000157 	.word	0x00000157

000099e4 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    99e4:	e3500035 	cmp	r0, #53	; 0x35
    99e8:	e92d4070 	push	{r4, r5, r6, lr}
    99ec:	e1a05000 	mov	r5, r0
    99f0:	8a00001e 	bhi	9a70 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    99f4:	e3a03001 	mov	r3, #1
    99f8:	e59f6088 	ldr	r6, [pc, #136]	; 9a88 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    99fc:	e59f4088 	ldr	r4, [pc, #136]	; 9a8c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    9a00:	e5961000 	ldr	r1, [r6]
    9a04:	e1a022a5 	lsr	r2, r5, #5
    9a08:	e0824004 	add	r4, r2, r4
    9a0c:	e205501f 	and	r5, r5, #31
    9a10:	e3510000 	cmp	r1, #0
    9a14:	e1a04104 	lsl	r4, r4, #2
    9a18:	e1a05513 	lsl	r5, r3, r5
    9a1c:	1a00000e 	bne	9a5c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    9a20:	e59f3068 	ldr	r3, [pc, #104]	; 9a90 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    9a24:	e1540003 	cmp	r4, r3
    9a28:	8a000015 	bhi	9a84 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9a2c:	e1e02005 	mvn	r2, r5
    9a30:	e59f1058 	ldr	r1, [pc, #88]	; 9a90 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    9a34:	e5943000 	ldr	r3, [r4]
    9a38:	e0033002 	and	r3, r3, r2
    9a3c:	e484300c 	str	r3, [r4], #12
    9a40:	e1540001 	cmp	r4, r1
    9a44:	9afffffa 	bls	9a34 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    9a48:	e5963000 	ldr	r3, [r6]
    9a4c:	e3530000 	cmp	r3, #0
    9a50:	08bd8070 	popeq	{r4, r5, r6, pc}
    9a54:	e8bd4070 	pop	{r4, r5, r6, lr}
    9a58:	ea00010c 	b	9e90 <LeaveCritical>
    9a5c:	eb0000fc 	bl	9e54 <EnterCritical>
    9a60:	e59f3028 	ldr	r3, [pc, #40]	; 9a90 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    9a64:	e1540003 	cmp	r4, r3
    9a68:	9affffef 	bls	9a2c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    9a6c:	eafffff5 	b	9a48 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
    9a70:	e59f001c 	ldr	r0, [pc, #28]	; 9a94 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb0>
    9a74:	e59f101c 	ldr	r1, [pc, #28]	; 9a98 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>
    9a78:	e59f201c 	ldr	r2, [pc, #28]	; 9a9c <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb8>
    9a7c:	eb000afc 	bl	c674 <assertion_failed>
    9a80:	eaffffdb 	b	99f4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    9a84:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a88:	00012904 	.word	0x00012904
    9a8c:	08080013 	.word	0x08080013
    9a90:	2020008b 	.word	0x2020008b
    9a94:	0001047c 	.word	0x0001047c
    9a98:	00010214 	.word	0x00010214
    9a9c:	0000015d 	.word	0x0000015d

00009aa0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9aa0:	e3a02001 	mov	r2, #1
    9aa4:	e59f3004 	ldr	r3, [pc, #4]	; 9ab0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    9aa8:	e5832000 	str	r2, [r3]
    9aac:	e12fff1e 	bx	lr
    9ab0:	00012904 	.word	0x00012904

00009ab4 <CMemorySystem::~CMemorySystem()>:
    9ab4:	e92d4038 	push	{r3, r4, r5, lr}
    9ab8:	e5903000 	ldr	r3, [r0]
    9abc:	e1a04000 	mov	r4, r0
    9ac0:	e3530000 	cmp	r3, #0
    9ac4:	0a000005 	beq	9ae0 <CMemorySystem::~CMemorySystem()+0x2c>
    9ac8:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
    9acc:	e59f3054 	ldr	r3, [pc, #84]	; 9b28 <CMemorySystem::~CMemorySystem()+0x74>
    9ad0:	e0033002 	and	r3, r3, r2
    9ad4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9ad8:	e3a03000 	mov	r3, #0
    9adc:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9ae0:	e594500c 	ldr	r5, [r4, #12]
    9ae4:	e3550000 	cmp	r5, #0
    9ae8:	0a000003 	beq	9afc <CMemorySystem::~CMemorySystem()+0x48>
    9aec:	e1a00005 	mov	r0, r5
    9af0:	eb000604 	bl	b308 <CPageTable::~CPageTable()>
    9af4:	e1a00005 	mov	r0, r5
    9af8:	eb0000d3 	bl	9e4c <operator delete(void*)>
    9afc:	e3a03000 	mov	r3, #0
    9b00:	e5945008 	ldr	r5, [r4, #8]
    9b04:	e584300c 	str	r3, [r4, #12]
    9b08:	e1550003 	cmp	r5, r3
    9b0c:	0a000003 	beq	9b20 <CMemorySystem::~CMemorySystem()+0x6c>
    9b10:	e1a00005 	mov	r0, r5
    9b14:	eb0005fb 	bl	b308 <CPageTable::~CPageTable()>
    9b18:	e1a00005 	mov	r0, r5
    9b1c:	eb0000ca 	bl	9e4c <operator delete(void*)>
    9b20:	e1a00004 	mov	r0, r4
    9b24:	e8bd8038 	pop	{r3, r4, r5, pc}
    9b28:	ff7fe7fa 	.word	0xff7fe7fa

00009b2c <CMemorySystem::GetMemSize() const>:
    9b2c:	e5900004 	ldr	r0, [r0, #4]
    9b30:	e12fff1e 	bx	lr

00009b34 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)>:
    9b34:	e5903000 	ldr	r3, [r0]
    9b38:	e92d4070 	push	{r4, r5, r6, lr}
    9b3c:	e3530000 	cmp	r3, #0
    9b40:	e1a04000 	mov	r4, r0
    9b44:	e1a05001 	mov	r5, r1
    9b48:	e1a06002 	mov	r6, r2
    9b4c:	0a00000c 	beq	9b84 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x50>
    9b50:	e3550000 	cmp	r5, #0
    9b54:	05945008 	ldreq	r5, [r4, #8]
    9b58:	ee1d4f30 	mrc	15, 0, r4, cr13, cr0, {1}
    9b5c:	e1a00005 	mov	r0, r5
    9b60:	eb0005f1 	bl	b32c <CPageTable::GetBaseAddress() const>
    9b64:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9b68:	e3a03000 	mov	r3, #0
    9b6c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9b70:	ee0d6f30 	mcr	15, 0, r6, cr13, cr0, {1}
    9b74:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    9b78:	e6ef4074 	uxtb	r4, r4
    9b7c:	ee084f57 	mcr	15, 0, r4, cr8, cr7, {2}
    9b80:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b84:	e59f000c 	ldr	r0, [pc, #12]	; 9b98 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x64>
    9b88:	e59f100c 	ldr	r1, [pc, #12]	; 9b9c <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x68>
    9b8c:	e3a02083 	mov	r2, #131	; 0x83
    9b90:	eb000ab7 	bl	c674 <assertion_failed>
    9b94:	eaffffed 	b	9b50 <CMemorySystem::SetPageTable0(CPageTable*, unsigned int)+0x1c>
    9b98:	00010490 	.word	0x00010490
    9b9c:	000104a0 	.word	0x000104a0

00009ba0 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)>:
    9ba0:	e92d4038 	push	{r3, r4, r5, lr}
    9ba4:	e5903000 	ldr	r3, [r0]
    9ba8:	e1a05001 	mov	r5, r1
    9bac:	e3530000 	cmp	r3, #0
    9bb0:	e1a04002 	mov	r4, r2
    9bb4:	1a000003 	bne	9bc8 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)+0x28>
    9bb8:	e59f002c 	ldr	r0, [pc, #44]	; 9bec <CMemorySystem::SetPageTable0(unsigned int, unsigned int)+0x4c>
    9bbc:	e59f102c 	ldr	r1, [pc, #44]	; 9bf0 <CMemorySystem::SetPageTable0(unsigned int, unsigned int)+0x50>
    9bc0:	e3a02099 	mov	r2, #153	; 0x99
    9bc4:	eb000aaa 	bl	c674 <assertion_failed>
    9bc8:	ee1d3f30 	mrc	15, 0, r3, cr13, cr0, {1}
    9bcc:	ee025f10 	mcr	15, 0, r5, cr2, cr0, {0}
    9bd0:	e3a01000 	mov	r1, #0
    9bd4:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    9bd8:	ee0d4f30 	mcr	15, 0, r4, cr13, cr0, {1}
    9bdc:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
    9be0:	e6ef3073 	uxtb	r3, r3
    9be4:	ee083f57 	mcr	15, 0, r3, cr8, cr7, {2}
    9be8:	e8bd8038 	pop	{r3, r4, r5, pc}
    9bec:	00010490 	.word	0x00010490
    9bf0:	000104a0 	.word	0x000104a0

00009bf4 <CMemorySystem::GetTTBR0() const>:
    9bf4:	e92d4008 	push	{r3, lr}
    9bf8:	e5903000 	ldr	r3, [r0]
    9bfc:	e3530000 	cmp	r3, #0
    9c00:	1a000003 	bne	9c14 <CMemorySystem::GetTTBR0() const+0x20>
    9c04:	e59f0010 	ldr	r0, [pc, #16]	; 9c1c <CMemorySystem::GetTTBR0() const+0x28>
    9c08:	e59f1010 	ldr	r1, [pc, #16]	; 9c20 <CMemorySystem::GetTTBR0() const+0x2c>
    9c0c:	e3a020aa 	mov	r2, #170	; 0xaa
    9c10:	eb000a97 	bl	c674 <assertion_failed>
    9c14:	ee120f10 	mrc	15, 0, r0, cr2, cr0, {0}
    9c18:	e8bd8008 	pop	{r3, pc}
    9c1c:	00010490 	.word	0x00010490
    9c20:	000104a0 	.word	0x000104a0

00009c24 <CMemorySystem::GetContextID() const>:
    9c24:	e92d4008 	push	{r3, lr}
    9c28:	e5903000 	ldr	r3, [r0]
    9c2c:	e3530000 	cmp	r3, #0
    9c30:	1a000003 	bne	9c44 <CMemorySystem::GetContextID() const+0x20>
    9c34:	e59f0010 	ldr	r0, [pc, #16]	; 9c4c <CMemorySystem::GetContextID() const+0x28>
    9c38:	e59f1010 	ldr	r1, [pc, #16]	; 9c50 <CMemorySystem::GetContextID() const+0x2c>
    9c3c:	e3a020b4 	mov	r2, #180	; 0xb4
    9c40:	eb000a8b 	bl	c674 <assertion_failed>
    9c44:	ee1d0f30 	mrc	15, 0, r0, cr13, cr0, {1}
    9c48:	e8bd8008 	pop	{r3, pc}
    9c4c:	00010490 	.word	0x00010490
    9c50:	000104a0 	.word	0x000104a0

00009c54 <CMemorySystem::EnableMMU()>:
    9c54:	e5903000 	ldr	r3, [r0]
    9c58:	e92d4010 	push	{r4, lr}
    9c5c:	e3530000 	cmp	r3, #0
    9c60:	e1a04000 	mov	r4, r0
    9c64:	0a000021 	beq	9cf0 <CMemorySystem::EnableMMU()+0x9c>
    9c68:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    9c6c:	e3833040 	orr	r3, r3, #64	; 0x40
    9c70:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    9c74:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9c78:	e3130001 	tst	r3, #1
    9c7c:	1a000020 	bne	9d04 <CMemorySystem::EnableMMU()+0xb0>
    9c80:	e3a03003 	mov	r3, #3
    9c84:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9c88:	e5940008 	ldr	r0, [r4, #8]
    9c8c:	e3500000 	cmp	r0, #0
    9c90:	0a000026 	beq	9d30 <CMemorySystem::EnableMMU()+0xdc>
    9c94:	eb0005a4 	bl	b32c <CPageTable::GetBaseAddress() const>
    9c98:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9c9c:	e594000c 	ldr	r0, [r4, #12]
    9ca0:	e3500000 	cmp	r0, #0
    9ca4:	0a00001b 	beq	9d18 <CMemorySystem::EnableMMU()+0xc4>
    9ca8:	eb00059f 	bl	b32c <CPageTable::GetBaseAddress() const>
    9cac:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9cb0:	e3a03005 	mov	r3, #5
    9cb4:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9cb8:	e3a03000 	mov	r3, #0
    9cbc:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    9cc0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9cc4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9cc8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9ccc:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9cd0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9cd4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    9cd8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9cdc:	e59f2064 	ldr	r2, [pc, #100]	; 9d48 <CMemorySystem::EnableMMU()+0xf4>
    9ce0:	e3c33002 	bic	r3, r3, #2
    9ce4:	e1832002 	orr	r2, r3, r2
    9ce8:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
    9cec:	e8bd8010 	pop	{r4, pc}
    9cf0:	e59f0054 	ldr	r0, [pc, #84]	; 9d4c <CMemorySystem::EnableMMU()+0xf8>
    9cf4:	e59f1054 	ldr	r1, [pc, #84]	; 9d50 <CMemorySystem::EnableMMU()+0xfc>
    9cf8:	e3a020c0 	mov	r2, #192	; 0xc0
    9cfc:	eb000a5c 	bl	c674 <assertion_failed>
    9d00:	eaffffd8 	b	9c68 <CMemorySystem::EnableMMU()+0x14>
    9d04:	e59f0048 	ldr	r0, [pc, #72]	; 9d54 <CMemorySystem::EnableMMU()+0x100>
    9d08:	e59f1040 	ldr	r1, [pc, #64]	; 9d50 <CMemorySystem::EnableMMU()+0xfc>
    9d0c:	e3a020cd 	mov	r2, #205	; 0xcd
    9d10:	eb000a57 	bl	c674 <assertion_failed>
    9d14:	eaffffd9 	b	9c80 <CMemorySystem::EnableMMU()+0x2c>
    9d18:	e59f0038 	ldr	r0, [pc, #56]	; 9d58 <CMemorySystem::EnableMMU()+0x104>
    9d1c:	e59f102c 	ldr	r1, [pc, #44]	; 9d50 <CMemorySystem::EnableMMU()+0xfc>
    9d20:	e3a020d7 	mov	r2, #215	; 0xd7
    9d24:	eb000a52 	bl	c674 <assertion_failed>
    9d28:	e594000c 	ldr	r0, [r4, #12]
    9d2c:	eaffffdd 	b	9ca8 <CMemorySystem::EnableMMU()+0x54>
    9d30:	e59f0024 	ldr	r0, [pc, #36]	; 9d5c <CMemorySystem::EnableMMU()+0x108>
    9d34:	e59f1014 	ldr	r1, [pc, #20]	; 9d50 <CMemorySystem::EnableMMU()+0xfc>
    9d38:	e3a020d3 	mov	r2, #211	; 0xd3
    9d3c:	eb000a4c 	bl	c674 <assertion_failed>
    9d40:	e5940008 	ldr	r0, [r4, #8]
    9d44:	eaffffd2 	b	9c94 <CMemorySystem::EnableMMU()+0x40>
    9d48:	00c01805 	.word	0x00c01805
    9d4c:	00010490 	.word	0x00010490
    9d50:	000104a0 	.word	0x000104a0
    9d54:	000104ac 	.word	0x000104ac
    9d58:	000104f4 	.word	0x000104f4
    9d5c:	000104d8 	.word	0x000104d8

00009d60 <CMemorySystem::CMemorySystem(int)>:
    9d60:	e92d4030 	push	{r4, r5, lr}
    9d64:	e3a05000 	mov	r5, #0
    9d68:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9d6c:	e8800022 	stm	r0, {r1, r5}
    9d70:	e5805008 	str	r5, [r0, #8]
    9d74:	e580500c 	str	r5, [r0, #12]
    9d78:	e1a04000 	mov	r4, r0
    9d7c:	e28d000c 	add	r0, sp, #12
    9d80:	ebfffb59 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    9d84:	e58d5000 	str	r5, [sp]
    9d88:	e28d000c 	add	r0, sp, #12
    9d8c:	e59f10a4 	ldr	r1, [pc, #164]	; 9e38 <CMemorySystem::CMemorySystem(int)+0xd8>
    9d90:	e28d2014 	add	r2, sp, #20
    9d94:	e3a03014 	mov	r3, #20
    9d98:	ebfffb9b 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9d9c:	e3500000 	cmp	r0, #0
    9da0:	0a000012 	beq	9df0 <CMemorySystem::CMemorySystem(int)+0x90>
    9da4:	e59d0020 	ldr	r0, [sp, #32]
    9da8:	e1500005 	cmp	r0, r5
    9dac:	0a000004 	beq	9dc4 <CMemorySystem::CMemorySystem(int)+0x64>
    9db0:	e59f0084 	ldr	r0, [pc, #132]	; 9e3c <CMemorySystem::CMemorySystem(int)+0xdc>
    9db4:	e59f1084 	ldr	r1, [pc, #132]	; 9e40 <CMemorySystem::CMemorySystem(int)+0xe0>
    9db8:	e3a02042 	mov	r2, #66	; 0x42
    9dbc:	eb000a2c 	bl	c674 <assertion_failed>
    9dc0:	e59d0020 	ldr	r0, [sp, #32]
    9dc4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    9dc8:	e5841004 	str	r1, [r4, #4]
    9dcc:	eb0013d9 	bl	ed38 <mem_init>
    9dd0:	e5943000 	ldr	r3, [r4]
    9dd4:	e3530000 	cmp	r3, #0
    9dd8:	1a000008 	bne	9e00 <CMemorySystem::CMemorySystem(int)+0xa0>
    9ddc:	e28d000c 	add	r0, sp, #12
    9de0:	ebfffb47 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    9de4:	e1a00004 	mov	r0, r4
    9de8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9dec:	e8bd8030 	pop	{r4, r5, pc}
    9df0:	e3a03303 	mov	r3, #201326592	; 0xc000000
    9df4:	e58d0020 	str	r0, [sp, #32]
    9df8:	e58d3024 	str	r3, [sp, #36]	; 0x24
    9dfc:	eafffff0 	b	9dc4 <CMemorySystem::CMemorySystem(int)+0x64>
    9e00:	e3a00008 	mov	r0, #8
    9e04:	eb00000e 	bl	9e44 <operator new(unsigned int)>
    9e08:	e1a05000 	mov	r5, r0
    9e0c:	e5941004 	ldr	r1, [r4, #4]
    9e10:	eb0004f3 	bl	b1e4 <CPageTable::CPageTable(unsigned int)>
    9e14:	e5845008 	str	r5, [r4, #8]
    9e18:	e3a00008 	mov	r0, #8
    9e1c:	eb000008 	bl	9e44 <operator new(unsigned int)>
    9e20:	e1a05000 	mov	r5, r0
    9e24:	eb0004c7 	bl	b148 <CPageTable::CPageTable()>
    9e28:	e584500c 	str	r5, [r4, #12]
    9e2c:	e1a00004 	mov	r0, r4
    9e30:	ebffff87 	bl	9c54 <CMemorySystem::EnableMMU()>
    9e34:	eaffffe8 	b	9ddc <CMemorySystem::CMemorySystem(int)+0x7c>
    9e38:	00010005 	.word	0x00010005
    9e3c:	00010508 	.word	0x00010508
    9e40:	000104a0 	.word	0x000104a0

00009e44 <operator new(unsigned int)>:
    9e44:	ea0013d4 	b	ed9c <malloc>

00009e48 <operator new[](unsigned int)>:
    9e48:	ea0013d3 	b	ed9c <malloc>

00009e4c <operator delete(void*)>:
    9e4c:	ea001443 	b	ef60 <free>

00009e50 <operator delete[](void*)>:
    9e50:	ea001442 	b	ef60 <free>

00009e54 <EnterCritical>:
    9e54:	e10f3000 	mrs	r3, CPSR
    9e58:	f10c0080 	cpsid	i
    9e5c:	e59f1028 	ldr	r1, [pc, #40]	; 9e8c <EnterCritical+0x38>
    9e60:	e5912000 	ldr	r2, [r1]
    9e64:	e3520000 	cmp	r2, #0
    9e68:	01a033a3 	lsreq	r3, r3, #7
    9e6c:	02233001 	eoreq	r3, r3, #1
    9e70:	02033001 	andeq	r3, r3, #1
    9e74:	e2822001 	add	r2, r2, #1
    9e78:	e5812000 	str	r2, [r1]
    9e7c:	05813004 	streq	r3, [r1, #4]
    9e80:	e3a03000 	mov	r3, #0
    9e84:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9e88:	e12fff1e 	bx	lr
    9e8c:	00012908 	.word	0x00012908

00009e90 <LeaveCritical>:
    9e90:	e92d4010 	push	{r4, lr}
    9e94:	e3a03000 	mov	r3, #0
    9e98:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9e9c:	e59f4048 	ldr	r4, [pc, #72]	; 9eec <LeaveCritical+0x5c>
    9ea0:	e5943000 	ldr	r3, [r4]
    9ea4:	e3530000 	cmp	r3, #0
    9ea8:	0a00000a 	beq	9ed8 <LeaveCritical+0x48>
    9eac:	e5943000 	ldr	r3, [r4]
    9eb0:	e59f2034 	ldr	r2, [pc, #52]	; 9eec <LeaveCritical+0x5c>
    9eb4:	e2433001 	sub	r3, r3, #1
    9eb8:	e3530000 	cmp	r3, #0
    9ebc:	e5843000 	str	r3, [r4]
    9ec0:	18bd8010 	popne	{r4, pc}
    9ec4:	e5923004 	ldr	r3, [r2, #4]
    9ec8:	e3530000 	cmp	r3, #0
    9ecc:	08bd8010 	popeq	{r4, pc}
    9ed0:	f1080080 	cpsie	i
    9ed4:	e8bd8010 	pop	{r4, pc}
    9ed8:	e59f0010 	ldr	r0, [pc, #16]	; 9ef0 <LeaveCritical+0x60>
    9edc:	e59f1010 	ldr	r1, [pc, #16]	; 9ef4 <LeaveCritical+0x64>
    9ee0:	e3a0205b 	mov	r2, #91	; 0x5b
    9ee4:	eb0009e2 	bl	c674 <assertion_failed>
    9ee8:	eaffffef 	b	9eac <LeaveCritical+0x1c>
    9eec:	00012908 	.word	0x00012908
    9ef0:	00010524 	.word	0x00010524
    9ef4:	0001053c 	.word	0x0001053c

00009ef8 <CleanAndInvalidateDataCacheRange>:
    9ef8:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    9efc:	e2813020 	add	r3, r1, #32
    9f00:	e353001f 	cmp	r3, #31
    9f04:	82800020 	addhi	r0, r0, #32
    9f08:	83c1101f 	bichi	r1, r1, #31
    9f0c:	80801001 	addhi	r1, r0, r1
    9f10:	8a000001 	bhi	9f1c <CleanAndInvalidateDataCacheRange+0x24>
    9f14:	ea000003 	b	9f28 <CleanAndInvalidateDataCacheRange+0x30>
    9f18:	e2800020 	add	r0, r0, #32
    9f1c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    9f20:	e1500001 	cmp	r0, r1
    9f24:	1afffffb 	bne	9f18 <CleanAndInvalidateDataCacheRange+0x20>
    9f28:	e3a03000 	mov	r3, #0
    9f2c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9f30:	e12fff1e 	bx	lr

00009f34 <SyncDataAndInstructionCache>:
    9f34:	e3a03000 	mov	r3, #0
    9f38:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    9f3c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9f40:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9f44:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9f48:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9f4c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    9f50:	e12fff1e 	bx	lr

00009f54 <__aeabi_atexit>:
    9f54:	e12fff1e 	bx	lr

00009f58 <halt>:
    9f58:	f10c0080 	cpsid	i
    9f5c:	eafffffe 	b	9f5c <halt+0x4>

00009f60 <reboot>:
    9f60:	e3a03000 	mov	r3, #0
    9f64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9f68:	e59f3010 	ldr	r3, [pc, #16]	; 9f80 <reboot+0x20>
    9f6c:	e59f1010 	ldr	r1, [pc, #16]	; 9f84 <reboot+0x24>
    9f70:	e59f2010 	ldr	r2, [pc, #16]	; 9f88 <reboot+0x28>
    9f74:	e5831024 	str	r1, [r3, #36]	; 0x24
    9f78:	e583201c 	str	r2, [r3, #28]
    9f7c:	eafffffe 	b	9f7c <reboot+0x1c>
    9f80:	20100000 	.word	0x20100000
    9f84:	5a000001 	.word	0x5a000001
    9f88:	5a000020 	.word	0x5a000020

00009f8c <sysinit>:
    9f8c:	e92d4070 	push	{r4, r5, r6, lr}
    9f90:	e24dd018 	sub	sp, sp, #24
    9f94:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9f98:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9f9c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9fa0:	e3a02000 	mov	r2, #0
    9fa4:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
    9fa8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    9fac:	eee83a10 	vmsr	fpexc, r3
    9fb0:	eee12a10 	vmsr	fpscr, r2
    9fb4:	e59f3070 	ldr	r3, [pc, #112]	; a02c <sysinit+0xa0>
    9fb8:	e59f1070 	ldr	r1, [pc, #112]	; a030 <sysinit+0xa4>
    9fbc:	e1530001 	cmp	r3, r1
    9fc0:	2a000002 	bcs	9fd0 <sysinit+0x44>
    9fc4:	e4c32001 	strb	r2, [r3], #1
    9fc8:	e1530001 	cmp	r3, r1
    9fcc:	1afffffc 	bne	9fc4 <sysinit+0x38>
    9fd0:	e1a0000d 	mov	r0, sp
    9fd4:	eb00112c 	bl	e48c <CMachineInfo::CMachineInfo()>
    9fd8:	e59f4054 	ldr	r4, [pc, #84]	; a034 <sysinit+0xa8>
    9fdc:	e59f2054 	ldr	r2, [pc, #84]	; a038 <sysinit+0xac>
    9fe0:	e1520004 	cmp	r2, r4
    9fe4:	2a00000a 	bcs	a014 <sysinit+0x88>
    9fe8:	e1e03002 	mvn	r3, r2
    9fec:	e1a05002 	mov	r5, r2
    9ff0:	e3a06000 	mov	r6, #0
    9ff4:	e0834004 	add	r4, r3, r4
    9ff8:	e1a04124 	lsr	r4, r4, #2
    9ffc:	e2844001 	add	r4, r4, #1
    a000:	e2866001 	add	r6, r6, #1
    a004:	e4953004 	ldr	r3, [r5], #4
    a008:	e12fff33 	blx	r3
    a00c:	e1560004 	cmp	r6, r4
    a010:	1afffffa 	bne	a000 <sysinit+0x74>
    a014:	ebfff810 	bl	805c <main>
    a018:	e3500001 	cmp	r0, #1
    a01c:	0a000001 	beq	a028 <sysinit+0x9c>
    a020:	f10c0080 	cpsid	i
    a024:	eafffffe 	b	a024 <sysinit+0x98>
    a028:	ebffffcc 	bl	9f60 <reboot>
    a02c:	00012900 	.word	0x00012900
    a030:	00012954 	.word	0x00012954
    a034:	00011e40 	.word	0x00011e40
    a038:	00011e34 	.word	0x00011e34

0000a03c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    a03c:	e2800001 	add	r0, r0, #1
    a040:	e3a03000 	mov	r3, #0
    a044:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a048:	e59f3020 	ldr	r3, [pc, #32]	; a070 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
    a04c:	e1a01003 	mov	r1, r3
    a050:	e5932004 	ldr	r2, [r3, #4]
    a054:	e5913004 	ldr	r3, [r1, #4]
    a058:	e0623003 	rsb	r3, r2, r3
    a05c:	e1500003 	cmp	r0, r3
    a060:	8afffffb 	bhi	a054 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
    a064:	e3a03000 	mov	r3, #0
    a068:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a06c:	e12fff1e 	bx	lr
    a070:	20003000 	.word	0x20003000

0000a074 <CTimer::CTimer(CInterruptSystem*)>:
    a074:	e92d4070 	push	{r4, r5, r6, lr}
    a078:	e3a03000 	mov	r3, #0
    a07c:	e3a06001 	mov	r6, #1
    a080:	e1a04000 	mov	r4, r0
    a084:	e59f5058 	ldr	r5, [pc, #88]	; a0e4 <CTimer::CTimer(CInterruptSystem*)+0x70>
    a088:	e5803004 	str	r3, [r0, #4]
    a08c:	e5801000 	str	r1, [r0]
    a090:	e5803008 	str	r3, [r0, #8]
    a094:	e5803014 	str	r3, [r0, #20]
    a098:	e580300c 	str	r3, [r0, #12]
    a09c:	e5806010 	str	r6, [r0, #16]
    a0a0:	e2800018 	add	r0, r0, #24
    a0a4:	eb0011f9 	bl	e890 <CPtrList::CPtrList()>
    a0a8:	e5951000 	ldr	r1, [r5]
    a0ac:	e59f2034 	ldr	r2, [pc, #52]	; a0e8 <CTimer::CTimer(CInterruptSystem*)+0x74>
    a0b0:	e59f3034 	ldr	r3, [pc, #52]	; a0ec <CTimer::CTimer(CInterruptSystem*)+0x78>
    a0b4:	e3510000 	cmp	r1, #0
    a0b8:	e584601c 	str	r6, [r4, #28]
    a0bc:	e5842020 	str	r2, [r4, #32]
    a0c0:	e5843024 	str	r3, [r4, #36]	; 0x24
    a0c4:	0a000003 	beq	a0d8 <CTimer::CTimer(CInterruptSystem*)+0x64>
    a0c8:	e59f0020 	ldr	r0, [pc, #32]	; a0f0 <CTimer::CTimer(CInterruptSystem*)+0x7c>
    a0cc:	e59f1020 	ldr	r1, [pc, #32]	; a0f4 <CTimer::CTimer(CInterruptSystem*)+0x80>
    a0d0:	e3a0203b 	mov	r2, #59	; 0x3b
    a0d4:	eb000966 	bl	c674 <assertion_failed>
    a0d8:	e5854000 	str	r4, [r5]
    a0dc:	e1a00004 	mov	r0, r4
    a0e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0e4:	00012914 	.word	0x00012914
    a0e8:	00055730 	.word	0x00055730
    a0ec:	0000015e 	.word	0x0000015e
    a0f0:	00010584 	.word	0x00010584
    a0f4:	00010594 	.word	0x00010594

0000a0f8 <CTimer::~CTimer()>:
    a0f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0fc:	e1a08000 	mov	r8, r0
    a100:	e5900000 	ldr	r0, [r0]
    a104:	e3500000 	cmp	r0, #0
    a108:	0a000024 	beq	a1a0 <CTimer::~CTimer()+0xa8>
    a10c:	e3a01003 	mov	r1, #3
    a110:	eb000f05 	bl	dd2c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a114:	e2884018 	add	r4, r8, #24
    a118:	e59f7098 	ldr	r7, [pc, #152]	; a1b8 <CTimer::~CTimer()+0xc0>
    a11c:	ea000010 	b	a164 <CTimer::~CTimer()+0x6c>
    a120:	e1a00004 	mov	r0, r4
    a124:	e1a01005 	mov	r1, r5
    a128:	eb001200 	bl	e930 <CPtrList::GetPtr(TPtrListElement*)>
    a12c:	e2506000 	subs	r6, r0, #0
    a130:	0a000015 	beq	a18c <CTimer::~CTimer()+0x94>
    a134:	e5963000 	ldr	r3, [r6]
    a138:	e59f007c 	ldr	r0, [pc, #124]	; a1bc <CTimer::~CTimer()+0xc4>
    a13c:	e1530007 	cmp	r3, r7
    a140:	e59f1078 	ldr	r1, [pc, #120]	; a1c0 <CTimer::~CTimer()+0xc8>
    a144:	0a000001 	beq	a150 <CTimer::~CTimer()+0x58>
    a148:	e3a02049 	mov	r2, #73	; 0x49
    a14c:	eb000948 	bl	c674 <assertion_failed>
    a150:	e1a00004 	mov	r0, r4
    a154:	e1a01005 	mov	r1, r5
    a158:	eb001289 	bl	eb84 <CPtrList::Remove(TPtrListElement*)>
    a15c:	e1a00006 	mov	r0, r6
    a160:	ebffff39 	bl	9e4c <operator delete(void*)>
    a164:	e1a00004 	mov	r0, r4
    a168:	eb0011d8 	bl	e8d0 <CPtrList::GetFirst()>
    a16c:	e2505000 	subs	r5, r0, #0
    a170:	1affffea 	bne	a120 <CTimer::~CTimer()+0x28>
    a174:	e59f3048 	ldr	r3, [pc, #72]	; a1c4 <CTimer::~CTimer()+0xcc>
    a178:	e1a00004 	mov	r0, r4
    a17c:	e5835000 	str	r5, [r3]
    a180:	eb0011c5 	bl	e89c <CPtrList::~CPtrList()>
    a184:	e1a00008 	mov	r0, r8
    a188:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a18c:	e59f0034 	ldr	r0, [pc, #52]	; a1c8 <CTimer::~CTimer()+0xd0>
    a190:	e59f1028 	ldr	r1, [pc, #40]	; a1c0 <CTimer::~CTimer()+0xc8>
    a194:	e3a02048 	mov	r2, #72	; 0x48
    a198:	eb000935 	bl	c674 <assertion_failed>
    a19c:	eaffffe4 	b	a134 <CTimer::~CTimer()+0x3c>
    a1a0:	e59f0024 	ldr	r0, [pc, #36]	; a1cc <CTimer::~CTimer()+0xd4>
    a1a4:	e59f1014 	ldr	r1, [pc, #20]	; a1c0 <CTimer::~CTimer()+0xc8>
    a1a8:	e3a02041 	mov	r2, #65	; 0x41
    a1ac:	eb000930 	bl	c674 <assertion_failed>
    a1b0:	e5980000 	ldr	r0, [r8]
    a1b4:	eaffffd4 	b	a10c <CTimer::~CTimer()+0x14>
    a1b8:	4b544d43 	.word	0x4b544d43
    a1bc:	000105c4 	.word	0x000105c4
    a1c0:	00010594 	.word	0x00010594
    a1c4:	00012914 	.word	0x00012914
    a1c8:	000105b8 	.word	0x000105b8
    a1cc:	000105a0 	.word	0x000105a0

0000a1d0 <CTimer::SetTimeZone(int)>:
    a1d0:	e59f2018 	ldr	r2, [pc, #24]	; a1f0 <CTimer::SetTimeZone(int)+0x20>
    a1d4:	e2813e59 	add	r3, r1, #1424	; 0x590
    a1d8:	e283300f 	add	r3, r3, #15
    a1dc:	e1530002 	cmp	r3, r2
    a1e0:	95801014 	strls	r1, [r0, #20]
    a1e4:	93a00001 	movls	r0, #1
    a1e8:	83a00000 	movhi	r0, #0
    a1ec:	e12fff1e 	bx	lr
    a1f0:	00000b3e 	.word	0x00000b3e

0000a1f4 <CTimer::GetTimeZone() const>:
    a1f4:	e5900014 	ldr	r0, [r0, #20]
    a1f8:	e12fff1e 	bx	lr

0000a1fc <CTimer::SetTime(unsigned int, int)>:
    a1fc:	e3520000 	cmp	r2, #0
    a200:	e92d4038 	push	{r3, r4, r5, lr}
    a204:	e1a04000 	mov	r4, r0
    a208:	e1a05001 	mov	r5, r1
    a20c:	1a000004 	bne	a224 <CTimer::SetTime(unsigned int, int)+0x28>
    a210:	e5903014 	ldr	r3, [r0, #20]
    a214:	e0633203 	rsb	r3, r3, r3, lsl #4
    a218:	e1b03103 	lsls	r3, r3, #2
    a21c:	4a00000e 	bmi	a25c <CTimer::SetTime(unsigned int, int)+0x60>
    a220:	e0855003 	add	r5, r5, r3
    a224:	e5943010 	ldr	r3, [r4, #16]
    a228:	e3530000 	cmp	r3, #0
    a22c:	1a000002 	bne	a23c <CTimer::SetTime(unsigned int, int)+0x40>
    a230:	e3a00001 	mov	r0, #1
    a234:	e584500c 	str	r5, [r4, #12]
    a238:	e8bd8038 	pop	{r3, r4, r5, pc}
    a23c:	ebffff04 	bl	9e54 <EnterCritical>
    a240:	e5943010 	ldr	r3, [r4, #16]
    a244:	e584500c 	str	r5, [r4, #12]
    a248:	e3530000 	cmp	r3, #0
    a24c:	0a000007 	beq	a270 <CTimer::SetTime(unsigned int, int)+0x74>
    a250:	ebffff0e 	bl	9e90 <LeaveCritical>
    a254:	e3a00001 	mov	r0, #1
    a258:	e8bd8038 	pop	{r3, r4, r5, pc}
    a25c:	e2631000 	rsb	r1, r3, #0
    a260:	e1510005 	cmp	r1, r5
    a264:	daffffed 	ble	a220 <CTimer::SetTime(unsigned int, int)+0x24>
    a268:	e1a00002 	mov	r0, r2
    a26c:	e8bd8038 	pop	{r3, r4, r5, pc}
    a270:	e3a00001 	mov	r0, #1
    a274:	e8bd8038 	pop	{r3, r4, r5, pc}

0000a278 <CTimer::GetClockTicks()>:
    a278:	e3a03000 	mov	r3, #0
    a27c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a280:	e59f2008 	ldr	r2, [pc, #8]	; a290 <CTimer::GetClockTicks()+0x18>
    a284:	e5920004 	ldr	r0, [r2, #4]
    a288:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a28c:	e12fff1e 	bx	lr
    a290:	20003000 	.word	0x20003000

0000a294 <CTimer::GetTicks() const>:
    a294:	e5900004 	ldr	r0, [r0, #4]
    a298:	e12fff1e 	bx	lr

0000a29c <CTimer::GetUptime() const>:
    a29c:	e5900008 	ldr	r0, [r0, #8]
    a2a0:	e12fff1e 	bx	lr

0000a2a4 <CTimer::GetTime() const>:
    a2a4:	e590000c 	ldr	r0, [r0, #12]
    a2a8:	e12fff1e 	bx	lr

0000a2ac <CTimer::GetUniversalTime() const>:
    a2ac:	e5903014 	ldr	r3, [r0, #20]
    a2b0:	e590000c 	ldr	r0, [r0, #12]
    a2b4:	e0633203 	rsb	r3, r3, r3, lsl #4
    a2b8:	e1a03103 	lsl	r3, r3, #2
    a2bc:	e1530000 	cmp	r3, r0
    a2c0:	d0630000 	rsble	r0, r3, r0
    a2c4:	c3a00000 	movgt	r0, #0
    a2c8:	e12fff1e 	bx	lr

0000a2cc <CTimer::GetTimeString()>:
    a2cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2d0:	e5903010 	ldr	r3, [r0, #16]
    a2d4:	e24dd014 	sub	sp, sp, #20
    a2d8:	e3530000 	cmp	r3, #0
    a2dc:	e1a04000 	mov	r4, r0
    a2e0:	1a00006b 	bne	a494 <CTimer::GetTimeString()+0x1c8>
    a2e4:	e590500c 	ldr	r5, [r0, #12]
    a2e8:	e590a004 	ldr	sl, [r0, #4]
    a2ec:	e19a0005 	orrs	r0, sl, r5
    a2f0:	0a00005c 	beq	a468 <CTimer::GetTimeString()+0x19c>
    a2f4:	e59f71c8 	ldr	r7, [pc, #456]	; a4c4 <CTimer::GetTimeString()+0x1f8>
    a2f8:	e3a02064 	mov	r2, #100	; 0x64
    a2fc:	e0883597 	umull	r3, r8, r7, r5
    a300:	e1a082a8 	lsr	r8, r8, #5
    a304:	e1a01008 	mov	r1, r8
    a308:	e0873897 	umull	r3, r7, r7, r8
    a30c:	e59f31b4 	ldr	r3, [pc, #436]	; a4c8 <CTimer::GetTimeString()+0x1fc>
    a310:	e1a072a7 	lsr	r7, r7, #5
    a314:	e0830793 	umull	r0, r3, r3, r7
    a318:	e1a09007 	mov	r9, r7
    a31c:	e0688208 	rsb	r8, r8, r8, lsl #4
    a320:	e0677207 	rsb	r7, r7, r7, lsl #4
    a324:	e0458108 	sub	r8, r5, r8, lsl #2
    a328:	e3a0be19 	mov	fp, #400	; 0x190
    a32c:	e59f4198 	ldr	r4, [pc, #408]	; a4cc <CTimer::GetTimeString()+0x200>
    a330:	e59f6198 	ldr	r6, [pc, #408]	; a4d0 <CTimer::GetTimeString()+0x204>
    a334:	e59fe198 	ldr	lr, [pc, #408]	; a4d4 <CTimer::GetTimeString()+0x208>
    a338:	e59fc198 	ldr	ip, [pc, #408]	; a4d8 <CTimer::GetTimeString()+0x20c>
    a33c:	e0417107 	sub	r7, r1, r7, lsl #2
    a340:	e1a05223 	lsr	r5, r3, #4
    a344:	ea00000a 	b	a374 <CTimer::GetTimeString()+0xa8>
    a348:	e001019b 	mul	r1, fp, r1
    a34c:	e0611004 	rsb	r1, r1, r4
    a350:	e16f1f11 	clz	r1, r1
    a354:	e1a012a1 	lsr	r1, r1, #5
    a358:	e3510000 	cmp	r1, #0
    a35c:	11a0100e 	movne	r1, lr
    a360:	01a0100c 	moveq	r1, ip
    a364:	e1550001 	cmp	r5, r1
    a368:	3a00000b 	bcc	a39c <CTimer::GetTimeString()+0xd0>
    a36c:	e0615005 	rsb	r5, r1, r5
    a370:	e2844001 	add	r4, r4, #1
    a374:	e0813496 	umull	r3, r1, r6, r4
    a378:	e1a002a1 	lsr	r0, r1, #5
    a37c:	e0000092 	mul	r0, r2, r0
    a380:	e0540000 	subs	r0, r4, r0
    a384:	e1a013a1 	lsr	r1, r1, #7
    a388:	0affffee 	beq	a348 <CTimer::GetTimeString()+0x7c>
    a38c:	e3140003 	tst	r4, #3
    a390:	03a01001 	moveq	r1, #1
    a394:	13a01000 	movne	r1, #0
    a398:	eaffffee 	b	a358 <CTimer::GetTimeString()+0x8c>
    a39c:	e3a02e19 	mov	r2, #400	; 0x190
    a3a0:	e3a06000 	mov	r6, #0
    a3a4:	e59f3124 	ldr	r3, [pc, #292]	; a4d0 <CTimer::GetTimeString()+0x204>
    a3a8:	e3140003 	tst	r4, #3
    a3ac:	e0831493 	umull	r1, r3, r3, r4
    a3b0:	e1a033a3 	lsr	r3, r3, #7
    a3b4:	e0030392 	mul	r3, r2, r3
    a3b8:	e0633004 	rsb	r3, r3, r4
    a3bc:	e16f3f13 	clz	r3, r3
    a3c0:	03a01001 	moveq	r1, #1
    a3c4:	11a01006 	movne	r1, r6
    a3c8:	e1a032a3 	lsr	r3, r3, #5
    a3cc:	e1500006 	cmp	r0, r6
    a3d0:	e59f2104 	ldr	r2, [pc, #260]	; a4dc <CTimer::GetTimeString()+0x210>
    a3d4:	01a00003 	moveq	r0, r3
    a3d8:	11a00001 	movne	r0, r1
    a3dc:	ea000001 	b	a3e8 <CTimer::GetTimeString()+0x11c>
    a3e0:	e0635005 	rsb	r5, r3, r5
    a3e4:	e2866001 	add	r6, r6, #1
    a3e8:	e3560001 	cmp	r6, #1
    a3ec:	0a000030 	beq	a4b4 <CTimer::GetTimeString()+0x1e8>
    a3f0:	e7923106 	ldr	r3, [r2, r6, lsl #2]
    a3f4:	e1550003 	cmp	r5, r3
    a3f8:	2afffff8 	bcs	a3e0 <CTimer::GetTimeString()+0x114>
    a3fc:	e3a03064 	mov	r3, #100	; 0x64
    a400:	e59fb0c8 	ldr	fp, [pc, #200]	; a4d0 <CTimer::GetTimeString()+0x204>
    a404:	e3a00010 	mov	r0, #16
    a408:	e08b2a9b 	umull	r2, fp, fp, sl
    a40c:	e1a0b2ab 	lsr	fp, fp, #5
    a410:	e00b0b93 	mul	fp, r3, fp
    a414:	ebfffe8a 	bl	9e44 <operator new(unsigned int)>
    a418:	e06bb00a 	rsb	fp, fp, sl
    a41c:	e1a0a000 	mov	sl, r0
    a420:	eb000b3c 	bl	d118 <CString::CString()>
    a424:	e59f30b4 	ldr	r3, [pc, #180]	; a4e0 <CTimer::GetTimeString()+0x214>
    a428:	e1540003 	cmp	r4, r3
    a42c:	9a00000f 	bls	a470 <CTimer::GetTimeString()+0x1a4>
    a430:	e59f3090 	ldr	r3, [pc, #144]	; a4c8 <CTimer::GetTimeString()+0x1fc>
    a434:	e59f20a8 	ldr	r2, [pc, #168]	; a4e4 <CTimer::GetTimeString()+0x218>
    a438:	e0831993 	umull	r1, r3, r3, r9
    a43c:	e1a03223 	lsr	r3, r3, #4
    a440:	e0833083 	add	r3, r3, r3, lsl #1
    a444:	e0499183 	sub	r9, r9, r3, lsl #3
    a448:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    a44c:	e1a0000a 	mov	r0, sl
    a450:	e98d0980 	stmib	sp, {r7, r8, fp}
    a454:	e2853001 	add	r3, r5, #1
    a458:	e58d9000 	str	r9, [sp]
    a45c:	e59f1084 	ldr	r1, [pc, #132]	; a4e8 <CTimer::GetTimeString()+0x21c>
    a460:	eb000d9c 	bl	dad8 <CString::Format(char const*, ...)>
    a464:	e1a0000a 	mov	r0, sl
    a468:	e28dd014 	add	sp, sp, #20
    a46c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a470:	e1a0000a 	mov	r0, sl
    a474:	e88d0900 	stm	sp, {r8, fp}
    a478:	e1a02009 	mov	r2, r9
    a47c:	e1a03007 	mov	r3, r7
    a480:	e59f1064 	ldr	r1, [pc, #100]	; a4ec <CTimer::GetTimeString()+0x220>
    a484:	eb000d93 	bl	dad8 <CString::Format(char const*, ...)>
    a488:	e1a0000a 	mov	r0, sl
    a48c:	e28dd014 	add	sp, sp, #20
    a490:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a494:	ebfffe6e 	bl	9e54 <EnterCritical>
    a498:	e5943010 	ldr	r3, [r4, #16]
    a49c:	e594500c 	ldr	r5, [r4, #12]
    a4a0:	e3530000 	cmp	r3, #0
    a4a4:	e594a004 	ldr	sl, [r4, #4]
    a4a8:	0affff8f 	beq	a2ec <CTimer::GetTimeString()+0x20>
    a4ac:	ebfffe77 	bl	9e90 <LeaveCritical>
    a4b0:	eaffff8d 	b	a2ec <CTimer::GetTimeString()+0x20>
    a4b4:	e3500000 	cmp	r0, #0
    a4b8:	0affffcc 	beq	a3f0 <CTimer::GetTimeString()+0x124>
    a4bc:	e3a0301d 	mov	r3, #29
    a4c0:	eaffffcb 	b	a3f4 <CTimer::GetTimeString()+0x128>
    a4c4:	88888889 	.word	0x88888889
    a4c8:	aaaaaaab 	.word	0xaaaaaaab
    a4cc:	000007b2 	.word	0x000007b2
    a4d0:	51eb851f 	.word	0x51eb851f
    a4d4:	0000016e 	.word	0x0000016e
    a4d8:	0000016d 	.word	0x0000016d
    a4dc:	0001054c 	.word	0x0001054c
    a4e0:	000007b7 	.word	0x000007b7
    a4e4:	00012818 	.word	0x00012818
    a4e8:	000105ec 	.word	0x000105ec
    a4ec:	00010608 	.word	0x00010608

0000a4f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a4f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a4f4:	e1a09000 	mov	r9, r0
    a4f8:	e1a04002 	mov	r4, r2
    a4fc:	e3a00014 	mov	r0, #20
    a500:	e1a06001 	mov	r6, r1
    a504:	e1a07003 	mov	r7, r3
    a508:	e59d5020 	ldr	r5, [sp, #32]
    a50c:	ebfffe4c 	bl	9e44 <operator new(unsigned int)>
    a510:	e5993004 	ldr	r3, [r9, #4]
    a514:	e3540000 	cmp	r4, #0
    a518:	e1a08000 	mov	r8, r0
    a51c:	e0866003 	add	r6, r6, r3
    a520:	0a000037 	beq	a604 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    a524:	e599301c 	ldr	r3, [r9, #28]
    a528:	e59f20e8 	ldr	r2, [pc, #232]	; a618 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a52c:	e3530000 	cmp	r3, #0
    a530:	e98800d0 	stmib	r8, {r4, r6, r7}
    a534:	e5885010 	str	r5, [r8, #16]
    a538:	e5882000 	str	r2, [r8]
    a53c:	1a00002e 	bne	a5fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a540:	e2895018 	add	r5, r9, #24
    a544:	e1a00005 	mov	r0, r5
    a548:	eb0010e0 	bl	e8d0 <CPtrList::GetFirst()>
    a54c:	e2504000 	subs	r4, r0, #0
    a550:	0a00001c 	beq	a5c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd8>
    a554:	e59f70bc 	ldr	r7, [pc, #188]	; a618 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a558:	ea000010 	b	a5a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb0>
    a55c:	e59a3000 	ldr	r3, [sl]
    a560:	e59f00b4 	ldr	r0, [pc, #180]	; a61c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    a564:	e1530007 	cmp	r3, r7
    a568:	e59f10b0 	ldr	r1, [pc, #176]	; a620 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a56c:	e59f20b0 	ldr	r2, [pc, #176]	; a624 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    a570:	0a000000 	beq	a578 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x88>
    a574:	eb00083e 	bl	c674 <assertion_failed>
    a578:	e59a3008 	ldr	r3, [sl, #8]
    a57c:	e1a00005 	mov	r0, r5
    a580:	e0663003 	rsb	r3, r6, r3
    a584:	e3530000 	cmp	r3, #0
    a588:	e1a01004 	mov	r1, r4
    a58c:	ca000017 	bgt	a5f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
    a590:	eb0010d0 	bl	e8d8 <CPtrList::GetNext(TPtrListElement*)>
    a594:	e3500000 	cmp	r0, #0
    a598:	0a00000a 	beq	a5c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd8>
    a59c:	e1a04000 	mov	r4, r0
    a5a0:	e1a00005 	mov	r0, r5
    a5a4:	e1a01004 	mov	r1, r4
    a5a8:	eb0010e0 	bl	e930 <CPtrList::GetPtr(TPtrListElement*)>
    a5ac:	e250a000 	subs	sl, r0, #0
    a5b0:	1affffe9 	bne	a55c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    a5b4:	e59f006c 	ldr	r0, [pc, #108]	; a628 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    a5b8:	e59f1060 	ldr	r1, [pc, #96]	; a620 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a5bc:	e59f2068 	ldr	r2, [pc, #104]	; a62c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    a5c0:	eb00082b 	bl	c674 <assertion_failed>
    a5c4:	eaffffe4 	b	a55c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    a5c8:	e1a00005 	mov	r0, r5
    a5cc:	e1a01004 	mov	r1, r4
    a5d0:	e1a02008 	mov	r2, r8
    a5d4:	eb00112b 	bl	ea88 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a5d8:	e599301c 	ldr	r3, [r9, #28]
    a5dc:	e3530000 	cmp	r3, #0
    a5e0:	0a000000 	beq	a5e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
    a5e4:	ebfffe29 	bl	9e90 <LeaveCritical>
    a5e8:	e1a00008 	mov	r0, r8
    a5ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a5f0:	e1a02008 	mov	r2, r8
    a5f4:	eb0010e3 	bl	e988 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a5f8:	eafffff6 	b	a5d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe8>
    a5fc:	ebfffe14 	bl	9e54 <EnterCritical>
    a600:	eaffffce 	b	a540 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x50>
    a604:	e59f0024 	ldr	r0, [pc, #36]	; a630 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    a608:	e59f1010 	ldr	r1, [pc, #16]	; a620 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a60c:	e59f2020 	ldr	r2, [pc, #32]	; a634 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a610:	eb000817 	bl	c674 <assertion_failed>
    a614:	eaffffc2 	b	a524 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x34>
    a618:	4b544d43 	.word	0x4b544d43
    a61c:	0001062c 	.word	0x0001062c
    a620:	00010594 	.word	0x00010594
    a624:	00000116 	.word	0x00000116
    a628:	0001061c 	.word	0x0001061c
    a62c:	00000115 	.word	0x00000115
    a630:	00010318 	.word	0x00010318
    a634:	00000105 	.word	0x00000105

0000a638 <CTimer::CancelKernelTimer(unsigned int)>:
    a638:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    a63c:	e2514000 	subs	r4, r1, #0
    a640:	e1a05000 	mov	r5, r0
    a644:	0a00001e 	beq	a6c4 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
    a648:	e595301c 	ldr	r3, [r5, #28]
    a64c:	e3530000 	cmp	r3, #0
    a650:	1a000019 	bne	a6bc <CTimer::CancelKernelTimer(unsigned int)+0x84>
    a654:	e2856018 	add	r6, r5, #24
    a658:	e1a00006 	mov	r0, r6
    a65c:	e1a01004 	mov	r1, r4
    a660:	eb001199 	bl	eccc <CPtrList::Find(void*)>
    a664:	e2507000 	subs	r7, r0, #0
    a668:	0a00000e 	beq	a6a8 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    a66c:	e59f3064 	ldr	r3, [pc, #100]	; a6d8 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
    a670:	e5942000 	ldr	r2, [r4]
    a674:	e1520003 	cmp	r2, r3
    a678:	0a000003 	beq	a68c <CTimer::CancelKernelTimer(unsigned int)+0x54>
    a67c:	e59f0058 	ldr	r0, [pc, #88]	; a6dc <CTimer::CancelKernelTimer(unsigned int)+0xa4>
    a680:	e59f1058 	ldr	r1, [pc, #88]	; a6e0 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    a684:	e59f2058 	ldr	r2, [pc, #88]	; a6e4 <CTimer::CancelKernelTimer(unsigned int)+0xac>
    a688:	eb0007f9 	bl	c674 <assertion_failed>
    a68c:	e1a00006 	mov	r0, r6
    a690:	e1a01007 	mov	r1, r7
    a694:	eb00113a 	bl	eb84 <CPtrList::Remove(TPtrListElement*)>
    a698:	e3a03000 	mov	r3, #0
    a69c:	e1a00004 	mov	r0, r4
    a6a0:	e5843000 	str	r3, [r4]
    a6a4:	ebfffde8 	bl	9e4c <operator delete(void*)>
    a6a8:	e595301c 	ldr	r3, [r5, #28]
    a6ac:	e3530000 	cmp	r3, #0
    a6b0:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
    a6b4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    a6b8:	eafffdf4 	b	9e90 <LeaveCritical>
    a6bc:	ebfffde4 	bl	9e54 <EnterCritical>
    a6c0:	eaffffe3 	b	a654 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    a6c4:	e59f001c 	ldr	r0, [pc, #28]	; a6e8 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    a6c8:	e59f1010 	ldr	r1, [pc, #16]	; a6e0 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    a6cc:	e59f2018 	ldr	r2, [pc, #24]	; a6ec <CTimer::CancelKernelTimer(unsigned int)+0xb4>
    a6d0:	eb0007e7 	bl	c674 <assertion_failed>
    a6d4:	eaffffdb 	b	a648 <CTimer::CancelKernelTimer(unsigned int)+0x10>
    a6d8:	4b544d43 	.word	0x4b544d43
    a6dc:	000105c4 	.word	0x000105c4
    a6e0:	00010594 	.word	0x00010594
    a6e4:	00000139 	.word	0x00000139
    a6e8:	000105b8 	.word	0x000105b8
    a6ec:	00000132 	.word	0x00000132

0000a6f0 <CTimer::PollKernelTimers()>:
    a6f0:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    a6f4:	e590301c 	ldr	r3, [r0, #28]
    a6f8:	e1a06000 	mov	r6, r0
    a6fc:	e3530000 	cmp	r3, #0
    a700:	1a000048 	bne	a828 <CTimer::PollKernelTimers()+0x138>
    a704:	e2867018 	add	r7, r6, #24
    a708:	e1a00007 	mov	r0, r7
    a70c:	eb00106f 	bl	e8d0 <CPtrList::GetFirst()>
    a710:	e2505000 	subs	r5, r0, #0
    a714:	159f8114 	ldrne	r8, [pc, #276]	; a830 <CTimer::PollKernelTimers()+0x140>
    a718:	1a000011 	bne	a764 <CTimer::PollKernelTimers()+0x74>
    a71c:	ea000037 	b	a800 <CTimer::PollKernelTimers()+0x110>
    a720:	e5945004 	ldr	r5, [r4, #4]
    a724:	e3550000 	cmp	r5, #0
    a728:	0a00002c 	beq	a7e0 <CTimer::PollKernelTimers()+0xf0>
    a72c:	e1a00004 	mov	r0, r4
    a730:	e594100c 	ldr	r1, [r4, #12]
    a734:	e5942010 	ldr	r2, [r4, #16]
    a738:	e12fff35 	blx	r5
    a73c:	e3a03000 	mov	r3, #0
    a740:	e1a00004 	mov	r0, r4
    a744:	e5843000 	str	r3, [r4]
    a748:	ebfffdbf 	bl	9e4c <operator delete(void*)>
    a74c:	e596301c 	ldr	r3, [r6, #28]
    a750:	e3530000 	cmp	r3, #0
    a754:	1a000026 	bne	a7f4 <CTimer::PollKernelTimers()+0x104>
    a758:	e3590000 	cmp	r9, #0
    a75c:	0a000027 	beq	a800 <CTimer::PollKernelTimers()+0x110>
    a760:	e1a05009 	mov	r5, r9
    a764:	e1a00007 	mov	r0, r7
    a768:	e1a01005 	mov	r1, r5
    a76c:	eb00106f 	bl	e930 <CPtrList::GetPtr(TPtrListElement*)>
    a770:	e2504000 	subs	r4, r0, #0
    a774:	0a000026 	beq	a814 <CTimer::PollKernelTimers()+0x124>
    a778:	e5943000 	ldr	r3, [r4]
    a77c:	e1530008 	cmp	r3, r8
    a780:	0a000003 	beq	a794 <CTimer::PollKernelTimers()+0xa4>
    a784:	e59f00a8 	ldr	r0, [pc, #168]	; a834 <CTimer::PollKernelTimers()+0x144>
    a788:	e59f10a8 	ldr	r1, [pc, #168]	; a838 <CTimer::PollKernelTimers()+0x148>
    a78c:	e59f20a8 	ldr	r2, [pc, #168]	; a83c <CTimer::PollKernelTimers()+0x14c>
    a790:	eb0007b7 	bl	c674 <assertion_failed>
    a794:	e5962004 	ldr	r2, [r6, #4]
    a798:	e5943008 	ldr	r3, [r4, #8]
    a79c:	e0623003 	rsb	r3, r2, r3
    a7a0:	e3530000 	cmp	r3, #0
    a7a4:	ca000015 	bgt	a800 <CTimer::PollKernelTimers()+0x110>
    a7a8:	e1a01005 	mov	r1, r5
    a7ac:	e1a00007 	mov	r0, r7
    a7b0:	eb001048 	bl	e8d8 <CPtrList::GetNext(TPtrListElement*)>
    a7b4:	e1a01005 	mov	r1, r5
    a7b8:	e1a09000 	mov	r9, r0
    a7bc:	e1a00007 	mov	r0, r7
    a7c0:	eb0010ef 	bl	eb84 <CPtrList::Remove(TPtrListElement*)>
    a7c4:	e596301c 	ldr	r3, [r6, #28]
    a7c8:	e3530000 	cmp	r3, #0
    a7cc:	0affffd3 	beq	a720 <CTimer::PollKernelTimers()+0x30>
    a7d0:	ebfffdae 	bl	9e90 <LeaveCritical>
    a7d4:	e5945004 	ldr	r5, [r4, #4]
    a7d8:	e3550000 	cmp	r5, #0
    a7dc:	1affffd2 	bne	a72c <CTimer::PollKernelTimers()+0x3c>
    a7e0:	e59f0058 	ldr	r0, [pc, #88]	; a840 <CTimer::PollKernelTimers()+0x150>
    a7e4:	e59f104c 	ldr	r1, [pc, #76]	; a838 <CTimer::PollKernelTimers()+0x148>
    a7e8:	e59f2054 	ldr	r2, [pc, #84]	; a844 <CTimer::PollKernelTimers()+0x154>
    a7ec:	eb0007a0 	bl	c674 <assertion_failed>
    a7f0:	eaffffcd 	b	a72c <CTimer::PollKernelTimers()+0x3c>
    a7f4:	ebfffd96 	bl	9e54 <EnterCritical>
    a7f8:	e3590000 	cmp	r9, #0
    a7fc:	1affffd7 	bne	a760 <CTimer::PollKernelTimers()+0x70>
    a800:	e596301c 	ldr	r3, [r6, #28]
    a804:	e3530000 	cmp	r3, #0
    a808:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    a80c:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    a810:	eafffd9e 	b	9e90 <LeaveCritical>
    a814:	e59f002c 	ldr	r0, [pc, #44]	; a848 <CTimer::PollKernelTimers()+0x158>
    a818:	e59f1018 	ldr	r1, [pc, #24]	; a838 <CTimer::PollKernelTimers()+0x148>
    a81c:	e59f2028 	ldr	r2, [pc, #40]	; a84c <CTimer::PollKernelTimers()+0x15c>
    a820:	eb000793 	bl	c674 <assertion_failed>
    a824:	eaffffd3 	b	a778 <CTimer::PollKernelTimers()+0x88>
    a828:	ebfffd89 	bl	9e54 <EnterCritical>
    a82c:	eaffffb4 	b	a704 <CTimer::PollKernelTimers()+0x14>
    a830:	4b544d43 	.word	0x4b544d43
    a834:	000105c4 	.word	0x000105c4
    a838:	00010594 	.word	0x00010594
    a83c:	0000014f 	.word	0x0000014f
    a840:	00010318 	.word	0x00010318
    a844:	0000015d 	.word	0x0000015d
    a848:	000105b8 	.word	0x000105b8
    a84c:	0000014e 	.word	0x0000014e

0000a850 <CTimer::InterruptHandler()>:
    a850:	e92d4010 	push	{r4, lr}
    a854:	e3a03000 	mov	r3, #0
    a858:	e1a04000 	mov	r4, r0
    a85c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a860:	e59f3100 	ldr	r3, [pc, #256]	; a968 <CTimer::InterruptHandler()+0x118>
    a864:	e5933000 	ldr	r3, [r3]
    a868:	e3130008 	tst	r3, #8
    a86c:	0a000038 	beq	a954 <CTimer::InterruptHandler()+0x104>
    a870:	e59f20f0 	ldr	r2, [pc, #240]	; a968 <CTimer::InterruptHandler()+0x118>
    a874:	e5923018 	ldr	r3, [r2, #24]
    a878:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a87c:	e2833010 	add	r3, r3, #16
    a880:	e5823018 	str	r3, [r2, #24]
    a884:	e5921004 	ldr	r1, [r2, #4]
    a888:	e1530001 	cmp	r3, r1
    a88c:	e3a01008 	mov	r1, #8
    a890:	35923004 	ldrcc	r3, [r2, #4]
    a894:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    a898:	32833010 	addcc	r3, r3, #16
    a89c:	35823018 	strcc	r3, [r2, #24]
    a8a0:	e59f20c0 	ldr	r2, [pc, #192]	; a968 <CTimer::InterruptHandler()+0x118>
    a8a4:	e3a03000 	mov	r3, #0
    a8a8:	e5821000 	str	r1, [r2]
    a8ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a8b0:	e5941010 	ldr	r1, [r4, #16]
    a8b4:	e1510003 	cmp	r1, r3
    a8b8:	1a000018 	bne	a920 <CTimer::InterruptHandler()+0xd0>
    a8bc:	e3a00064 	mov	r0, #100	; 0x64
    a8c0:	e5943004 	ldr	r3, [r4, #4]
    a8c4:	e59f20a0 	ldr	r2, [pc, #160]	; a96c <CTimer::InterruptHandler()+0x11c>
    a8c8:	e2833001 	add	r3, r3, #1
    a8cc:	e082c392 	umull	ip, r2, r2, r3
    a8d0:	e1a022a2 	lsr	r2, r2, #5
    a8d4:	e0020290 	mul	r2, r0, r2
    a8d8:	e1530002 	cmp	r3, r2
    a8dc:	e5843004 	str	r3, [r4, #4]
    a8e0:	1a000007 	bne	a904 <CTimer::InterruptHandler()+0xb4>
    a8e4:	e5943008 	ldr	r3, [r4, #8]
    a8e8:	e2833001 	add	r3, r3, #1
    a8ec:	e5843008 	str	r3, [r4, #8]
    a8f0:	e594300c 	ldr	r3, [r4, #12]
    a8f4:	e2833001 	add	r3, r3, #1
    a8f8:	e584300c 	str	r3, [r4, #12]
    a8fc:	e3510000 	cmp	r1, #0
    a900:	1a000002 	bne	a910 <CTimer::InterruptHandler()+0xc0>
    a904:	e1a00004 	mov	r0, r4
    a908:	e8bd4010 	pop	{r4, lr}
    a90c:	eaffff77 	b	a6f0 <CTimer::PollKernelTimers()>
    a910:	ebfffd5e 	bl	9e90 <LeaveCritical>
    a914:	e1a00004 	mov	r0, r4
    a918:	e8bd4010 	pop	{r4, lr}
    a91c:	eaffff73 	b	a6f0 <CTimer::PollKernelTimers()>
    a920:	ebfffd4b 	bl	9e54 <EnterCritical>
    a924:	e3a01064 	mov	r1, #100	; 0x64
    a928:	e5943004 	ldr	r3, [r4, #4]
    a92c:	e59f2038 	ldr	r2, [pc, #56]	; a96c <CTimer::InterruptHandler()+0x11c>
    a930:	e2833001 	add	r3, r3, #1
    a934:	e0820392 	umull	r0, r2, r2, r3
    a938:	e1a022a2 	lsr	r2, r2, #5
    a93c:	e0020291 	mul	r2, r1, r2
    a940:	e1530002 	cmp	r3, r2
    a944:	e5843004 	str	r3, [r4, #4]
    a948:	e5941010 	ldr	r1, [r4, #16]
    a94c:	1affffea 	bne	a8fc <CTimer::InterruptHandler()+0xac>
    a950:	eaffffe3 	b	a8e4 <CTimer::InterruptHandler()+0x94>
    a954:	e59f0014 	ldr	r0, [pc, #20]	; a970 <CTimer::InterruptHandler()+0x120>
    a958:	e59f1014 	ldr	r1, [pc, #20]	; a974 <CTimer::InterruptHandler()+0x124>
    a95c:	e59f2014 	ldr	r2, [pc, #20]	; a978 <CTimer::InterruptHandler()+0x128>
    a960:	eb000743 	bl	c674 <assertion_failed>
    a964:	eaffffc1 	b	a870 <CTimer::InterruptHandler()+0x20>
    a968:	20003000 	.word	0x20003000
    a96c:	51eb851f 	.word	0x51eb851f
    a970:	00010654 	.word	0x00010654
    a974:	00010594 	.word	0x00010594
    a978:	0000016f 	.word	0x0000016f

0000a97c <CTimer::InterruptHandler(void*)>:
    a97c:	e92d4010 	push	{r4, lr}
    a980:	e2504000 	subs	r4, r0, #0
    a984:	0a000002 	beq	a994 <CTimer::InterruptHandler(void*)+0x18>
    a988:	e1a00004 	mov	r0, r4
    a98c:	e8bd4010 	pop	{r4, lr}
    a990:	eaffffae 	b	a850 <CTimer::InterruptHandler()>
    a994:	e59f0014 	ldr	r0, [pc, #20]	; a9b0 <CTimer::InterruptHandler(void*)+0x34>
    a998:	e59f1014 	ldr	r1, [pc, #20]	; a9b4 <CTimer::InterruptHandler(void*)+0x38>
    a99c:	e59f2014 	ldr	r2, [pc, #20]	; a9b8 <CTimer::InterruptHandler(void*)+0x3c>
    a9a0:	eb000733 	bl	c674 <assertion_failed>
    a9a4:	e1a00004 	mov	r0, r4
    a9a8:	e8bd4010 	pop	{r4, lr}
    a9ac:	eaffffa7 	b	a850 <CTimer::InterruptHandler()>
    a9b0:	00010678 	.word	0x00010678
    a9b4:	00010594 	.word	0x00010594
    a9b8:	00000191 	.word	0x00000191

0000a9bc <CTimer::TuneMsDelay()>:
    a9bc:	e92d4070 	push	{r4, r5, r6, lr}
    a9c0:	e1a05000 	mov	r5, r0
    a9c4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a9c8:	e5953020 	ldr	r3, [r5, #32]
    a9cc:	e24dd008 	sub	sp, sp, #8
    a9d0:	e0000390 	mul	r0, r0, r3
    a9d4:	e5954004 	ldr	r4, [r5, #4]
    a9d8:	eb000c4a 	bl	db08 <DelayLoop>
    a9dc:	e5951004 	ldr	r1, [r5, #4]
    a9e0:	e59f0068 	ldr	r0, [pc, #104]	; aa50 <CTimer::TuneMsDelay()+0x94>
    a9e4:	e0641001 	rsb	r1, r4, r1
    a9e8:	eb00125d 	bl	f364 <__aeabi_uidiv>
    a9ec:	e5953020 	ldr	r3, [r5, #32]
    a9f0:	e59f405c 	ldr	r4, [pc, #92]	; aa54 <CTimer::TuneMsDelay()+0x98>
    a9f4:	e0030093 	mul	r3, r3, r0
    a9f8:	e0832394 	umull	r2, r3, r4, r3
    a9fc:	e59f1054 	ldr	r1, [pc, #84]	; aa58 <CTimer::TuneMsDelay()+0x9c>
    aa00:	e1a032a3 	lsr	r3, r3, #5
    aa04:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    aa08:	e0821291 	umull	r1, r2, r1, r2
    aa0c:	e1a06000 	mov	r6, r0
    aa10:	e1a02322 	lsr	r2, r2, #6
    aa14:	e5852024 	str	r2, [r5, #36]	; 0x24
    aa18:	e5853020 	str	r3, [r5, #32]
    aa1c:	eb00088c 	bl	cc54 <CLogger::Get()>
    aa20:	e3a03064 	mov	r3, #100	; 0x64
    aa24:	e0842694 	umull	r2, r4, r4, r6
    aa28:	e1a042a4 	lsr	r4, r4, #5
    aa2c:	e0030493 	mul	r3, r3, r4
    aa30:	e0636006 	rsb	r6, r3, r6
    aa34:	e88d0050 	stm	sp, {r4, r6}
    aa38:	e59f101c 	ldr	r1, [pc, #28]	; aa5c <CTimer::TuneMsDelay()+0xa0>
    aa3c:	e3a02003 	mov	r2, #3
    aa40:	e59f3018 	ldr	r3, [pc, #24]	; aa60 <CTimer::TuneMsDelay()+0xa4>
    aa44:	eb000961 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa48:	e28dd008 	add	sp, sp, #8
    aa4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    aa50:	00002710 	.word	0x00002710
    aa54:	51eb851f 	.word	0x51eb851f
    aa58:	10624dd3 	.word	0x10624dd3
    aa5c:	0001057c 	.word	0x0001057c
    aa60:	00010684 	.word	0x00010684

0000aa64 <CTimer::Initialize()>:
    aa64:	e92d4038 	push	{r3, r4, r5, lr}
    aa68:	e1a04000 	mov	r4, r0
    aa6c:	e5900000 	ldr	r0, [r0]
    aa70:	e3500000 	cmp	r0, #0
    aa74:	0a000011 	beq	aac0 <CTimer::Initialize()+0x5c>
    aa78:	e3a01003 	mov	r1, #3
    aa7c:	e59f2054 	ldr	r2, [pc, #84]	; aad8 <CTimer::Initialize()+0x74>
    aa80:	e1a03004 	mov	r3, r4
    aa84:	eb000c6c 	bl	dc3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    aa88:	e3a05000 	mov	r5, #0
    aa8c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    aa90:	e59f2044 	ldr	r2, [pc, #68]	; aadc <CTimer::Initialize()+0x78>
    aa94:	e59f3044 	ldr	r3, [pc, #68]	; aae0 <CTimer::Initialize()+0x7c>
    aa98:	e1a00004 	mov	r0, r4
    aa9c:	e5823004 	str	r3, [r2, #4]
    aaa0:	e5923004 	ldr	r3, [r2, #4]
    aaa4:	e2833c27 	add	r3, r3, #9984	; 0x2700
    aaa8:	e2833010 	add	r3, r3, #16
    aaac:	e5823018 	str	r3, [r2, #24]
    aab0:	ebffffc1 	bl	a9bc <CTimer::TuneMsDelay()>
    aab4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    aab8:	e3a00001 	mov	r0, #1
    aabc:	e8bd8038 	pop	{r3, r4, r5, pc}
    aac0:	e59f001c 	ldr	r0, [pc, #28]	; aae4 <CTimer::Initialize()+0x80>
    aac4:	e59f101c 	ldr	r1, [pc, #28]	; aae8 <CTimer::Initialize()+0x84>
    aac8:	e3a02055 	mov	r2, #85	; 0x55
    aacc:	eb0006e8 	bl	c674 <assertion_failed>
    aad0:	e5940000 	ldr	r0, [r4]
    aad4:	eaffffe7 	b	aa78 <CTimer::Initialize()+0x14>
    aad8:	0000a97c 	.word	0x0000a97c
    aadc:	20003000 	.word	0x20003000
    aae0:	fe363c80 	.word	0xfe363c80
    aae4:	000105a0 	.word	0x000105a0
    aae8:	00010594 	.word	0x00010594

0000aaec <CTimer::SimpleMsDelay(unsigned int)>:
    aaec:	e3500000 	cmp	r0, #0
    aaf0:	012fff1e 	bxeq	lr
    aaf4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    aaf8:	e0000093 	mul	r0, r3, r0
    aafc:	e3500000 	cmp	r0, #0
    ab00:	012fff1e 	bxeq	lr
    ab04:	eafffd4c 	b	a03c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000ab08 <CTimer::SimpleusDelay(unsigned int)>:
    ab08:	e3500000 	cmp	r0, #0
    ab0c:	012fff1e 	bxeq	lr
    ab10:	eafffd49 	b	a03c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000ab14 <CTimer::IsLeapYear(unsigned int)>:
    ab14:	e3a02064 	mov	r2, #100	; 0x64
    ab18:	e59f303c 	ldr	r3, [pc, #60]	; ab5c <CTimer::IsLeapYear(unsigned int)+0x48>
    ab1c:	e0831093 	umull	r1, r3, r3, r0
    ab20:	e1a012a3 	lsr	r1, r3, #5
    ab24:	e0020192 	mul	r2, r2, r1
    ab28:	e1500002 	cmp	r0, r2
    ab2c:	0a000003 	beq	ab40 <CTimer::IsLeapYear(unsigned int)+0x2c>
    ab30:	e3100003 	tst	r0, #3
    ab34:	03a00001 	moveq	r0, #1
    ab38:	13a00000 	movne	r0, #0
    ab3c:	e12fff1e 	bx	lr
    ab40:	e3a02e19 	mov	r2, #400	; 0x190
    ab44:	e1a033a3 	lsr	r3, r3, #7
    ab48:	e0030392 	mul	r3, r2, r3
    ab4c:	e0630000 	rsb	r0, r3, r0
    ab50:	e16f0f10 	clz	r0, r0
    ab54:	e1a002a0 	lsr	r0, r0, #5
    ab58:	e12fff1e 	bx	lr
    ab5c:	51eb851f 	.word	0x51eb851f

0000ab60 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    ab60:	e3500001 	cmp	r0, #1
    ab64:	0a000002 	beq	ab74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
    ab68:	e59f3058 	ldr	r3, [pc, #88]	; abc8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
    ab6c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    ab70:	e12fff1e 	bx	lr
    ab74:	e3a02064 	mov	r2, #100	; 0x64
    ab78:	e59f304c 	ldr	r3, [pc, #76]	; abcc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
    ab7c:	e083c193 	umull	ip, r3, r3, r1
    ab80:	e1a0c2a3 	lsr	ip, r3, #5
    ab84:	e0020c92 	mul	r2, r2, ip
    ab88:	e1510002 	cmp	r1, r2
    ab8c:	0a000006 	beq	abac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
    ab90:	e3110003 	tst	r1, #3
    ab94:	03a01001 	moveq	r1, #1
    ab98:	13a01000 	movne	r1, #0
    ab9c:	e3510000 	cmp	r1, #0
    aba0:	0afffff0 	beq	ab68 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    aba4:	e3a0001d 	mov	r0, #29
    aba8:	e12fff1e 	bx	lr
    abac:	e3a02e19 	mov	r2, #400	; 0x190
    abb0:	e1a033a3 	lsr	r3, r3, #7
    abb4:	e0030392 	mul	r3, r2, r3
    abb8:	e0631001 	rsb	r1, r3, r1
    abbc:	e16f1f11 	clz	r1, r1
    abc0:	e1a012a1 	lsr	r1, r1, #5
    abc4:	eafffff4 	b	ab9c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
    abc8:	0001054c 	.word	0x0001054c
    abcc:	51eb851f 	.word	0x51eb851f

0000abd0 <CTimer::Get()>:
    abd0:	e92d4010 	push	{r4, lr}
    abd4:	e59f4020 	ldr	r4, [pc, #32]	; abfc <CTimer::Get()+0x2c>
    abd8:	e5940000 	ldr	r0, [r4]
    abdc:	e3500000 	cmp	r0, #0
    abe0:	18bd8010 	popne	{r4, pc}
    abe4:	e59f0014 	ldr	r0, [pc, #20]	; ac00 <CTimer::Get()+0x30>
    abe8:	e59f1014 	ldr	r1, [pc, #20]	; ac04 <CTimer::Get()+0x34>
    abec:	e59f2014 	ldr	r2, [pc, #20]	; ac08 <CTimer::Get()+0x38>
    abf0:	eb00069f 	bl	c674 <assertion_failed>
    abf4:	e5940000 	ldr	r0, [r4]
    abf8:	e8bd8010 	pop	{r4, pc}
    abfc:	00012914 	.word	0x00012914
    ac00:	0001069c 	.word	0x0001069c
    ac04:	00010594 	.word	0x00010594
    ac08:	000001d6 	.word	0x000001d6

0000ac0c <memcpy>:
    ac0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac10:	e352007f 	cmp	r2, #127	; 0x7f
    ac14:	9a00000b 	bls	ac48 <memcpy+0x3c>
    ac18:	e3110003 	tst	r1, #3
    ac1c:	1a000009 	bne	ac48 <memcpy+0x3c>
    ac20:	e3100003 	tst	r0, #3
    ac24:	1a000007 	bne	ac48 <memcpy+0x3c>
    ac28:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ac2c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac30:	e2422020 	sub	r2, r2, #32
    ac34:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac38:	f5d1f040 	pld	[r1, #64]	; 0x40
    ac3c:	e352001f 	cmp	r2, #31
    ac40:	8afffff9 	bhi	ac2c <memcpy+0x20>
    ac44:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    ac48:	e3520000 	cmp	r2, #0
    ac4c:	0a000003 	beq	ac60 <memcpy+0x54>
    ac50:	e4d13001 	ldrb	r3, [r1], #1
    ac54:	e2522001 	subs	r2, r2, #1
    ac58:	e4c03001 	strb	r3, [r0], #1
    ac5c:	1afffffb 	bne	ac50 <memcpy+0x44>
    ac60:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ac64:	e12fff1e 	bx	lr

0000ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    ac68:	e3a01000 	mov	r1, #0
    ac6c:	ea00000a 	b	ac9c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    ac70:	e3520009 	cmp	r2, #9
    ac74:	8a000012 	bhi	acc4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x5c>
    ac78:	e3730001 	cmn	r3, #1
    ac7c:	13a02000 	movne	r2, #0
    ac80:	03a02001 	moveq	r2, #1
    ac84:	e1510003 	cmp	r1, r3
    ac88:	91a01002 	movls	r1, r2
    ac8c:	83821001 	orrhi	r1, r2, #1
    ac90:	e3510000 	cmp	r1, #0
    ac94:	1a00000a 	bne	acc4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x5c>
    ac98:	e1a01003 	mov	r1, r3
    ac9c:	e4d0c001 	ldrb	ip, [r0], #1
    aca0:	e0813101 	add	r3, r1, r1, lsl #2
    aca4:	e6af207c 	sxtb	r2, ip
    aca8:	e2422030 	sub	r2, r2, #48	; 0x30
    acac:	e35c0000 	cmp	ip, #0
    acb0:	e0823083 	add	r3, r2, r3, lsl #1
    acb4:	e24c2030 	sub	r2, ip, #48	; 0x30
    acb8:	1affffec 	bne	ac70 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    acbc:	e1a00001 	mov	r0, r1
    acc0:	e12fff1e 	bx	lr
    acc4:	e3e00000 	mvn	r0, #0
    acc8:	e12fff1e 	bx	lr

0000accc <CKernelOptions::~CKernelOptions()>:
    accc:	e3a02000 	mov	r2, #0
    acd0:	e59f3004 	ldr	r3, [pc, #4]	; acdc <CKernelOptions::~CKernelOptions()+0x10>
    acd4:	e5832000 	str	r2, [r3]
    acd8:	e12fff1e 	bx	lr
    acdc:	00012918 	.word	0x00012918

0000ace0 <CKernelOptions::GetWidth() const>:
    ace0:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    ace4:	e12fff1e 	bx	lr

0000ace8 <CKernelOptions::GetHeight() const>:
    ace8:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    acec:	e12fff1e 	bx	lr

0000acf0 <CKernelOptions::GetLogDevice() const>:
    acf0:	e2800e81 	add	r0, r0, #2064	; 0x810
    acf4:	e2800008 	add	r0, r0, #8
    acf8:	e12fff1e 	bx	lr

0000acfc <CKernelOptions::GetLogLevel() const>:
    acfc:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    ad00:	e12fff1e 	bx	lr

0000ad04 <CKernelOptions::GetKeyMap() const>:
    ad04:	e2800e83 	add	r0, r0, #2096	; 0x830
    ad08:	e12fff1e 	bx	lr

0000ad0c <CKernelOptions::GetUSBPowerDelay() const>:
    ad0c:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    ad10:	e12fff1e 	bx	lr

0000ad14 <CKernelOptions::GetCPUSpeed() const>:
    ad14:	e5900838 	ldr	r0, [r0, #2104]	; 0x838
    ad18:	e12fff1e 	bx	lr

0000ad1c <CKernelOptions::GetSoCMaxTemp() const>:
    ad1c:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    ad20:	e12fff1e 	bx	lr

0000ad24 <CKernelOptions::Get()>:
    ad24:	e59f3004 	ldr	r3, [pc, #4]	; ad30 <CKernelOptions::Get()+0xc>
    ad28:	e5930000 	ldr	r0, [r3]
    ad2c:	e12fff1e 	bx	lr
    ad30:	00012918 	.word	0x00012918

0000ad34 <CKernelOptions::GetToken()>:
    ad34:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    ad38:	e5d32000 	ldrb	r2, [r3]
    ad3c:	e3520000 	cmp	r2, #0
    ad40:	1a000005 	bne	ad5c <CKernelOptions::GetToken()+0x28>
    ad44:	ea000014 	b	ad9c <CKernelOptions::GetToken()+0x68>
    ad48:	e2833001 	add	r3, r3, #1
    ad4c:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    ad50:	e5d32000 	ldrb	r2, [r3]
    ad54:	e3520000 	cmp	r2, #0
    ad58:	0a00000f 	beq	ad9c <CKernelOptions::GetToken()+0x68>
    ad5c:	e3520020 	cmp	r2, #32
    ad60:	0afffff8 	beq	ad48 <CKernelOptions::GetToken()+0x14>
    ad64:	e1a02003 	mov	r2, r3
    ad68:	e2822001 	add	r2, r2, #1
    ad6c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ad70:	e5d21000 	ldrb	r1, [r2]
    ad74:	e3510000 	cmp	r1, #0
    ad78:	0a000008 	beq	ada0 <CKernelOptions::GetToken()+0x6c>
    ad7c:	e3510020 	cmp	r1, #32
    ad80:	1afffff8 	bne	ad68 <CKernelOptions::GetToken()+0x34>
    ad84:	e3a01000 	mov	r1, #0
    ad88:	e282c001 	add	ip, r2, #1
    ad8c:	e580c80c 	str	ip, [r0, #2060]	; 0x80c
    ad90:	e5c21000 	strb	r1, [r2]
    ad94:	e1a00003 	mov	r0, r3
    ad98:	e12fff1e 	bx	lr
    ad9c:	e3a03000 	mov	r3, #0
    ada0:	e1a00003 	mov	r0, r3
    ada4:	e12fff1e 	bx	lr

0000ada8 <CKernelOptions::CKernelOptions()>:
    ada8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    adac:	e3a02004 	mov	r2, #4
    adb0:	e1a05000 	mov	r5, r0
    adb4:	e3a04000 	mov	r4, #0
    adb8:	e3a0303c 	mov	r3, #60	; 0x3c
    adbc:	e2808e81 	add	r8, r0, #2064	; 0x810
    adc0:	e2888008 	add	r8, r8, #8
    adc4:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    adc8:	e580383c 	str	r3, [r0, #2108]	; 0x83c
    adcc:	e24dd014 	sub	sp, sp, #20
    add0:	e59f12d8 	ldr	r1, [pc, #728]	; b0b0 <CKernelOptions::CKernelOptions()+0x308>
    add4:	e1a00008 	mov	r0, r8
    add8:	e5854810 	str	r4, [r5, #2064]	; 0x810
    addc:	e5854814 	str	r4, [r5, #2068]	; 0x814
    ade0:	e5854834 	str	r4, [r5, #2100]	; 0x834
    ade4:	e5854838 	str	r4, [r5, #2104]	; 0x838
    ade8:	e2859e83 	add	r9, r5, #2096	; 0x830
    adec:	eb0011b6 	bl	f4cc <strcpy>
    adf0:	e59f12bc 	ldr	r1, [pc, #700]	; b0b4 <CKernelOptions::CKernelOptions()+0x30c>
    adf4:	e1a00009 	mov	r0, r9
    adf8:	eb0011b3 	bl	f4cc <strcpy>
    adfc:	e59f32b4 	ldr	r3, [pc, #692]	; b0b8 <CKernelOptions::CKernelOptions()+0x310>
    ae00:	e28d0008 	add	r0, sp, #8
    ae04:	e5835000 	str	r5, [r3]
    ae08:	ebfff737 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    ae0c:	e58d4000 	str	r4, [sp]
    ae10:	e28d0008 	add	r0, sp, #8
    ae14:	e1a02005 	mov	r2, r5
    ae18:	e59f129c 	ldr	r1, [pc, #668]	; b0bc <CKernelOptions::CKernelOptions()+0x314>
    ae1c:	e59f329c 	ldr	r3, [pc, #668]	; b0c0 <CKernelOptions::CKernelOptions()+0x318>
    ae20:	ebfff779 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ae24:	e1500004 	cmp	r0, r4
    ae28:	0a00002b 	beq	aedc <CKernelOptions::CKernelOptions()+0x134>
    ae2c:	e5953008 	ldr	r3, [r5, #8]
    ae30:	e3530b02 	cmp	r3, #2048	; 0x800
    ae34:	2a000028 	bcs	aedc <CKernelOptions::CKernelOptions()+0x134>
    ae38:	e0853003 	add	r3, r5, r3
    ae3c:	e285200c 	add	r2, r5, #12
    ae40:	e5c3400c 	strb	r4, [r3, #12]
    ae44:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    ae48:	e1a00005 	mov	r0, r5
    ae4c:	ebffffb8 	bl	ad34 <CKernelOptions::GetToken()>
    ae50:	e2506000 	subs	r6, r0, #0
    ae54:	0a000020 	beq	aedc <CKernelOptions::CKernelOptions()+0x134>
    ae58:	e5d63000 	ldrb	r3, [r6]
    ae5c:	e3530000 	cmp	r3, #0
    ae60:	0a000022 	beq	aef0 <CKernelOptions::CKernelOptions()+0x148>
    ae64:	e1a04006 	mov	r4, r6
    ae68:	ea000002 	b	ae78 <CKernelOptions::CKernelOptions()+0xd0>
    ae6c:	e5f43001 	ldrb	r3, [r4, #1]!
    ae70:	e3530000 	cmp	r3, #0
    ae74:	0a00001d 	beq	aef0 <CKernelOptions::CKernelOptions()+0x148>
    ae78:	e353003d 	cmp	r3, #61	; 0x3d
    ae7c:	1afffffa 	bne	ae6c <CKernelOptions::CKernelOptions()+0xc4>
    ae80:	e3a03000 	mov	r3, #0
    ae84:	e1a00006 	mov	r0, r6
    ae88:	e5c43000 	strb	r3, [r4]
    ae8c:	e59f1230 	ldr	r1, [pc, #560]	; b0c4 <CKernelOptions::CKernelOptions()+0x31c>
    ae90:	eb001169 	bl	f43c <strcmp>
    ae94:	e3500000 	cmp	r0, #0
    ae98:	e2847001 	add	r7, r4, #1
    ae9c:	1a000032 	bne	af6c <CKernelOptions::CKernelOptions()+0x1c4>
    aea0:	e3570000 	cmp	r7, #0
    aea4:	0affffe7 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    aea8:	e1d430d1 	ldrsb	r3, [r4, #1]
    aeac:	e3530000 	cmp	r3, #0
    aeb0:	0affffe4 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    aeb4:	e1a00007 	mov	r0, r7
    aeb8:	ebffff6a 	bl	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aebc:	e59f3204 	ldr	r3, [pc, #516]	; b0c8 <CKernelOptions::CKernelOptions()+0x320>
    aec0:	e2402d0a 	sub	r2, r0, #640	; 0x280
    aec4:	e1520003 	cmp	r2, r3
    aec8:	95850810 	strls	r0, [r5, #2064]	; 0x810
    aecc:	e1a00005 	mov	r0, r5
    aed0:	ebffff97 	bl	ad34 <CKernelOptions::GetToken()>
    aed4:	e2506000 	subs	r6, r0, #0
    aed8:	1affffde 	bne	ae58 <CKernelOptions::CKernelOptions()+0xb0>
    aedc:	e28d0008 	add	r0, sp, #8
    aee0:	ebfff707 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    aee4:	e1a00005 	mov	r0, r5
    aee8:	e28dd014 	add	sp, sp, #20
    aeec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    aef0:	e1a00006 	mov	r0, r6
    aef4:	e59f11c8 	ldr	r1, [pc, #456]	; b0c4 <CKernelOptions::CKernelOptions()+0x31c>
    aef8:	eb00114f 	bl	f43c <strcmp>
    aefc:	e3500000 	cmp	r0, #0
    af00:	0affffd0 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af04:	e1a00006 	mov	r0, r6
    af08:	e59f11bc 	ldr	r1, [pc, #444]	; b0cc <CKernelOptions::CKernelOptions()+0x324>
    af0c:	eb00114a 	bl	f43c <strcmp>
    af10:	e3500000 	cmp	r0, #0
    af14:	13a07000 	movne	r7, #0
    af18:	0affffca 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af1c:	e1a00006 	mov	r0, r6
    af20:	e59f11a8 	ldr	r1, [pc, #424]	; b0d0 <CKernelOptions::CKernelOptions()+0x328>
    af24:	eb001144 	bl	f43c <strcmp>
    af28:	e2504000 	subs	r4, r0, #0
    af2c:	0a00001e 	beq	afac <CKernelOptions::CKernelOptions()+0x204>
    af30:	e1a00006 	mov	r0, r6
    af34:	e59f1198 	ldr	r1, [pc, #408]	; b0d4 <CKernelOptions::CKernelOptions()+0x32c>
    af38:	eb00113f 	bl	f43c <strcmp>
    af3c:	e3500000 	cmp	r0, #0
    af40:	1a00001f 	bne	afc4 <CKernelOptions::CKernelOptions()+0x21c>
    af44:	e3570000 	cmp	r7, #0
    af48:	0affffbe 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af4c:	e1d730d0 	ldrsb	r3, [r7]
    af50:	e3530000 	cmp	r3, #0
    af54:	0affffbb 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af58:	e1a00007 	mov	r0, r7
    af5c:	ebffff41 	bl	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af60:	e3500004 	cmp	r0, #4
    af64:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    af68:	eaffffb6 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af6c:	e1a00006 	mov	r0, r6
    af70:	e59f1154 	ldr	r1, [pc, #340]	; b0cc <CKernelOptions::CKernelOptions()+0x324>
    af74:	eb001130 	bl	f43c <strcmp>
    af78:	e3500000 	cmp	r0, #0
    af7c:	1affffe6 	bne	af1c <CKernelOptions::CKernelOptions()+0x174>
    af80:	e3570000 	cmp	r7, #0
    af84:	0affffaf 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af88:	e1d430d1 	ldrsb	r3, [r4, #1]
    af8c:	e3530000 	cmp	r3, #0
    af90:	0affffac 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    af94:	e1a00007 	mov	r0, r7
    af98:	ebffff32 	bl	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af9c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    afa0:	e3530f96 	cmp	r3, #600	; 0x258
    afa4:	95850814 	strls	r0, [r5, #2068]	; 0x814
    afa8:	eaffffa6 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    afac:	e1a01007 	mov	r1, r7
    afb0:	e1a00008 	mov	r0, r8
    afb4:	e3a02013 	mov	r2, #19
    afb8:	eb00114e 	bl	f4f8 <strncpy>
    afbc:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    afc0:	eaffffa0 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    afc4:	e1a00006 	mov	r0, r6
    afc8:	e59f1108 	ldr	r1, [pc, #264]	; b0d8 <CKernelOptions::CKernelOptions()+0x330>
    afcc:	eb00111a 	bl	f43c <strcmp>
    afd0:	e2504000 	subs	r4, r0, #0
    afd4:	1a000005 	bne	aff0 <CKernelOptions::CKernelOptions()+0x248>
    afd8:	e1a01007 	mov	r1, r7
    afdc:	e1a00009 	mov	r0, r9
    afe0:	e3a02002 	mov	r2, #2
    afe4:	eb001143 	bl	f4f8 <strncpy>
    afe8:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    afec:	eaffff95 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    aff0:	e1a00006 	mov	r0, r6
    aff4:	e59f10e0 	ldr	r1, [pc, #224]	; b0dc <CKernelOptions::CKernelOptions()+0x334>
    aff8:	eb00110f 	bl	f43c <strcmp>
    affc:	e3500000 	cmp	r0, #0
    b000:	1a00000b 	bne	b034 <CKernelOptions::CKernelOptions()+0x28c>
    b004:	e3570000 	cmp	r7, #0
    b008:	0affff8e 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b00c:	e1d730d0 	ldrsb	r3, [r7]
    b010:	e3530000 	cmp	r3, #0
    b014:	0affff8b 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b018:	e1a00007 	mov	r0, r7
    b01c:	ebffff11 	bl	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b020:	e59f30b8 	ldr	r3, [pc, #184]	; b0e0 <CKernelOptions::CKernelOptions()+0x338>
    b024:	e24020c8 	sub	r2, r0, #200	; 0xc8
    b028:	e1520003 	cmp	r2, r3
    b02c:	95850834 	strls	r0, [r5, #2100]	; 0x834
    b030:	eaffff84 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b034:	e1a00006 	mov	r0, r6
    b038:	e59f10a4 	ldr	r1, [pc, #164]	; b0e4 <CKernelOptions::CKernelOptions()+0x33c>
    b03c:	eb0010fe 	bl	f43c <strcmp>
    b040:	e3500000 	cmp	r0, #0
    b044:	1a000006 	bne	b064 <CKernelOptions::CKernelOptions()+0x2bc>
    b048:	e1a00007 	mov	r0, r7
    b04c:	e59f1094 	ldr	r1, [pc, #148]	; b0e8 <CKernelOptions::CKernelOptions()+0x340>
    b050:	eb0010f9 	bl	f43c <strcmp>
    b054:	e3500000 	cmp	r0, #0
    b058:	03a03001 	moveq	r3, #1
    b05c:	05853838 	streq	r3, [r5, #2104]	; 0x838
    b060:	eaffff78 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b064:	e1a00006 	mov	r0, r6
    b068:	e59f107c 	ldr	r1, [pc, #124]	; b0ec <CKernelOptions::CKernelOptions()+0x344>
    b06c:	eb0010f2 	bl	f43c <strcmp>
    b070:	e16f3f17 	clz	r3, r7
    b074:	e1a032a3 	lsr	r3, r3, #5
    b078:	e3500000 	cmp	r0, #0
    b07c:	01a00003 	moveq	r0, r3
    b080:	13830001 	orrne	r0, r3, #1
    b084:	e3500000 	cmp	r0, #0
    b088:	1affff6e 	bne	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b08c:	e1d730d0 	ldrsb	r3, [r7]
    b090:	e3530000 	cmp	r3, #0
    b094:	0affff6b 	beq	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b098:	e1a00007 	mov	r0, r7
    b09c:	ebfffef1 	bl	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b0a0:	e2403028 	sub	r3, r0, #40	; 0x28
    b0a4:	e3530026 	cmp	r3, #38	; 0x26
    b0a8:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b0ac:	eaffff65 	b	ae48 <CKernelOptions::CKernelOptions()+0xa0>
    b0b0:	000106dc 	.word	0x000106dc
    b0b4:	000106e4 	.word	0x000106e4
    b0b8:	00012918 	.word	0x00012918
    b0bc:	00050001 	.word	0x00050001
    b0c0:	0000080c 	.word	0x0000080c
    b0c4:	00010738 	.word	0x00010738
    b0c8:	0000053c 	.word	0x0000053c
    b0cc:	000106e8 	.word	0x000106e8
    b0d0:	000106f0 	.word	0x000106f0
    b0d4:	000106f8 	.word	0x000106f8
    b0d8:	00010704 	.word	0x00010704
    b0dc:	0001070c 	.word	0x0001070c
    b0e0:	00001e78 	.word	0x00001e78
    b0e4:	0001071c 	.word	0x0001071c
    b0e8:	00010724 	.word	0x00010724
    b0ec:	0001072c 	.word	0x0001072c

0000b0f0 <CKernelOptions::GetOptionValue(char*)>:
    b0f0:	e5d03000 	ldrb	r3, [r0]
    b0f4:	e3530000 	cmp	r3, #0
    b0f8:	1a000003 	bne	b10c <CKernelOptions::GetOptionValue(char*)+0x1c>
    b0fc:	ea000007 	b	b120 <CKernelOptions::GetOptionValue(char*)+0x30>
    b100:	e5f03001 	ldrb	r3, [r0, #1]!
    b104:	e3530000 	cmp	r3, #0
    b108:	0a000004 	beq	b120 <CKernelOptions::GetOptionValue(char*)+0x30>
    b10c:	e353003d 	cmp	r3, #61	; 0x3d
    b110:	1afffffa 	bne	b100 <CKernelOptions::GetOptionValue(char*)+0x10>
    b114:	e3a02000 	mov	r2, #0
    b118:	e2803001 	add	r3, r0, #1
    b11c:	e5c02000 	strb	r2, [r0]
    b120:	e1a00003 	mov	r0, r3
    b124:	e12fff1e 	bx	lr

0000b128 <CKernelOptions::GetDecimal(char*)>:
    b128:	e2503000 	subs	r3, r0, #0
    b12c:	0a000002 	beq	b13c <CKernelOptions::GetDecimal(char*)+0x14>
    b130:	e1d330d0 	ldrsb	r3, [r3]
    b134:	e3530000 	cmp	r3, #0
    b138:	1a000001 	bne	b144 <CKernelOptions::GetDecimal(char*)+0x1c>
    b13c:	e3e00000 	mvn	r0, #0
    b140:	e12fff1e 	bx	lr
    b144:	eafffec7 	b	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b148 <CPageTable::CPageTable()>:
    b148:	e3a01000 	mov	r1, #0
    b14c:	e3a0298e 	mov	r2, #2326528	; 0x238000
    b150:	e1a0c001 	mov	ip, r1
    b154:	e1a03002 	mov	r3, r2
    b158:	e8800006 	stm	r0, {r1, r2}
    b15c:	e92d4030 	push	{r4, r5, lr}
    b160:	e59f4078 	ldr	r4, [pc, #120]	; b1e0 <CPageTable::CPageTable()+0x98>
    b164:	e3a0e004 	mov	lr, #4
    b168:	e5d32002 	ldrb	r2, [r3, #2]
    b16c:	e5d31000 	ldrb	r1, [r3]
    b170:	e3822001 	orr	r2, r2, #1
    b174:	e20220f1 	and	r2, r2, #241	; 0xf1
    b178:	e20110e0 	and	r1, r1, #224	; 0xe0
    b17c:	e5c32002 	strb	r2, [r3, #2]
    b180:	e3811006 	orr	r1, r1, #6
    b184:	e5c31000 	strb	r1, [r3]
    b188:	e1d320b2 	ldrh	r2, [r3, #2]
    b18c:	e1d310b0 	ldrh	r1, [r3]
    b190:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
    b194:	e1a05a0c 	lsl	r5, ip, #20
    b198:	e3c220f0 	bic	r2, r2, #240	; 0xf0
    b19c:	e3c11e1e 	bic	r1, r1, #480	; 0x1e0
    b1a0:	e15c0004 	cmp	ip, r4
    b1a4:	e1822825 	orr	r2, r2, r5, lsr #16
    b1a8:	e1c310b0 	strh	r1, [r3]
    b1ac:	e1c320b2 	strh	r2, [r3, #2]
    b1b0:	85d32000 	ldrbhi	r2, [r3]
    b1b4:	e28cc001 	add	ip, ip, #1
    b1b8:	83822010 	orrhi	r2, r2, #16
    b1bc:	85c32000 	strbhi	r2, [r3]
    b1c0:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b1c4:	e5c3e001 	strb	lr, [r3, #1]
    b1c8:	e2833004 	add	r3, r3, #4
    b1cc:	1affffe4 	bne	b164 <CPageTable::CPageTable()+0x1c>
    b1d0:	e3a03000 	mov	r3, #0
    b1d4:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    b1d8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b1dc:	e8bd8030 	pop	{r4, r5, pc}
    b1e0:	000001ff 	.word	0x000001ff

0000b1e4 <CPageTable::CPageTable(unsigned int)>:
    b1e4:	e3a03001 	mov	r3, #1
    b1e8:	e92d4070 	push	{r4, r5, r6, lr}
    b1ec:	e5803000 	str	r3, [r0]
    b1f0:	e1a05000 	mov	r5, r0
    b1f4:	e1a04001 	mov	r4, r1
    b1f8:	eb000fa0 	bl	f080 <palloc>
    b1fc:	e3500000 	cmp	r0, #0
    b200:	e5850004 	str	r0, [r5, #4]
    b204:	11a03000 	movne	r3, r0
    b208:	0a000034 	beq	b2e0 <CPageTable::CPageTable(unsigned int)+0xfc>
    b20c:	e1b02a03 	lsls	r2, r3, #20
    b210:	1a00002c 	bne	b2c8 <CPageTable::CPageTable(unsigned int)+0xe4>
    b214:	e3a02000 	mov	r2, #0
    b218:	e59f60d8 	ldr	r6, [pc, #216]	; b2f8 <CPageTable::CPageTable(unsigned int)+0x114>
    b21c:	ea000009 	b	b248 <CPageTable::CPageTable(unsigned int)+0x64>
    b220:	e5d31002 	ldrb	r1, [r3, #2]
    b224:	e6ef007c 	uxtb	r0, ip
    b228:	e3c00008 	bic	r0, r0, #8
    b22c:	e3811001 	orr	r1, r1, #1
    b230:	e5c30000 	strb	r0, [r3]
    b234:	e5c31002 	strb	r1, [r3, #2]
    b238:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b23c:	e3520202 	cmp	r2, #536870912	; 0x20000000
    b240:	e2833004 	add	r3, r3, #4
    b244:	0a00001a 	beq	b2b4 <CPageTable::CPageTable(unsigned int)+0xd0>
    b248:	e3a0000e 	mov	r0, #14
    b24c:	e3a01004 	mov	r1, #4
    b250:	e1a0c822 	lsr	ip, r2, #16
    b254:	e20cc0f0 	and	ip, ip, #240	; 0xf0
    b258:	e1a0ec22 	lsr	lr, r2, #24
    b25c:	e1520006 	cmp	r2, r6
    b260:	e5c3c002 	strb	ip, [r3, #2]
    b264:	e5c30000 	strb	r0, [r3]
    b268:	e5c31001 	strb	r1, [r3, #1]
    b26c:	e5c3e003 	strb	lr, [r3, #3]
    b270:	3afffff0 	bcc	b238 <CPageTable::CPageTable(unsigned int)+0x54>
    b274:	e6efc070 	uxtb	ip, r0
    b278:	e38cc010 	orr	ip, ip, #16
    b27c:	e1540002 	cmp	r4, r2
    b280:	e5c3c000 	strb	ip, [r3]
    b284:	9affffe5 	bls	b220 <CPageTable::CPageTable(unsigned int)+0x3c>
    b288:	e3520501 	cmp	r2, #4194304	; 0x400000
    b28c:	1affffe9 	bne	b238 <CPageTable::CPageTable(unsigned int)+0x54>
    b290:	e5d31000 	ldrb	r1, [r3]
    b294:	e5d32002 	ldrb	r2, [r3, #2]
    b298:	e20110f3 	and	r1, r1, #243	; 0xf3
    b29c:	e3822001 	orr	r2, r2, #1
    b2a0:	e5c32002 	strb	r2, [r3, #2]
    b2a4:	e5c31000 	strb	r1, [r3]
    b2a8:	e3a02605 	mov	r2, #5242880	; 0x500000
    b2ac:	e2833004 	add	r3, r3, #4
    b2b0:	eaffffe4 	b	b248 <CPageTable::CPageTable(unsigned int)+0x64>
    b2b4:	e3a03000 	mov	r3, #0
    b2b8:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    b2bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b2c0:	e1a00005 	mov	r0, r5
    b2c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b2c8:	e59f002c 	ldr	r0, [pc, #44]	; b2fc <CPageTable::CPageTable(unsigned int)+0x118>
    b2cc:	e59f102c 	ldr	r1, [pc, #44]	; b300 <CPageTable::CPageTable(unsigned int)+0x11c>
    b2d0:	e3a02051 	mov	r2, #81	; 0x51
    b2d4:	eb0004e6 	bl	c674 <assertion_failed>
    b2d8:	e5953004 	ldr	r3, [r5, #4]
    b2dc:	eaffffcc 	b	b214 <CPageTable::CPageTable(unsigned int)+0x30>
    b2e0:	e59f001c 	ldr	r0, [pc, #28]	; b304 <CPageTable::CPageTable(unsigned int)+0x120>
    b2e4:	e59f1014 	ldr	r1, [pc, #20]	; b300 <CPageTable::CPageTable(unsigned int)+0x11c>
    b2e8:	e3a02050 	mov	r2, #80	; 0x50
    b2ec:	eb0004e0 	bl	c674 <assertion_failed>
    b2f0:	e5953004 	ldr	r3, [r5, #4]
    b2f4:	eaffffc4 	b	b20c <CPageTable::CPageTable(unsigned int)+0x28>
    b2f8:	000100d4 	.word	0x000100d4
    b2fc:	00010760 	.word	0x00010760
    b300:	00010750 	.word	0x00010750
    b304:	00010740 	.word	0x00010740

0000b308 <CPageTable::~CPageTable()>:
    b308:	e5903000 	ldr	r3, [r0]
    b30c:	e92d4010 	push	{r4, lr}
    b310:	e3530000 	cmp	r3, #0
    b314:	e1a04000 	mov	r4, r0
    b318:	0a000001 	beq	b324 <CPageTable::~CPageTable()+0x1c>
    b31c:	e5900004 	ldr	r0, [r0, #4]
    b320:	eb000f92 	bl	f170 <pfree>
    b324:	e1a00004 	mov	r0, r4
    b328:	e8bd8010 	pop	{r4, pc}

0000b32c <CPageTable::GetBaseAddress() const>:
    b32c:	e5900004 	ldr	r0, [r0, #4]
    b330:	e3800001 	orr	r0, r0, #1
    b334:	e12fff1e 	bx	lr

0000b338 <CScreenDevice::~CScreenDevice()>:
    b338:	e590200c 	ldr	r2, [r0, #12]
    b33c:	e92d4038 	push	{r3, r4, r5, lr}
    b340:	e59f3060 	ldr	r3, [pc, #96]	; b3a8 <CScreenDevice::~CScreenDevice()+0x70>
    b344:	e3520000 	cmp	r2, #0
    b348:	e1a04000 	mov	r4, r0
    b34c:	e5803000 	str	r3, [r0]
    b350:	0a000003 	beq	b364 <CScreenDevice::~CScreenDevice()+0x2c>
    b354:	e5900018 	ldr	r0, [r0, #24]
    b358:	e3500000 	cmp	r0, #0
    b35c:	0a000000 	beq	b364 <CScreenDevice::~CScreenDevice()+0x2c>
    b360:	ebfffaba 	bl	9e50 <operator delete[](void*)>
    b364:	e3a03000 	mov	r3, #0
    b368:	e5945010 	ldr	r5, [r4, #16]
    b36c:	e5843018 	str	r3, [r4, #24]
    b370:	e1550003 	cmp	r5, r3
    b374:	0a000003 	beq	b388 <CScreenDevice::~CScreenDevice()+0x50>
    b378:	e1a00005 	mov	r0, r5
    b37c:	eb0011be 	bl	fa7c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b380:	e1a00005 	mov	r0, r5
    b384:	ebfffab0 	bl	9e4c <operator delete(void*)>
    b388:	e3a03000 	mov	r3, #0
    b38c:	e2840014 	add	r0, r4, #20
    b390:	e5843010 	str	r3, [r4, #16]
    b394:	eb0004db 	bl	c708 <CCharGenerator::~CCharGenerator()>
    b398:	e1a00004 	mov	r0, r4
    b39c:	eb001236 	bl	fc7c <CDevice::~CDevice()>
    b3a0:	e1a00004 	mov	r0, r4
    b3a4:	e8bd8038 	pop	{r3, r4, r5, pc}
    b3a8:	00010788 	.word	0x00010788

0000b3ac <CScreenDevice::~CScreenDevice()>:
    b3ac:	e92d4010 	push	{r4, lr}
    b3b0:	e1a04000 	mov	r4, r0
    b3b4:	ebffffdf 	bl	b338 <CScreenDevice::~CScreenDevice()>
    b3b8:	e1a00004 	mov	r0, r4
    b3bc:	ebfffaa2 	bl	9e4c <operator delete(void*)>
    b3c0:	e1a00004 	mov	r0, r4
    b3c4:	e8bd8010 	pop	{r4, pc}

0000b3c8 <CScreenDevice::InvertCursor() [clone .part.6]>:
    b3c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3cc:	e2806014 	add	r6, r0, #20
    b3d0:	e1a05000 	mov	r5, r0
    b3d4:	e1a00006 	mov	r0, r6
    b3d8:	eb0004cf 	bl	c71c <CCharGenerator::GetUnderline() const>
    b3dc:	e1a07000 	mov	r7, r0
    b3e0:	e1a00006 	mov	r0, r6
    b3e4:	eb0004ca 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b3e8:	e1570000 	cmp	r7, r0
    b3ec:	e3a08000 	mov	r8, #0
    b3f0:	2a00001d 	bcs	b46c <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    b3f4:	e3a04000 	mov	r4, #0
    b3f8:	ea000012 	b	b448 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    b3fc:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    b400:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    b404:	e0843003 	add	r3, r4, r3
    b408:	e1530002 	cmp	r3, r2
    b40c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b410:	2a00000b 	bcs	b444 <CScreenDevice::InvertCursor() [clone .part.6]+0x7c>
    b414:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    b418:	e0872002 	add	r2, r7, r2
    b41c:	e1520001 	cmp	r2, r1
    b420:	2a000007 	bcs	b444 <CScreenDevice::InvertCursor() [clone .part.6]+0x7c>
    b424:	e5950020 	ldr	r0, [r5, #32]
    b428:	e5951018 	ldr	r1, [r5, #24]
    b42c:	e0223290 	mla	r2, r0, r2, r3
    b430:	e1a02082 	lsl	r2, r2, #1
    b434:	e19130b2 	ldrh	r3, [r1, r2]
    b438:	e3530000 	cmp	r3, #0
    b43c:	0a00000b 	beq	b470 <CScreenDevice::InvertCursor() [clone .part.6]+0xa8>
    b440:	e18180b2 	strh	r8, [r1, r2]
    b444:	e2844001 	add	r4, r4, #1
    b448:	e1a00006 	mov	r0, r6
    b44c:	eb0004ae 	bl	c70c <CCharGenerator::GetCharWidth() const>
    b450:	e1540000 	cmp	r4, r0
    b454:	3affffe8 	bcc	b3fc <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    b458:	e1a00006 	mov	r0, r6
    b45c:	eb0004ac 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b460:	e2877001 	add	r7, r7, #1
    b464:	e1570000 	cmp	r7, r0
    b468:	3affffe1 	bcc	b3f4 <CScreenDevice::InvertCursor() [clone .part.6]+0x2c>
    b46c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b470:	e1d534b8 	ldrh	r3, [r5, #72]	; 0x48
    b474:	e18130b2 	strh	r3, [r1, r2]
    b478:	eafffff1 	b	b444 <CScreenDevice::InvertCursor() [clone .part.6]+0x7c>

0000b47c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b47c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b480:	e1a04000 	mov	r4, r0
    b484:	e3a05000 	mov	r5, #0
    b488:	e1a07002 	mov	r7, r2
    b48c:	e1a06003 	mov	r6, r3
    b490:	e1a08001 	mov	r8, r1
    b494:	eb001205 	bl	fcb0 <CDevice::CDevice()>
    b498:	e59f0050 	ldr	r0, [pc, #80]	; b4f0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    b49c:	e5848004 	str	r8, [r4, #4]
    b4a0:	e5840000 	str	r0, [r4]
    b4a4:	e5847008 	str	r7, [r4, #8]
    b4a8:	e584600c 	str	r6, [r4, #12]
    b4ac:	e5845010 	str	r5, [r4, #16]
    b4b0:	e2840014 	add	r0, r4, #20
    b4b4:	eb000490 	bl	c6fc <CCharGenerator::CCharGenerator()>
    b4b8:	e3a03001 	mov	r3, #1
    b4bc:	e3e02020 	mvn	r2, #32
    b4c0:	e5845018 	str	r5, [r4, #24]
    b4c4:	e5845030 	str	r5, [r4, #48]	; 0x30
    b4c8:	e5845034 	str	r5, [r4, #52]	; 0x34
    b4cc:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b4d0:	e5845040 	str	r5, [r4, #64]	; 0x40
    b4d4:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b4d8:	e5845058 	str	r5, [r4, #88]	; 0x58
    b4dc:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    b4e0:	e5843044 	str	r3, [r4, #68]	; 0x44
    b4e4:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b4e8:	e1a00004 	mov	r0, r4
    b4ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b4f0:	00010788 	.word	0x00010788

0000b4f4 <CScreenDevice::Clear()>:
    b4f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b4f8:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b4fc:	e3550000 	cmp	r5, #0
    b500:	0a00001a 	beq	b570 <CScreenDevice::Clear()+0x7c>
    b504:	e3a04000 	mov	r4, #0
    b508:	e5906018 	ldr	r6, [r0, #24]
    b50c:	e1a0e004 	mov	lr, r4
    b510:	e1a01006 	mov	r1, r6
    b514:	e5907020 	ldr	r7, [r0, #32]
    b518:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b51c:	e1a0c087 	lsl	ip, r7, #1
    b520:	e3500000 	cmp	r0, #0
    b524:	13a03000 	movne	r3, #0
    b528:	11a02003 	movne	r2, r3
    b52c:	0a000004 	beq	b544 <CScreenDevice::Clear()+0x50>
    b530:	e2822001 	add	r2, r2, #1
    b534:	e1520000 	cmp	r2, r0
    b538:	e181e0b3 	strh	lr, [r1, r3]
    b53c:	e083300c 	add	r3, r3, ip
    b540:	1afffffa 	bne	b530 <CScreenDevice::Clear()+0x3c>
    b544:	e2844001 	add	r4, r4, #1
    b548:	e1540005 	cmp	r4, r5
    b54c:	e2811002 	add	r1, r1, #2
    b550:	1afffff2 	bne	b520 <CScreenDevice::Clear()+0x2c>
    b554:	e1a03006 	mov	r3, r6
    b558:	e3a0201f 	mov	r2, #31
    b55c:	e2877001 	add	r7, r7, #1
    b560:	e1a07087 	lsl	r7, r7, #1
    b564:	e1a320b7 	strh	r2, [r3, r7]!
    b568:	e1c320b2 	strh	r2, [r3, #2]
    b56c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b570:	e5906018 	ldr	r6, [r0, #24]
    b574:	e5907020 	ldr	r7, [r0, #32]
    b578:	eafffff5 	b	b554 <CScreenDevice::Clear()+0x60>

0000b57c <CScreenDevice::GetWidth() const>:
    b57c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b580:	e12fff1e 	bx	lr

0000b584 <CScreenDevice::GetHeight() const>:
    b584:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b588:	e12fff1e 	bx	lr

0000b58c <CScreenDevice::GetColumns() const>:
    b58c:	e92d4010 	push	{r4, lr}
    b590:	e2800014 	add	r0, r0, #20
    b594:	e5904010 	ldr	r4, [r0, #16]
    b598:	eb00045b 	bl	c70c <CCharGenerator::GetCharWidth() const>
    b59c:	e1a01000 	mov	r1, r0
    b5a0:	e1a00004 	mov	r0, r4
    b5a4:	eb000f6e 	bl	f364 <__aeabi_uidiv>
    b5a8:	e8bd8010 	pop	{r4, pc}

0000b5ac <CScreenDevice::GetRows() const>:
    b5ac:	e92d4010 	push	{r4, lr}
    b5b0:	e2800014 	add	r0, r0, #20
    b5b4:	e5904018 	ldr	r4, [r0, #24]
    b5b8:	eb000455 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b5bc:	e1a01000 	mov	r1, r0
    b5c0:	e1a00004 	mov	r0, r4
    b5c4:	eb000f66 	bl	f364 <__aeabi_uidiv>
    b5c8:	e8bd8010 	pop	{r4, pc}

0000b5cc <CScreenDevice::GetStatus()>:
    b5cc:	e5912018 	ldr	r2, [r1, #24]
    b5d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5d4:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    b5d8:	e591b01c 	ldr	fp, [r1, #28]
    b5dc:	e591a030 	ldr	sl, [r1, #48]	; 0x30
    b5e0:	e5919034 	ldr	r9, [r1, #52]	; 0x34
    b5e4:	e5918038 	ldr	r8, [r1, #56]	; 0x38
    b5e8:	e591703c 	ldr	r7, [r1, #60]	; 0x3c
    b5ec:	e5916040 	ldr	r6, [r1, #64]	; 0x40
    b5f0:	e5915044 	ldr	r5, [r1, #68]	; 0x44
    b5f4:	e1d144b8 	ldrh	r4, [r1, #72]	; 0x48
    b5f8:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    b5fc:	e5802000 	str	r2, [r0]
    b600:	e5912054 	ldr	r2, [r1, #84]	; 0x54
    b604:	e5911058 	ldr	r1, [r1, #88]	; 0x58
    b608:	e580b004 	str	fp, [r0, #4]
    b60c:	e580a008 	str	sl, [r0, #8]
    b610:	e580900c 	str	r9, [r0, #12]
    b614:	e5808010 	str	r8, [r0, #16]
    b618:	e5807014 	str	r7, [r0, #20]
    b61c:	e5806018 	str	r6, [r0, #24]
    b620:	e580501c 	str	r5, [r0, #28]
    b624:	e1c042b0 	strh	r4, [r0, #32]
    b628:	e580e024 	str	lr, [r0, #36]	; 0x24
    b62c:	e580c028 	str	ip, [r0, #40]	; 0x28
    b630:	e580202c 	str	r2, [r0, #44]	; 0x2c
    b634:	e5801030 	str	r1, [r0, #48]	; 0x30
    b638:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b63c <CScreenDevice::SetStatus(TScreenStatus)>:
    b63c:	e24dd010 	sub	sp, sp, #16
    b640:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    b644:	e28dc024 	add	ip, sp, #36	; 0x24
    b648:	e88c000e 	stm	ip, {r1, r2, r3}
    b64c:	e590201c 	ldr	r2, [r0, #28]
    b650:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b654:	e1520003 	cmp	r2, r3
    b658:	0a000003 	beq	b66c <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    b65c:	e3a00000 	mov	r0, #0
    b660:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    b664:	e28dd010 	add	sp, sp, #16
    b668:	e12fff1e 	bx	lr
    b66c:	e5901020 	ldr	r1, [r0, #32]
    b670:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b674:	e1510003 	cmp	r1, r3
    b678:	1afffff7 	bne	b65c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b67c:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    b680:	e1a04000 	mov	r4, r0
    b684:	e3530000 	cmp	r3, #0
    b688:	1a000022 	bne	b718 <CScreenDevice::SetStatus(TScreenStatus)+0xdc>
    b68c:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b690:	e3530000 	cmp	r3, #0
    b694:	1afffff0 	bne	b65c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b698:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
    b69c:	e3530000 	cmp	r3, #0
    b6a0:	1affffed 	bne	b65c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b6a4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    b6a8:	e5940018 	ldr	r0, [r4, #24]
    b6ac:	ebfffd56 	bl	ac0c <memcpy>
    b6b0:	e594905c 	ldr	r9, [r4, #92]	; 0x5c
    b6b4:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
    b6b8:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
    b6bc:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
    b6c0:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
    b6c4:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
    b6c8:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
    b6cc:	e1dd04b4 	ldrh	r0, [sp, #68]	; 0x44
    b6d0:	e28d1048 	add	r1, sp, #72	; 0x48
    b6d4:	e3590000 	cmp	r9, #0
    b6d8:	e891000e 	ldm	r1, {r1, r2, r3}
    b6dc:	e5848030 	str	r8, [r4, #48]	; 0x30
    b6e0:	e5847034 	str	r7, [r4, #52]	; 0x34
    b6e4:	e5846038 	str	r6, [r4, #56]	; 0x38
    b6e8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b6ec:	e584e040 	str	lr, [r4, #64]	; 0x40
    b6f0:	e584c044 	str	ip, [r4, #68]	; 0x44
    b6f4:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    b6f8:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b6fc:	e5842050 	str	r2, [r4, #80]	; 0x50
    b700:	e5843054 	str	r3, [r4, #84]	; 0x54
    b704:	1a000011 	bne	b750 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    b708:	e3a03000 	mov	r3, #0
    b70c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b710:	e3a00001 	mov	r0, #1
    b714:	eaffffd1 	b	b660 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b718:	ebfff9cd 	bl	9e54 <EnterCritical>
    b71c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b720:	e3530000 	cmp	r3, #0
    b724:	0a000004 	beq	b73c <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    b728:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b72c:	e3530000 	cmp	r3, #0
    b730:	0affffc9 	beq	b65c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b734:	ebfff9d5 	bl	9e90 <LeaveCritical>
    b738:	eaffffc7 	b	b65c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b73c:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
    b740:	e3530000 	cmp	r3, #0
    b744:	0594201c 	ldreq	r2, [r4, #28]
    b748:	1afffff6 	bne	b728 <CScreenDevice::SetStatus(TScreenStatus)+0xec>
    b74c:	eaffffd4 	b	b6a4 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b750:	ebfff9ce 	bl	9e90 <LeaveCritical>
    b754:	eaffffeb 	b	b708 <CScreenDevice::SetStatus(TScreenStatus)+0xcc>

0000b758 <CScreenDevice::CarriageReturn()>:
    b758:	e3a03000 	mov	r3, #0
    b75c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b760:	e12fff1e 	bx	lr

0000b764 <CScreenDevice::CursorHome()>:
    b764:	e3a02000 	mov	r2, #0
    b768:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b76c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b770:	e5803040 	str	r3, [r0, #64]	; 0x40
    b774:	e12fff1e 	bx	lr

0000b778 <CScreenDevice::CursorLeft()>:
    b778:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b77c:	e92d4070 	push	{r4, r5, r6, lr}
    b780:	e3530000 	cmp	r3, #0
    b784:	e1a04000 	mov	r4, r0
    b788:	1a00000f 	bne	b7cc <CScreenDevice::CursorLeft()+0x54>
    b78c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b790:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b794:	e1520003 	cmp	r2, r3
    b798:	98bd8070 	popls	{r4, r5, r6, pc}
    b79c:	e2806014 	add	r6, r0, #20
    b7a0:	e1a00006 	mov	r0, r6
    b7a4:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    b7a8:	eb0003d7 	bl	c70c <CCharGenerator::GetCharWidth() const>
    b7ac:	e0600005 	rsb	r0, r0, r5
    b7b0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b7b4:	e1a00006 	mov	r0, r6
    b7b8:	eb0003d5 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b7bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b7c0:	e0600003 	rsb	r0, r0, r3
    b7c4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b7c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b7cc:	e2800014 	add	r0, r0, #20
    b7d0:	eb0003cd 	bl	c70c <CCharGenerator::GetCharWidth() const>
    b7d4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b7d8:	e0600003 	rsb	r0, r0, r3
    b7dc:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b7e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b7e4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b7e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    b7e8:	e2807014 	add	r7, r0, #20
    b7ec:	e1a04002 	mov	r4, r2
    b7f0:	e1a06000 	mov	r6, r0
    b7f4:	e1a00007 	mov	r0, r7
    b7f8:	e1a05001 	mov	r5, r1
    b7fc:	eb0003c2 	bl	c70c <CCharGenerator::GetCharWidth() const>
    b800:	e2444001 	sub	r4, r4, #1
    b804:	e0040094 	mul	r4, r4, r0
    b808:	e1a00007 	mov	r0, r7
    b80c:	eb0003c0 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b810:	e5963024 	ldr	r3, [r6, #36]	; 0x24
    b814:	e1540003 	cmp	r4, r3
    b818:	28bd80f8 	popcs	{r3, r4, r5, r6, r7, pc}
    b81c:	e2455001 	sub	r5, r5, #1
    b820:	e0010095 	mul	r1, r5, r0
    b824:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    b828:	e1510003 	cmp	r1, r3
    b82c:	38bd80f8 	popcc	{r3, r4, r5, r6, r7, pc}
    b830:	e5963038 	ldr	r3, [r6, #56]	; 0x38
    b834:	e1510003 	cmp	r1, r3
    b838:	3586403c 	strcc	r4, [r6, #60]	; 0x3c
    b83c:	35861040 	strcc	r1, [r6, #64]	; 0x40
    b840:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000b844 <CScreenDevice::CursorUp()>:
    b844:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b848:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b84c:	e1520003 	cmp	r2, r3
    b850:	912fff1e 	bxls	lr
    b854:	e92d4010 	push	{r4, lr}
    b858:	e1a04000 	mov	r4, r0
    b85c:	e2800014 	add	r0, r0, #20
    b860:	eb0003ab 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b864:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b868:	e0600003 	rsb	r0, r0, r3
    b86c:	e5840040 	str	r0, [r4, #64]	; 0x40
    b870:	e8bd8010 	pop	{r4, pc}

0000b874 <CScreenDevice::DeleteChars(unsigned int)>:
    b874:	e12fff1e 	bx	lr

0000b878 <CScreenDevice::DeleteLines(unsigned int)>:
    b878:	e12fff1e 	bx	lr

0000b87c <CScreenDevice::InsertLines(unsigned int)>:
    b87c:	e12fff1e 	bx	lr

0000b880 <CScreenDevice::InsertMode(int)>:
    b880:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b884:	e12fff1e 	bx	lr

0000b888 <CScreenDevice::ReverseScroll()>:
    b888:	e12fff1e 	bx	lr

0000b88c <CScreenDevice::SetCursorMode(int)>:
    b88c:	e5801044 	str	r1, [r0, #68]	; 0x44
    b890:	e12fff1e 	bx	lr

0000b894 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b894:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    b898:	e2807014 	add	r7, r0, #20
    b89c:	e1a06000 	mov	r6, r0
    b8a0:	e1a04001 	mov	r4, r1
    b8a4:	e1a00007 	mov	r0, r7
    b8a8:	e1a05002 	mov	r5, r2
    b8ac:	eb000398 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b8b0:	e2444001 	sub	r4, r4, #1
    b8b4:	e0040094 	mul	r4, r4, r0
    b8b8:	e1a00007 	mov	r0, r7
    b8bc:	eb000394 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b8c0:	e0000095 	mul	r0, r5, r0
    b8c4:	e596102c 	ldr	r1, [r6, #44]	; 0x2c
    b8c8:	e3500000 	cmp	r0, #0
    b8cc:	11540001 	cmpne	r4, r1
    b8d0:	33a03001 	movcc	r3, #1
    b8d4:	23a03000 	movcs	r3, #0
    b8d8:	e1500001 	cmp	r0, r1
    b8dc:	83a03000 	movhi	r3, #0
    b8e0:	92033001 	andls	r3, r3, #1
    b8e4:	e1540000 	cmp	r4, r0
    b8e8:	23a03000 	movcs	r3, #0
    b8ec:	32033001 	andcc	r3, r3, #1
    b8f0:	e3530000 	cmp	r3, #0
    b8f4:	11a01004 	movne	r1, r4
    b8f8:	e3a03000 	mov	r3, #0
    b8fc:	05961034 	ldreq	r1, [r6, #52]	; 0x34
    b900:	15864034 	strne	r4, [r6, #52]	; 0x34
    b904:	15860038 	strne	r0, [r6, #56]	; 0x38
    b908:	e5861040 	str	r1, [r6, #64]	; 0x40
    b90c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b910:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000b914 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b914:	e351001b 	cmp	r1, #27
    b918:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b91c:	ea00001d 	b	b998 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b920:	0000b9a8 	.word	0x0000b9a8
    b924:	0000b99c 	.word	0x0000b99c
    b928:	0000b990 	.word	0x0000b990
    b92c:	0000b998 	.word	0x0000b998
    b930:	0000b998 	.word	0x0000b998
    b934:	0000b998 	.word	0x0000b998
    b938:	0000b998 	.word	0x0000b998
    b93c:	0000b998 	.word	0x0000b998
    b940:	0000b998 	.word	0x0000b998
    b944:	0000b998 	.word	0x0000b998
    b948:	0000b998 	.word	0x0000b998
    b94c:	0000b998 	.word	0x0000b998
    b950:	0000b998 	.word	0x0000b998
    b954:	0000b998 	.word	0x0000b998
    b958:	0000b998 	.word	0x0000b998
    b95c:	0000b998 	.word	0x0000b998
    b960:	0000b998 	.word	0x0000b998
    b964:	0000b998 	.word	0x0000b998
    b968:	0000b998 	.word	0x0000b998
    b96c:	0000b998 	.word	0x0000b998
    b970:	0000b998 	.word	0x0000b998
    b974:	0000b998 	.word	0x0000b998
    b978:	0000b998 	.word	0x0000b998
    b97c:	0000b998 	.word	0x0000b998
    b980:	0000b998 	.word	0x0000b998
    b984:	0000b998 	.word	0x0000b998
    b988:	0000b998 	.word	0x0000b998
    b98c:	0000b9a8 	.word	0x0000b9a8
    b990:	e3a0301f 	mov	r3, #31
    b994:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b998:	e12fff1e 	bx	lr
    b99c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    b9a0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b9a4:	e12fff1e 	bx	lr
    b9a8:	e3e03020 	mvn	r3, #32
    b9ac:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b9b0:	e12fff1e 	bx	lr

0000b9b4 <CScreenDevice::Scroll()>:
    b9b4:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    b9b8:	e1a07000 	mov	r7, r0
    b9bc:	e2800014 	add	r0, r0, #20
    b9c0:	eb000353 	bl	c714 <CCharGenerator::GetCharHeight() const>
    b9c4:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    b9c8:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    b9cc:	e5975020 	ldr	r5, [r7, #32]
    b9d0:	e0634004 	rsb	r4, r3, r4
    b9d4:	e1a02085 	lsl	r2, r5, #1
    b9d8:	e0604004 	rsb	r4, r0, r4
    b9dc:	e0040492 	mul	r4, r2, r4
    b9e0:	e0050395 	mul	r5, r5, r3
    b9e4:	e5978018 	ldr	r8, [r7, #24]
    b9e8:	e3540000 	cmp	r4, #0
    b9ec:	e1a06000 	mov	r6, r0
    b9f0:	e0885085 	add	r5, r8, r5, lsl #1
    b9f4:	1a000007 	bne	ba18 <CScreenDevice::Scroll()+0x64>
    b9f8:	e0020296 	mul	r2, r6, r2
    b9fc:	e1b02122 	lsrs	r2, r2, #2
    ba00:	08bd83f8 	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    ba04:	e1a00005 	mov	r0, r5
    ba08:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    ba0c:	e1a02102 	lsl	r2, r2, #2
    ba10:	e3a01000 	mov	r1, #0
    ba14:	ea000e5e 	b	f394 <memset>
    ba18:	e0803003 	add	r3, r0, r3
    ba1c:	e0288392 	mla	r8, r2, r3, r8
    ba20:	e3c4900f 	bic	r9, r4, #15
    ba24:	e1a01008 	mov	r1, r8
    ba28:	e1a02009 	mov	r2, r9
    ba2c:	e1a00005 	mov	r0, r5
    ba30:	ebfffc75 	bl	ac0c <memcpy>
    ba34:	e204200e 	and	r2, r4, #14
    ba38:	e0850009 	add	r0, r5, r9
    ba3c:	e0881009 	add	r1, r8, r9
    ba40:	ebfffc71 	bl	ac0c <memcpy>
    ba44:	e5972020 	ldr	r2, [r7, #32]
    ba48:	e3c44003 	bic	r4, r4, #3
    ba4c:	e1a02082 	lsl	r2, r2, #1
    ba50:	e0855004 	add	r5, r5, r4
    ba54:	eaffffe7 	b	b9f8 <CScreenDevice::Scroll()+0x44>

0000ba58 <CScreenDevice::CursorDown()>:
    ba58:	e92d4038 	push	{r3, r4, r5, lr}
    ba5c:	e1a04000 	mov	r4, r0
    ba60:	e2805014 	add	r5, r0, #20
    ba64:	e1a00005 	mov	r0, r5
    ba68:	eb000329 	bl	c714 <CCharGenerator::GetCharHeight() const>
    ba6c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ba70:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    ba74:	e0800003 	add	r0, r0, r3
    ba78:	e1500002 	cmp	r0, r2
    ba7c:	e5840040 	str	r0, [r4, #64]	; 0x40
    ba80:	38bd8038 	popcc	{r3, r4, r5, pc}
    ba84:	e1a00004 	mov	r0, r4
    ba88:	ebffffc9 	bl	b9b4 <CScreenDevice::Scroll()>
    ba8c:	e1a00005 	mov	r0, r5
    ba90:	eb00031f 	bl	c714 <CCharGenerator::GetCharHeight() const>
    ba94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ba98:	e0600003 	rsb	r0, r0, r3
    ba9c:	e5840040 	str	r0, [r4, #64]	; 0x40
    baa0:	e8bd8038 	pop	{r3, r4, r5, pc}

0000baa4 <CScreenDevice::NewLine()>:
    baa4:	e3a02000 	mov	r2, #0
    baa8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    baac:	eaffffe9 	b	ba58 <CScreenDevice::CursorDown()>

0000bab0 <CScreenDevice::CursorRight()>:
    bab0:	e92d4010 	push	{r4, lr}
    bab4:	e1a04000 	mov	r4, r0
    bab8:	e2800014 	add	r0, r0, #20
    babc:	eb000312 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bac0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bac4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bac8:	e0800003 	add	r0, r0, r3
    bacc:	e1500002 	cmp	r0, r2
    bad0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bad4:	38bd8010 	popcc	{r4, pc}
    bad8:	e3a03000 	mov	r3, #0
    badc:	e1a00004 	mov	r0, r4
    bae0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bae4:	e8bd4010 	pop	{r4, lr}
    bae8:	eaffffda 	b	ba58 <CScreenDevice::CursorDown()>

0000baec <CScreenDevice::Tabulator()>:
    baec:	e92d4038 	push	{r3, r4, r5, lr}
    baf0:	e1a05000 	mov	r5, r0
    baf4:	e2800014 	add	r0, r0, #20
    baf8:	eb000303 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bafc:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    bb00:	e1a04180 	lsl	r4, r0, #3
    bb04:	e0840003 	add	r0, r4, r3
    bb08:	e1a01004 	mov	r1, r4
    bb0c:	eb000e14 	bl	f364 <__aeabi_uidiv>
    bb10:	e0000094 	mul	r0, r4, r0
    bb14:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bb18:	e585003c 	str	r0, [r5, #60]	; 0x3c
    bb1c:	e1500003 	cmp	r0, r3
    bb20:	38bd8038 	popcc	{r3, r4, r5, pc}
    bb24:	e3a03000 	mov	r3, #0
    bb28:	e1a00005 	mov	r0, r5
    bb2c:	e585303c 	str	r3, [r5, #60]	; 0x3c
    bb30:	e8bd4038 	pop	{r3, r4, r5, lr}
    bb34:	eaffffc7 	b	ba58 <CScreenDevice::CursorDown()>

0000bb38 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bb38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb3c:	e2805014 	add	r5, r0, #20
    bb40:	e24dd00c 	sub	sp, sp, #12
    bb44:	e1a06000 	mov	r6, r0
    bb48:	e1a00005 	mov	r0, r5
    bb4c:	e1a0a001 	mov	sl, r1
    bb50:	e1a08002 	mov	r8, r2
    bb54:	e58d3004 	str	r3, [sp, #4]
    bb58:	e1dd93b0 	ldrh	r9, [sp, #48]	; 0x30
    bb5c:	e3a07000 	mov	r7, #0
    bb60:	eb0002eb 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bb64:	e1570000 	cmp	r7, r0
    bb68:	2a000025 	bcs	bc04 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    bb6c:	e59d3004 	ldr	r3, [sp, #4]
    bb70:	e3a04000 	mov	r4, #0
    bb74:	e0873003 	add	r3, r7, r3
    bb78:	e58d3000 	str	r3, [sp]
    bb7c:	ea000000 	b	bb84 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
    bb80:	e2844001 	add	r4, r4, #1
    bb84:	e1a00005 	mov	r0, r5
    bb88:	eb0002df 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bb8c:	e1540000 	cmp	r4, r0
    bb90:	e084b008 	add	fp, r4, r8
    bb94:	2a000015 	bcs	bbf0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    bb98:	e1a03007 	mov	r3, r7
    bb9c:	e1a00005 	mov	r0, r5
    bba0:	e1a0100a 	mov	r1, sl
    bba4:	e1a02004 	mov	r2, r4
    bba8:	eb0002dd 	bl	c724 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bbac:	e5963024 	ldr	r3, [r6, #36]	; 0x24
    bbb0:	e3500000 	cmp	r0, #0
    bbb4:	11a00009 	movne	r0, r9
    bbb8:	03a00000 	moveq	r0, #0
    bbbc:	e15b0003 	cmp	fp, r3
    bbc0:	2affffee 	bcs	bb80 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    bbc4:	e5963028 	ldr	r3, [r6, #40]	; 0x28
    bbc8:	e59d2000 	ldr	r2, [sp]
    bbcc:	e1520003 	cmp	r2, r3
    bbd0:	2affffea 	bcs	bb80 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    bbd4:	e5963020 	ldr	r3, [r6, #32]
    bbd8:	e59d1000 	ldr	r1, [sp]
    bbdc:	e5962018 	ldr	r2, [r6, #24]
    bbe0:	e02cb193 	mla	ip, r3, r1, fp
    bbe4:	e1a0c08c 	lsl	ip, ip, #1
    bbe8:	e18200bc 	strh	r0, [r2, ip]
    bbec:	eaffffe3 	b	bb80 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    bbf0:	e1a00005 	mov	r0, r5
    bbf4:	eb0002c6 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bbf8:	e2877001 	add	r7, r7, #1
    bbfc:	e1570000 	cmp	r7, r0
    bc00:	3affffd9 	bcc	bb6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    bc04:	e28dd00c 	add	sp, sp, #12
    bc08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc0c <CScreenDevice::DisplayChar(char)>:
    bc0c:	e6ef3071 	uxtb	r3, r1
    bc10:	e353001f 	cmp	r3, #31
    bc14:	912fff1e 	bxls	lr
    bc18:	e92d4010 	push	{r4, lr}
    bc1c:	e1a04000 	mov	r4, r0
    bc20:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    bc24:	e24dd008 	sub	sp, sp, #8
    bc28:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    bc2c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bc30:	e58dc000 	str	ip, [sp]
    bc34:	ebffffbf 	bl	bb38 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    bc38:	e1a00004 	mov	r0, r4
    bc3c:	e28dd008 	add	sp, sp, #8
    bc40:	e8bd4010 	pop	{r4, lr}
    bc44:	eaffff99 	b	bab0 <CScreenDevice::CursorRight()>

0000bc48 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bc48:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc4c:	e2805014 	add	r5, r0, #20
    bc50:	e1a0b000 	mov	fp, r0
    bc54:	e1a00005 	mov	r0, r5
    bc58:	e3a08000 	mov	r8, #0
    bc5c:	e1a06001 	mov	r6, r1
    bc60:	e1a0a002 	mov	sl, r2
    bc64:	eb0002aa 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bc68:	e1580000 	cmp	r8, r0
    bc6c:	e1a09008 	mov	r9, r8
    bc70:	2a000018 	bcs	bcd8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x90>
    bc74:	e3a04000 	mov	r4, #0
    bc78:	e088700a 	add	r7, r8, sl
    bc7c:	e1a00005 	mov	r0, r5
    bc80:	eb0002a1 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bc84:	e1540000 	cmp	r4, r0
    bc88:	e0843006 	add	r3, r4, r6
    bc8c:	2a00000c 	bcs	bcc4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    bc90:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    bc94:	e2844001 	add	r4, r4, #1
    bc98:	e1530002 	cmp	r3, r2
    bc9c:	2afffff6 	bcs	bc7c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bca0:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    bca4:	e1570002 	cmp	r7, r2
    bca8:	2afffff3 	bcs	bc7c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bcac:	e59b2020 	ldr	r2, [fp, #32]
    bcb0:	e59b1018 	ldr	r1, [fp, #24]
    bcb4:	e0233792 	mla	r3, r2, r7, r3
    bcb8:	e1a03083 	lsl	r3, r3, #1
    bcbc:	e18190b3 	strh	r9, [r1, r3]
    bcc0:	eaffffed 	b	bc7c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bcc4:	e1a00005 	mov	r0, r5
    bcc8:	eb000291 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bccc:	e2888001 	add	r8, r8, #1
    bcd0:	e1580000 	cmp	r8, r0
    bcd4:	3affffe6 	bcc	bc74 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x2c>
    bcd8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bcdc <CScreenDevice::ClearLineEnd()>:
    bcdc:	e92d4070 	push	{r4, r5, r6, lr}
    bce0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bce4:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bce8:	e1540003 	cmp	r4, r3
    bcec:	28bd8070 	popcs	{r4, r5, r6, pc}
    bcf0:	e1a05000 	mov	r5, r0
    bcf4:	e2806014 	add	r6, r0, #20
    bcf8:	e1a01004 	mov	r1, r4
    bcfc:	e1a00005 	mov	r0, r5
    bd00:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bd04:	ebffffcf 	bl	bc48 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bd08:	e1a00006 	mov	r0, r6
    bd0c:	eb00027e 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bd10:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bd14:	e0844000 	add	r4, r4, r0
    bd18:	e1530004 	cmp	r3, r4
    bd1c:	8afffff5 	bhi	bcf8 <CScreenDevice::ClearLineEnd()+0x1c>
    bd20:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd24 <CScreenDevice::ClearDisplayEnd()>:
    bd24:	e92d4038 	push	{r3, r4, r5, lr}
    bd28:	e1a04000 	mov	r4, r0
    bd2c:	ebffffea 	bl	bcdc <CScreenDevice::ClearLineEnd()>
    bd30:	e2840014 	add	r0, r4, #20
    bd34:	e5945040 	ldr	r5, [r4, #64]	; 0x40
    bd38:	eb000275 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bd3c:	e5943020 	ldr	r3, [r4, #32]
    bd40:	e0800005 	add	r0, r0, r5
    bd44:	e0000093 	mul	r0, r3, r0
    bd48:	e594201c 	ldr	r2, [r4, #28]
    bd4c:	e5943018 	ldr	r3, [r4, #24]
    bd50:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    bd54:	08bd8038 	popeq	{r3, r4, r5, pc}
    bd58:	e0830080 	add	r0, r3, r0, lsl #1
    bd5c:	e1a02082 	lsl	r2, r2, #1
    bd60:	e3a01000 	mov	r1, #0
    bd64:	e8bd4038 	pop	{r3, r4, r5, lr}
    bd68:	ea000d89 	b	f394 <memset>

0000bd6c <CScreenDevice::Initialize()>:
    bd6c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bd70:	e590500c 	ldr	r5, [r0, #12]
    bd74:	e24dd00c 	sub	sp, sp, #12
    bd78:	e3550000 	cmp	r5, #0
    bd7c:	e1a04000 	mov	r4, r0
    bd80:	0a00002a 	beq	be30 <CScreenDevice::Initialize()+0xc4>
    bd84:	e5903004 	ldr	r3, [r0, #4]
    bd88:	e5902008 	ldr	r2, [r0, #8]
    bd8c:	e5803024 	str	r3, [r0, #36]	; 0x24
    bd90:	e0000293 	mul	r0, r3, r2
    bd94:	e35005fe 	cmp	r0, #1065353216	; 0x3f800000
    bd98:	e1a00080 	lsl	r0, r0, #1
    bd9c:	e584001c 	str	r0, [r4, #28]
    bda0:	e5843020 	str	r3, [r4, #32]
    bda4:	83e00000 	mvnhi	r0, #0
    bda8:	e5842028 	str	r2, [r4, #40]	; 0x28
    bdac:	ebfff825 	bl	9e48 <operator new[](unsigned int)>
    bdb0:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    bdb4:	e5840018 	str	r0, [r4, #24]
    bdb8:	e2846014 	add	r6, r4, #20
    bdbc:	e1a00006 	mov	r0, r6
    bdc0:	eb000253 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bdc4:	e1a01000 	mov	r1, r0
    bdc8:	e1a00007 	mov	r0, r7
    bdcc:	eb000d64 	bl	f364 <__aeabi_uidiv>
    bdd0:	e1a05000 	mov	r5, r0
    bdd4:	e1a00006 	mov	r0, r6
    bdd8:	eb00024d 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bddc:	e3a02000 	mov	r2, #0
    bde0:	e0000590 	mul	r0, r0, r5
    bde4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    bde8:	e584002c 	str	r0, [r4, #44]	; 0x2c
    bdec:	e5840038 	str	r0, [r4, #56]	; 0x38
    bdf0:	e5843040 	str	r3, [r4, #64]	; 0x40
    bdf4:	e584203c 	str	r2, [r4, #60]	; 0x3c
    bdf8:	e1a00004 	mov	r0, r4
    bdfc:	ebffffc8 	bl	bd24 <CScreenDevice::ClearDisplayEnd()>
    be00:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    be04:	e3530000 	cmp	r3, #0
    be08:	1a00002f 	bne	becc <CScreenDevice::Initialize()+0x160>
    be0c:	eb000364 	bl	cba4 <CDeviceNameService::Get()>
    be10:	e1a02004 	mov	r2, r4
    be14:	e59f10bc 	ldr	r1, [pc, #188]	; bed8 <CScreenDevice::Initialize()+0x16c>
    be18:	e3a03000 	mov	r3, #0
    be1c:	eb0002f0 	bl	c9e4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    be20:	e3a05001 	mov	r5, #1
    be24:	e1a00005 	mov	r0, r5
    be28:	e28dd00c 	add	sp, sp, #12
    be2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    be30:	e3a00024 	mov	r0, #36	; 0x24
    be34:	ebfff802 	bl	9e44 <operator new(unsigned int)>
    be38:	e9940006 	ldmib	r4, {r1, r2}
    be3c:	e1a06000 	mov	r6, r0
    be40:	e3a03010 	mov	r3, #16
    be44:	e58d5000 	str	r5, [sp]
    be48:	e58d5004 	str	r5, [sp, #4]
    be4c:	eb000ebc 	bl	f944 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    be50:	e5846010 	str	r6, [r4, #16]
    be54:	e1a00006 	mov	r0, r6
    be58:	eb000f22 	bl	fae8 <CBcmFrameBuffer::Initialize()>
    be5c:	e3500000 	cmp	r0, #0
    be60:	0affffef 	beq	be24 <CScreenDevice::Initialize()+0xb8>
    be64:	e5940010 	ldr	r0, [r4, #16]
    be68:	eb000f59 	bl	fbd4 <CBcmFrameBuffer::GetDepth() const>
    be6c:	e3500010 	cmp	r0, #16
    be70:	1affffeb 	bne	be24 <CScreenDevice::Initialize()+0xb8>
    be74:	e5940010 	ldr	r0, [r4, #16]
    be78:	eb000f57 	bl	fbdc <CBcmFrameBuffer::GetBuffer() const>
    be7c:	e5840018 	str	r0, [r4, #24]
    be80:	e5940010 	ldr	r0, [r4, #16]
    be84:	eb000f56 	bl	fbe4 <CBcmFrameBuffer::GetSize() const>
    be88:	e584001c 	str	r0, [r4, #28]
    be8c:	e5940010 	ldr	r0, [r4, #16]
    be90:	eb000f4d 	bl	fbcc <CBcmFrameBuffer::GetPitch() const>
    be94:	e5840020 	str	r0, [r4, #32]
    be98:	e5940010 	ldr	r0, [r4, #16]
    be9c:	eb000f42 	bl	fbac <CBcmFrameBuffer::GetWidth() const>
    bea0:	e5840024 	str	r0, [r4, #36]	; 0x24
    bea4:	e5940010 	ldr	r0, [r4, #16]
    bea8:	eb000f41 	bl	fbb4 <CBcmFrameBuffer::GetHeight() const>
    beac:	e5943020 	ldr	r3, [r4, #32]
    beb0:	e1a07000 	mov	r7, r0
    beb4:	e3130003 	tst	r3, #3
    beb8:	01a030a3 	lsreq	r3, r3, #1
    bebc:	e5840028 	str	r0, [r4, #40]	; 0x28
    bec0:	05843020 	streq	r3, [r4, #32]
    bec4:	0affffbb 	beq	bdb8 <CScreenDevice::Initialize()+0x4c>
    bec8:	eaffffd5 	b	be24 <CScreenDevice::Initialize()+0xb8>
    becc:	e1a00004 	mov	r0, r4
    bed0:	ebfffd3c 	bl	b3c8 <CScreenDevice::InvertCursor() [clone .part.6]>
    bed4:	eaffffcc 	b	be0c <CScreenDevice::Initialize()+0xa0>
    bed8:	000106dc 	.word	0x000106dc

0000bedc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    bedc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    bee0:	e1a05000 	mov	r5, r0
    bee4:	e2807014 	add	r7, r0, #20
    bee8:	e1a00007 	mov	r0, r7
    beec:	e595603c 	ldr	r6, [r5, #60]	; 0x3c
    bef0:	e1a04001 	mov	r4, r1
    bef4:	eb000204 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bef8:	e0206094 	mla	r0, r4, r0, r6
    befc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bf00:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bf04:	e1500003 	cmp	r0, r3
    bf08:	31a06000 	movcc	r6, r0
    bf0c:	21a06003 	movcs	r6, r3
    bf10:	e1540006 	cmp	r4, r6
    bf14:	28bd80f8 	popcs	{r3, r4, r5, r6, r7, pc}
    bf18:	e1a01004 	mov	r1, r4
    bf1c:	e1a00005 	mov	r0, r5
    bf20:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bf24:	ebffff47 	bl	bc48 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bf28:	e1a00007 	mov	r0, r7
    bf2c:	eb0001f6 	bl	c70c <CCharGenerator::GetCharWidth() const>
    bf30:	e0844000 	add	r4, r4, r0
    bf34:	e1540006 	cmp	r4, r6
    bf38:	3afffff6 	bcc	bf18 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x3c>
    bf3c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000bf40 <CScreenDevice::EraseChars(unsigned int)>:
    bf40:	e3510000 	cmp	r1, #0
    bf44:	012fff1e 	bxeq	lr
    bf48:	eaffffe3 	b	bedc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000bf4c <CScreenDevice::Write(char)>:
    bf4c:	e92d4010 	push	{r4, lr}
    bf50:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bf54:	e24dd008 	sub	sp, sp, #8
    bf58:	e1a04000 	mov	r4, r0
    bf5c:	e3530007 	cmp	r3, #7
    bf60:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bf64:	ea000010 	b	bfac <CScreenDevice::Write(char)+0x60>
    bf68:	0000bffc 	.word	0x0000bffc
    bf6c:	0000c05c 	.word	0x0000c05c
    bf70:	0000c078 	.word	0x0000c078
    bf74:	0000c0d0 	.word	0x0000c0d0
    bf78:	0000c1ac 	.word	0x0000c1ac
    bf7c:	0000c1cc 	.word	0x0000c1cc
    bf80:	0000c1ec 	.word	0x0000c1ec
    bf84:	0000bfbc 	.word	0x0000bfbc
    bf88:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bf8c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bf90:	e1520003 	cmp	r2, r3
    bf94:	9a000004 	bls	bfac <CScreenDevice::Write(char)+0x60>
    bf98:	e2800014 	add	r0, r0, #20
    bf9c:	eb0001dc 	bl	c714 <CCharGenerator::GetCharHeight() const>
    bfa0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bfa4:	e0600003 	rsb	r0, r0, r3
    bfa8:	e5840040 	str	r0, [r4, #64]	; 0x40
    bfac:	e3a03000 	mov	r3, #0
    bfb0:	e5843030 	str	r3, [r4, #48]	; 0x30
    bfb4:	e28dd008 	add	sp, sp, #8
    bfb8:	e8bd8010 	pop	{r4, pc}
    bfbc:	e3510068 	cmp	r1, #104	; 0x68
    bfc0:	0a000099 	beq	c22c <CScreenDevice::Write(char)+0x2e0>
    bfc4:	e351006c 	cmp	r1, #108	; 0x6c
    bfc8:	0a000097 	beq	c22c <CScreenDevice::Write(char)+0x2e0>
    bfcc:	e2413030 	sub	r3, r1, #48	; 0x30
    bfd0:	e6ef3073 	uxtb	r3, r3
    bfd4:	e3530009 	cmp	r3, #9
    bfd8:	8afffff3 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    bfdc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    bfe0:	e0833103 	add	r3, r3, r3, lsl #2
    bfe4:	e0811083 	add	r1, r1, r3, lsl #1
    bfe8:	e2411030 	sub	r1, r1, #48	; 0x30
    bfec:	e3510063 	cmp	r1, #99	; 0x63
    bff0:	e5841050 	str	r1, [r4, #80]	; 0x50
    bff4:	8affffec 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    bff8:	eaffffed 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    bffc:	e2413008 	sub	r3, r1, #8
    c000:	e3530013 	cmp	r3, #19
    c004:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c008:	ea0000ed 	b	c3c4 <CScreenDevice::Write(char)+0x478>
    c00c:	0000c298 	.word	0x0000c298
    c010:	0000c28c 	.word	0x0000c28c
    c014:	0000c278 	.word	0x0000c278
    c018:	0000c3c4 	.word	0x0000c3c4
    c01c:	0000c3c4 	.word	0x0000c3c4
    c020:	0000c26c 	.word	0x0000c26c
    c024:	0000c3c4 	.word	0x0000c3c4
    c028:	0000c3c4 	.word	0x0000c3c4
    c02c:	0000c3c4 	.word	0x0000c3c4
    c030:	0000c3c4 	.word	0x0000c3c4
    c034:	0000c3c4 	.word	0x0000c3c4
    c038:	0000c3c4 	.word	0x0000c3c4
    c03c:	0000c3c4 	.word	0x0000c3c4
    c040:	0000c3c4 	.word	0x0000c3c4
    c044:	0000c3c4 	.word	0x0000c3c4
    c048:	0000c3c4 	.word	0x0000c3c4
    c04c:	0000c3c4 	.word	0x0000c3c4
    c050:	0000c3c4 	.word	0x0000c3c4
    c054:	0000c3c4 	.word	0x0000c3c4
    c058:	0000c260 	.word	0x0000c260
    c05c:	e351004d 	cmp	r1, #77	; 0x4d
    c060:	0affffd1 	beq	bfac <CScreenDevice::Write(char)+0x60>
    c064:	e351005b 	cmp	r1, #91	; 0x5b
    c068:	03a03002 	moveq	r3, #2
    c06c:	05803030 	streq	r3, [r0, #48]	; 0x30
    c070:	0affffcf 	beq	bfb4 <CScreenDevice::Write(char)+0x68>
    c074:	eaffffcc 	b	bfac <CScreenDevice::Write(char)+0x60>
    c078:	e241303f 	sub	r3, r1, #63	; 0x3f
    c07c:	e3530011 	cmp	r3, #17
    c080:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c084:	ea0000db 	b	c3f8 <CScreenDevice::Write(char)+0x4ac>
    c088:	0000c380 	.word	0x0000c380
    c08c:	0000c3f8 	.word	0x0000c3f8
    c090:	0000bf88 	.word	0x0000bf88
    c094:	0000c3b4 	.word	0x0000c3b4
    c098:	0000c3a4 	.word	0x0000c3a4
    c09c:	0000c3f8 	.word	0x0000c3f8
    c0a0:	0000c3f8 	.word	0x0000c3f8
    c0a4:	0000c3f8 	.word	0x0000c3f8
    c0a8:	0000c3f8 	.word	0x0000c3f8
    c0ac:	0000c38c 	.word	0x0000c38c
    c0b0:	0000c3f8 	.word	0x0000c3f8
    c0b4:	0000c370 	.word	0x0000c370
    c0b8:	0000c360 	.word	0x0000c360
    c0bc:	0000bfac 	.word	0x0000bfac
    c0c0:	0000bfac 	.word	0x0000bfac
    c0c4:	0000c3f8 	.word	0x0000c3f8
    c0c8:	0000c3f8 	.word	0x0000c3f8
    c0cc:	0000bfac 	.word	0x0000bfac
    c0d0:	e241303b 	sub	r3, r1, #59	; 0x3b
    c0d4:	e3530032 	cmp	r3, #50	; 0x32
    c0d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c0dc:	eaffffba 	b	bfcc <CScreenDevice::Write(char)+0x80>
    c0e0:	0000c354 	.word	0x0000c354
    c0e4:	0000bfcc 	.word	0x0000bfcc
    c0e8:	0000bfcc 	.word	0x0000bfcc
    c0ec:	0000bfcc 	.word	0x0000bfcc
    c0f0:	0000bfcc 	.word	0x0000bfcc
    c0f4:	0000bfcc 	.word	0x0000bfcc
    c0f8:	0000bfcc 	.word	0x0000bfcc
    c0fc:	0000bfcc 	.word	0x0000bfcc
    c100:	0000bfcc 	.word	0x0000bfcc
    c104:	0000bfcc 	.word	0x0000bfcc
    c108:	0000bfcc 	.word	0x0000bfcc
    c10c:	0000bfcc 	.word	0x0000bfcc
    c110:	0000bfcc 	.word	0x0000bfcc
    c114:	0000bfcc 	.word	0x0000bfcc
    c118:	0000bfcc 	.word	0x0000bfcc
    c11c:	0000bfcc 	.word	0x0000bfcc
    c120:	0000bfcc 	.word	0x0000bfcc
    c124:	0000bfac 	.word	0x0000bfac
    c128:	0000bfac 	.word	0x0000bfac
    c12c:	0000bfcc 	.word	0x0000bfcc
    c130:	0000bfcc 	.word	0x0000bfcc
    c134:	0000bfac 	.word	0x0000bfac
    c138:	0000bfcc 	.word	0x0000bfcc
    c13c:	0000bfcc 	.word	0x0000bfcc
    c140:	0000bfcc 	.word	0x0000bfcc
    c144:	0000bfcc 	.word	0x0000bfcc
    c148:	0000bfcc 	.word	0x0000bfcc
    c14c:	0000bfcc 	.word	0x0000bfcc
    c150:	0000bfcc 	.word	0x0000bfcc
    c154:	0000c2a4 	.word	0x0000c2a4
    c158:	0000bfcc 	.word	0x0000bfcc
    c15c:	0000bfcc 	.word	0x0000bfcc
    c160:	0000bfcc 	.word	0x0000bfcc
    c164:	0000bfcc 	.word	0x0000bfcc
    c168:	0000bfcc 	.word	0x0000bfcc
    c16c:	0000bfcc 	.word	0x0000bfcc
    c170:	0000bfcc 	.word	0x0000bfcc
    c174:	0000bfcc 	.word	0x0000bfcc
    c178:	0000bfcc 	.word	0x0000bfcc
    c17c:	0000bfcc 	.word	0x0000bfcc
    c180:	0000bfcc 	.word	0x0000bfcc
    c184:	0000bfcc 	.word	0x0000bfcc
    c188:	0000bfcc 	.word	0x0000bfcc
    c18c:	0000bfcc 	.word	0x0000bfcc
    c190:	0000bfcc 	.word	0x0000bfcc
    c194:	0000c2b8 	.word	0x0000c2b8
    c198:	0000bfcc 	.word	0x0000bfcc
    c19c:	0000bfcc 	.word	0x0000bfcc
    c1a0:	0000bfcc 	.word	0x0000bfcc
    c1a4:	0000c2b8 	.word	0x0000c2b8
    c1a8:	0000c2d4 	.word	0x0000c2d4
    c1ac:	e2411030 	sub	r1, r1, #48	; 0x30
    c1b0:	e6ef3071 	uxtb	r3, r1
    c1b4:	e3530009 	cmp	r3, #9
    c1b8:	8affff7b 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    c1bc:	e3a03007 	mov	r3, #7
    c1c0:	e5801050 	str	r1, [r0, #80]	; 0x50
    c1c4:	e5803030 	str	r3, [r0, #48]	; 0x30
    c1c8:	eaffff79 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c1cc:	e2411030 	sub	r1, r1, #48	; 0x30
    c1d0:	e6ef3071 	uxtb	r3, r1
    c1d4:	e3530009 	cmp	r3, #9
    c1d8:	8affff73 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    c1dc:	e3a03006 	mov	r3, #6
    c1e0:	e5801054 	str	r1, [r0, #84]	; 0x54
    c1e4:	e5803030 	str	r3, [r0, #48]	; 0x30
    c1e8:	eaffff71 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c1ec:	e3510048 	cmp	r1, #72	; 0x48
    c1f0:	0a000091 	beq	c43c <CScreenDevice::Write(char)+0x4f0>
    c1f4:	e3510072 	cmp	r1, #114	; 0x72
    c1f8:	0a000012 	beq	c248 <CScreenDevice::Write(char)+0x2fc>
    c1fc:	e2413030 	sub	r3, r1, #48	; 0x30
    c200:	e6ef3073 	uxtb	r3, r3
    c204:	e3530009 	cmp	r3, #9
    c208:	8affff67 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    c20c:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    c210:	e0833103 	add	r3, r3, r3, lsl #2
    c214:	e0811083 	add	r1, r1, r3, lsl #1
    c218:	e2411030 	sub	r1, r1, #48	; 0x30
    c21c:	e35100c7 	cmp	r1, #199	; 0xc7
    c220:	e5801054 	str	r1, [r0, #84]	; 0x54
    c224:	8affff60 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    c228:	eaffff61 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c22c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c230:	e3530019 	cmp	r3, #25
    c234:	02411068 	subeq	r1, r1, #104	; 0x68
    c238:	016f1f11 	clzeq	r1, r1
    c23c:	01a012a1 	lsreq	r1, r1, #5
    c240:	05841044 	streq	r1, [r4, #68]	; 0x44
    c244:	eaffff58 	b	bfac <CScreenDevice::Write(char)+0x60>
    c248:	e5941050 	ldr	r1, [r4, #80]	; 0x50
    c24c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    c250:	ebfffd8f 	bl	b894 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c254:	e3a03000 	mov	r3, #0
    c258:	e5843030 	str	r3, [r4, #48]	; 0x30
    c25c:	eaffff54 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c260:	e3a03001 	mov	r3, #1
    c264:	e5803030 	str	r3, [r0, #48]	; 0x30
    c268:	eaffff51 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c26c:	e3a03000 	mov	r3, #0
    c270:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c274:	eaffff4e 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c278:	e3a03000 	mov	r3, #0
    c27c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c280:	e28dd008 	add	sp, sp, #8
    c284:	e8bd4010 	pop	{r4, lr}
    c288:	eafffdf2 	b	ba58 <CScreenDevice::CursorDown()>
    c28c:	e28dd008 	add	sp, sp, #8
    c290:	e8bd4010 	pop	{r4, lr}
    c294:	eafffe14 	b	baec <CScreenDevice::Tabulator()>
    c298:	e28dd008 	add	sp, sp, #8
    c29c:	e8bd4010 	pop	{r4, lr}
    c2a0:	eafffd34 	b	b778 <CScreenDevice::CursorLeft()>
    c2a4:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c2a8:	e3510000 	cmp	r1, #0
    c2ac:	0affff3e 	beq	bfac <CScreenDevice::Write(char)+0x60>
    c2b0:	ebffff09 	bl	bedc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    c2b4:	eaffff3c 	b	bfac <CScreenDevice::Write(char)+0x60>
    c2b8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c2bc:	e3530004 	cmp	r3, #4
    c2c0:	02411068 	subeq	r1, r1, #104	; 0x68
    c2c4:	016f1f11 	clzeq	r1, r1
    c2c8:	01a012a1 	lsreq	r1, r1, #5
    c2cc:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c2d0:	eaffff35 	b	bfac <CScreenDevice::Write(char)+0x60>
    c2d4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c2d8:	e353001b 	cmp	r3, #27
    c2dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c2e0:	eaffff31 	b	bfac <CScreenDevice::Write(char)+0x60>
    c2e4:	0000c430 	.word	0x0000c430
    c2e8:	0000c424 	.word	0x0000c424
    c2ec:	0000c418 	.word	0x0000c418
    c2f0:	0000bfac 	.word	0x0000bfac
    c2f4:	0000bfac 	.word	0x0000bfac
    c2f8:	0000bfac 	.word	0x0000bfac
    c2fc:	0000bfac 	.word	0x0000bfac
    c300:	0000bfac 	.word	0x0000bfac
    c304:	0000bfac 	.word	0x0000bfac
    c308:	0000bfac 	.word	0x0000bfac
    c30c:	0000bfac 	.word	0x0000bfac
    c310:	0000bfac 	.word	0x0000bfac
    c314:	0000bfac 	.word	0x0000bfac
    c318:	0000bfac 	.word	0x0000bfac
    c31c:	0000bfac 	.word	0x0000bfac
    c320:	0000bfac 	.word	0x0000bfac
    c324:	0000bfac 	.word	0x0000bfac
    c328:	0000bfac 	.word	0x0000bfac
    c32c:	0000bfac 	.word	0x0000bfac
    c330:	0000bfac 	.word	0x0000bfac
    c334:	0000bfac 	.word	0x0000bfac
    c338:	0000bfac 	.word	0x0000bfac
    c33c:	0000bfac 	.word	0x0000bfac
    c340:	0000bfac 	.word	0x0000bfac
    c344:	0000bfac 	.word	0x0000bfac
    c348:	0000bfac 	.word	0x0000bfac
    c34c:	0000bfac 	.word	0x0000bfac
    c350:	0000c430 	.word	0x0000c430
    c354:	e3a03005 	mov	r3, #5
    c358:	e5803030 	str	r3, [r0, #48]	; 0x30
    c35c:	eaffff14 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c360:	ebfffe5d 	bl	bcdc <CScreenDevice::ClearLineEnd()>
    c364:	e3a03000 	mov	r3, #0
    c368:	e5843030 	str	r3, [r4, #48]	; 0x30
    c36c:	eaffff10 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c370:	ebfffe6b 	bl	bd24 <CScreenDevice::ClearDisplayEnd()>
    c374:	e3a03000 	mov	r3, #0
    c378:	e5843030 	str	r3, [r4, #48]	; 0x30
    c37c:	eaffff0c 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c380:	e3a03004 	mov	r3, #4
    c384:	e5803030 	str	r3, [r0, #48]	; 0x30
    c388:	eaffff09 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c38c:	e3a03000 	mov	r3, #0
    c390:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c394:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c398:	e5803030 	str	r3, [r0, #48]	; 0x30
    c39c:	e5802040 	str	r2, [r0, #64]	; 0x40
    c3a0:	eaffff03 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c3a4:	ebfffdc1 	bl	bab0 <CScreenDevice::CursorRight()>
    c3a8:	e3a03000 	mov	r3, #0
    c3ac:	e5843030 	str	r3, [r4, #48]	; 0x30
    c3b0:	eafffeff 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c3b4:	ebfffda7 	bl	ba58 <CScreenDevice::CursorDown()>
    c3b8:	e3a03000 	mov	r3, #0
    c3bc:	e5843030 	str	r3, [r4, #48]	; 0x30
    c3c0:	eafffefb 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c3c4:	e6ef3071 	uxtb	r3, r1
    c3c8:	e353001f 	cmp	r3, #31
    c3cc:	9afffef8 	bls	bfb4 <CScreenDevice::Write(char)+0x68>
    c3d0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c3d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c3d8:	e1d004b8 	ldrh	r0, [r0, #72]	; 0x48
    c3dc:	e58d0000 	str	r0, [sp]
    c3e0:	e1a00004 	mov	r0, r4
    c3e4:	ebfffdd3 	bl	bb38 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c3e8:	e1a00004 	mov	r0, r4
    c3ec:	e28dd008 	add	sp, sp, #8
    c3f0:	e8bd4010 	pop	{r4, lr}
    c3f4:	eafffdad 	b	bab0 <CScreenDevice::CursorRight()>
    c3f8:	e2411030 	sub	r1, r1, #48	; 0x30
    c3fc:	e6ef3071 	uxtb	r3, r1
    c400:	e3530009 	cmp	r3, #9
    c404:	8afffee8 	bhi	bfac <CScreenDevice::Write(char)+0x60>
    c408:	e3a03003 	mov	r3, #3
    c40c:	e5801050 	str	r1, [r0, #80]	; 0x50
    c410:	e5803030 	str	r3, [r0, #48]	; 0x30
    c414:	eafffee6 	b	bfb4 <CScreenDevice::Write(char)+0x68>
    c418:	e3a0301f 	mov	r3, #31
    c41c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c420:	eafffee1 	b	bfac <CScreenDevice::Write(char)+0x60>
    c424:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c428:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c42c:	eafffede 	b	bfac <CScreenDevice::Write(char)+0x60>
    c430:	e3e03020 	mvn	r3, #32
    c434:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c438:	eafffedb 	b	bfac <CScreenDevice::Write(char)+0x60>
    c43c:	e5941050 	ldr	r1, [r4, #80]	; 0x50
    c440:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    c444:	ebfffce6 	bl	b7e4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c448:	e3a03000 	mov	r3, #0
    c44c:	e5843030 	str	r3, [r4, #48]	; 0x30
    c450:	eafffed7 	b	bfb4 <CScreenDevice::Write(char)+0x68>

0000c454 <CScreenDevice::Write(void const*, unsigned int)>:
    c454:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    c458:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c45c:	e1a05000 	mov	r5, r0
    c460:	e3530000 	cmp	r3, #0
    c464:	e1a07001 	mov	r7, r1
    c468:	e1a04002 	mov	r4, r2
    c46c:	1a000028 	bne	c514 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    c470:	e3a02001 	mov	r2, #1
    c474:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c478:	e5852058 	str	r2, [r5, #88]	; 0x58
    c47c:	e3530000 	cmp	r3, #0
    c480:	1a00001c 	bne	c4f8 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    c484:	e3540000 	cmp	r4, #0
    c488:	e2446001 	sub	r6, r4, #1
    c48c:	01a06004 	moveq	r6, r4
    c490:	0a00000b 	beq	c4c4 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    c494:	e1a04007 	mov	r4, r7
    c498:	e0d410d1 	ldrsb	r1, [r4], #1
    c49c:	e1a00005 	mov	r0, r5
    c4a0:	ebfffea9 	bl	bf4c <CScreenDevice::Write(char)>
    c4a4:	e2643001 	rsb	r3, r4, #1
    c4a8:	e0833006 	add	r3, r3, r6
    c4ac:	e1770003 	cmn	r7, r3
    c4b0:	1afffff8 	bne	c498 <CScreenDevice::Write(void const*, unsigned int)+0x44>
    c4b4:	e2866001 	add	r6, r6, #1
    c4b8:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c4bc:	e3530000 	cmp	r3, #0
    c4c0:	1a000009 	bne	c4ec <CScreenDevice::Write(void const*, unsigned int)+0x98>
    c4c4:	e3a02000 	mov	r2, #0
    c4c8:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    c4cc:	e5852058 	str	r2, [r5, #88]	; 0x58
    c4d0:	e1530002 	cmp	r3, r2
    c4d4:	0a000000 	beq	c4dc <CScreenDevice::Write(void const*, unsigned int)+0x88>
    c4d8:	ebfff66c 	bl	9e90 <LeaveCritical>
    c4dc:	e3a03000 	mov	r3, #0
    c4e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c4e4:	e1a00006 	mov	r0, r6
    c4e8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    c4ec:	e1a00005 	mov	r0, r5
    c4f0:	ebfffbb4 	bl	b3c8 <CScreenDevice::InvertCursor() [clone .part.6]>
    c4f4:	eafffff2 	b	c4c4 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    c4f8:	e1a00005 	mov	r0, r5
    c4fc:	ebfffbb1 	bl	b3c8 <CScreenDevice::InvertCursor() [clone .part.6]>
    c500:	e3540000 	cmp	r4, #0
    c504:	e2446001 	sub	r6, r4, #1
    c508:	1affffe1 	bne	c494 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c50c:	e1a06004 	mov	r6, r4
    c510:	eaffffe8 	b	c4b8 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    c514:	ebfff64e 	bl	9e54 <EnterCritical>
    c518:	eaffffd4 	b	c470 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000c51c <CScreenDevice::InvertCursor()>:
    c51c:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c520:	e3530000 	cmp	r3, #0
    c524:	012fff1e 	bxeq	lr
    c528:	eafffba6 	b	b3c8 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c52c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c52c:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c530:	e15c0001 	cmp	ip, r1
    c534:	912fff1e 	bxls	lr
    c538:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    c53c:	e15c0002 	cmp	ip, r2
    c540:	8590c020 	ldrhi	ip, [r0, #32]
    c544:	85900018 	ldrhi	r0, [r0, #24]
    c548:	8022129c 	mlahi	r2, ip, r2, r1
    c54c:	81a02082 	lslhi	r2, r2, #1
    c550:	818030b2 	strhhi	r3, [r0, r2]
    c554:	e12fff1e 	bx	lr

0000c558 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c558:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c55c:	e1530001 	cmp	r3, r1
    c560:	9a000008 	bls	c588 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c564:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c568:	e1530002 	cmp	r3, r2
    c56c:	9a000005 	bls	c588 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c570:	e590c020 	ldr	ip, [r0, #32]
    c574:	e5903018 	ldr	r3, [r0, #24]
    c578:	e022129c 	mla	r2, ip, r2, r1
    c57c:	e1a02082 	lsl	r2, r2, #1
    c580:	e19300b2 	ldrh	r0, [r3, r2]
    c584:	e12fff1e 	bx	lr
    c588:	e3a00000 	mov	r0, #0
    c58c:	e12fff1e 	bx	lr

0000c590 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c590:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c594:	e1a05000 	mov	r5, r0
    c598:	e24dd00c 	sub	sp, sp, #12
    c59c:	e1a04001 	mov	r4, r1
    c5a0:	e2800014 	add	r0, r0, #20
    c5a4:	e1a06002 	mov	r6, r2
    c5a8:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c5ac:	eb000056 	bl	c70c <CCharGenerator::GetCharWidth() const>
    c5b0:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    c5b4:	e2044003 	and	r4, r4, #3
    c5b8:	e0200094 	mla	r0, r4, r0, r0
    c5bc:	e59f3024 	ldr	r3, [pc, #36]	; c5e8 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x58>
    c5c0:	e2066003 	and	r6, r6, #3
    c5c4:	e0833006 	add	r3, r3, r6
    c5c8:	e1d311dc 	ldrsb	r1, [r3, #28]
    c5cc:	e0602007 	rsb	r2, r0, r7
    c5d0:	e58dc000 	str	ip, [sp]
    c5d4:	e1a00005 	mov	r0, r5
    c5d8:	e3a03000 	mov	r3, #0
    c5dc:	ebfffd55 	bl	bb38 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c5e0:	e28dd00c 	add	sp, sp, #12
    c5e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c5e8:	00010780 	.word	0x00010780

0000c5ec <CScreenDeviceExt::~CScreenDeviceExt()>:
    c5ec:	e92d4010 	push	{r4, lr}
    c5f0:	e1a04000 	mov	r4, r0
    c5f4:	e59f300c 	ldr	r3, [pc, #12]	; c608 <CScreenDeviceExt::~CScreenDeviceExt()+0x1c>
    c5f8:	e5803000 	str	r3, [r0]
    c5fc:	ebfffb4d 	bl	b338 <CScreenDevice::~CScreenDevice()>
    c600:	e1a00004 	mov	r0, r4
    c604:	e8bd8010 	pop	{r4, pc}
    c608:	000107b0 	.word	0x000107b0

0000c60c <CScreenDeviceExt::~CScreenDeviceExt()>:
    c60c:	e92d4010 	push	{r4, lr}
    c610:	e1a04000 	mov	r4, r0
    c614:	e59f3014 	ldr	r3, [pc, #20]	; c630 <CScreenDeviceExt::~CScreenDeviceExt()+0x24>
    c618:	e5803000 	str	r3, [r0]
    c61c:	ebfffb45 	bl	b338 <CScreenDevice::~CScreenDevice()>
    c620:	e1a00004 	mov	r0, r4
    c624:	ebfff608 	bl	9e4c <operator delete(void*)>
    c628:	e1a00004 	mov	r0, r4
    c62c:	e8bd8010 	pop	{r4, pc}
    c630:	000107b0 	.word	0x000107b0

0000c634 <CScreenDeviceExt::CScreenDeviceExt(unsigned int, unsigned int, int)>:
    c634:	e92d4010 	push	{r4, lr}
    c638:	e1a04000 	mov	r4, r0
    c63c:	ebfffb8e 	bl	b47c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    c640:	e59f3008 	ldr	r3, [pc, #8]	; c650 <CScreenDeviceExt::CScreenDeviceExt(unsigned int, unsigned int, int)+0x1c>
    c644:	e1a00004 	mov	r0, r4
    c648:	e5843000 	str	r3, [r4]
    c64c:	e8bd8010 	pop	{r4, pc}
    c650:	000107b0 	.word	0x000107b0

0000c654 <CScreenDeviceExt::DrawLine(int, int, int, int, unsigned short)>:
    c654:	e59d0000 	ldr	r0, [sp]
    c658:	e0611003 	rsb	r1, r1, r3
    c65c:	e0622000 	rsb	r2, r2, r0
    c660:	e0020292 	mul	r2, r2, r2
    c664:	e0232191 	mla	r3, r1, r1, r2
    c668:	ee003a10 	vmov	s0, r3
    c66c:	eeb80ac0 	vcvt.f32.s32	s0, s0
    c670:	ea000c7e 	b	f870 <sqrt3>

0000c674 <assertion_failed>:
    c674:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c678:	e1a05000 	mov	r5, r0
    c67c:	e24dd01c 	sub	sp, sp, #28
    c680:	e1a07001 	mov	r7, r1
    c684:	e1a06002 	mov	r6, r2
    c688:	e1a0400d 	mov	r4, sp
    c68c:	e28d0008 	add	r0, sp, #8
    c690:	eb0002a0 	bl	d118 <CString::CString()>
    c694:	e1a02007 	mov	r2, r7
    c698:	e1a03006 	mov	r3, r6
    c69c:	e28d0008 	add	r0, sp, #8
    c6a0:	e59f104c 	ldr	r1, [pc, #76]	; c6f4 <assertion_failed+0x80>
    c6a4:	eb00050b 	bl	dad8 <CString::Format(char const*, ...)>
    c6a8:	e28d0008 	add	r0, sp, #8
    c6ac:	eb0002af 	bl	d170 <CString::operator char const*() const>
    c6b0:	e1a01000 	mov	r1, r0
    c6b4:	e1a00004 	mov	r0, r4
    c6b8:	eb00007b 	bl	c8ac <debug_stacktrace(unsigned int const*, char const*)>
    c6bc:	eb000164 	bl	cc54 <CLogger::Get()>
    c6c0:	e1a04000 	mov	r4, r0
    c6c4:	e28d0008 	add	r0, sp, #8
    c6c8:	eb0002a8 	bl	d170 <CString::operator char const*() const>
    c6cc:	e3a02000 	mov	r2, #0
    c6d0:	e1a01000 	mov	r1, r0
    c6d4:	e59f301c 	ldr	r3, [pc, #28]	; c6f8 <assertion_failed+0x84>
    c6d8:	e1a00004 	mov	r0, r4
    c6dc:	e58d5000 	str	r5, [sp]
    c6e0:	eb00023a 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c6e4:	e28d0008 	add	r0, sp, #8
    c6e8:	eb000256 	bl	d048 <CString::~CString()>
    c6ec:	e28dd01c 	add	sp, sp, #28
    c6f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c6f4:	000107c8 	.word	0x000107c8
    c6f8:	000107d0 	.word	0x000107d0

0000c6fc <CCharGenerator::CCharGenerator()>:
    c6fc:	e3a03008 	mov	r3, #8
    c700:	e5803000 	str	r3, [r0]
    c704:	e12fff1e 	bx	lr

0000c708 <CCharGenerator::~CCharGenerator()>:
    c708:	e12fff1e 	bx	lr

0000c70c <CCharGenerator::GetCharWidth() const>:
    c70c:	e5900000 	ldr	r0, [r0]
    c710:	e12fff1e 	bx	lr

0000c714 <CCharGenerator::GetCharHeight() const>:
    c714:	e3a00013 	mov	r0, #19
    c718:	e12fff1e 	bx	lr

0000c71c <CCharGenerator::GetUnderline() const>:
    c71c:	e3a00010 	mov	r0, #16
    c720:	e12fff1e 	bx	lr

0000c724 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    c724:	e6ef1071 	uxtb	r1, r1
    c728:	e92d4070 	push	{r4, r5, r6, lr}
    c72c:	e2414021 	sub	r4, r1, #33	; 0x21
    c730:	e35400de 	cmp	r4, #222	; 0xde
    c734:	8a00000e 	bhi	c774 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
    c738:	e1a05003 	mov	r5, r3
    c73c:	e5903000 	ldr	r3, [r0]
    c740:	e1a06002 	mov	r6, r2
    c744:	e1530002 	cmp	r3, r2
    c748:	9a00000b 	bls	c77c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
    c74c:	e355000f 	cmp	r5, #15
    c750:	8a000007 	bhi	c774 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
    c754:	e3a02080 	mov	r2, #128	; 0x80
    c758:	e59f1038 	ldr	r1, [pc, #56]	; c798 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
    c75c:	e0853204 	add	r3, r5, r4, lsl #4
    c760:	e7d13003 	ldrb	r3, [r1, r3]
    c764:	e0133652 	ands	r3, r3, r2, asr r6
    c768:	13a00001 	movne	r0, #1
    c76c:	03a00000 	moveq	r0, #0
    c770:	e8bd8070 	pop	{r4, r5, r6, pc}
    c774:	e3a00000 	mov	r0, #0
    c778:	e8bd8070 	pop	{r4, r5, r6, pc}
    c77c:	e59f0018 	ldr	r0, [pc, #24]	; c79c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
    c780:	e59f1018 	ldr	r1, [pc, #24]	; c7a0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
    c784:	e3a0204e 	mov	r2, #78	; 0x4e
    c788:	ebffffb9 	bl	c674 <assertion_failed>
    c78c:	e355000f 	cmp	r5, #15
    c790:	9affffef 	bls	c754 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c794:	eafffff6 	b	c774 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
    c798:	000107e8 	.word	0x000107e8
    c79c:	000115d8 	.word	0x000115d8
    c7a0:	000115f0 	.word	0x000115f0

0000c7a4 <debug_hexdump(void const*, unsigned int, char const*)>:
    c7a4:	e3520000 	cmp	r2, #0
    c7a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ac:	e1a05001 	mov	r5, r1
    c7b0:	e59f90e8 	ldr	r9, [pc, #232]	; c8a0 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    c7b4:	e1a04000 	mov	r4, r0
    c7b8:	11a09002 	movne	r9, r2
    c7bc:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    c7c0:	eb000123 	bl	cc54 <CLogger::Get()>
    c7c4:	e58d5000 	str	r5, [sp]
    c7c8:	e58d4004 	str	r4, [sp, #4]
    c7cc:	e1a01009 	mov	r1, r9
    c7d0:	e3a02004 	mov	r2, #4
    c7d4:	e59f30c8 	ldr	r3, [pc, #200]	; c8a4 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    c7d8:	eb0001fc 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c7dc:	e3550000 	cmp	r5, #0
    c7e0:	0a000029 	beq	c88c <debug_hexdump(void const*, unsigned int, char const*)+0xe8>
    c7e4:	eb00011a 	bl	cc54 <CLogger::Get()>
    c7e8:	e5d4b000 	ldrb	fp, [r4]
    c7ec:	e5d4a001 	ldrb	sl, [r4, #1]
    c7f0:	e5d48002 	ldrb	r8, [r4, #2]
    c7f4:	e5d47003 	ldrb	r7, [r4, #3]
    c7f8:	e5d46004 	ldrb	r6, [r4, #4]
    c7fc:	e5d4e005 	ldrb	lr, [r4, #5]
    c800:	e5d4c006 	ldrb	ip, [r4, #6]
    c804:	e5d41007 	ldrb	r1, [r4, #7]
    c808:	e5d42008 	ldrb	r2, [r4, #8]
    c80c:	e5d43009 	ldrb	r3, [r4, #9]
    c810:	e58db004 	str	fp, [sp, #4]
    c814:	e5d4b00a 	ldrb	fp, [r4, #10]
    c818:	e58da008 	str	sl, [sp, #8]
    c81c:	e5d4a00b 	ldrb	sl, [r4, #11]
    c820:	e58d800c 	str	r8, [sp, #12]
    c824:	e5d4800c 	ldrb	r8, [r4, #12]
    c828:	e58d7010 	str	r7, [sp, #16]
    c82c:	e5d4700d 	ldrb	r7, [r4, #13]
    c830:	e58d6014 	str	r6, [sp, #20]
    c834:	e5d4600e 	ldrb	r6, [r4, #14]
    c838:	e58de018 	str	lr, [sp, #24]
    c83c:	e5d4e00f 	ldrb	lr, [r4, #15]
    c840:	e58dc01c 	str	ip, [sp, #28]
    c844:	e58d1020 	str	r1, [sp, #32]
    c848:	e6ffc074 	uxth	ip, r4
    c84c:	e58d2024 	str	r2, [sp, #36]	; 0x24
    c850:	e58d3028 	str	r3, [sp, #40]	; 0x28
    c854:	e1a01009 	mov	r1, r9
    c858:	e3a02004 	mov	r2, #4
    c85c:	e59f3044 	ldr	r3, [pc, #68]	; c8a8 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    c860:	e58db02c 	str	fp, [sp, #44]	; 0x2c
    c864:	e58da030 	str	sl, [sp, #48]	; 0x30
    c868:	e58d8034 	str	r8, [sp, #52]	; 0x34
    c86c:	e58d7038 	str	r7, [sp, #56]	; 0x38
    c870:	e58d603c 	str	r6, [sp, #60]	; 0x3c
    c874:	e58de040 	str	lr, [sp, #64]	; 0x40
    c878:	e58dc000 	str	ip, [sp]
    c87c:	eb0001d3 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c880:	e355000f 	cmp	r5, #15
    c884:	e2844010 	add	r4, r4, #16
    c888:	8a000001 	bhi	c894 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    c88c:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c890:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c894:	e2555010 	subs	r5, r5, #16
    c898:	1affffd1 	bne	c7e4 <debug_hexdump(void const*, unsigned int, char const*)+0x40>
    c89c:	eafffffa 	b	c88c <debug_hexdump(void const*, unsigned int, char const*)+0xe8>
    c8a0:	00011604 	.word	0x00011604
    c8a4:	0001160c 	.word	0x0001160c
    c8a8:	00011630 	.word	0x00011630

0000c8ac <debug_stacktrace(unsigned int const*, char const*)>:
    c8ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c8b0:	e3a04000 	mov	r4, #0
    c8b4:	e1510004 	cmp	r1, r4
    c8b8:	e59f8068 	ldr	r8, [pc, #104]	; c928 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
    c8bc:	e24dd008 	sub	sp, sp, #8
    c8c0:	11a08001 	movne	r8, r1
    c8c4:	e59f6060 	ldr	r6, [pc, #96]	; c92c <debug_stacktrace(unsigned int const*, char const*)+0x80>
    c8c8:	e59f7060 	ldr	r7, [pc, #96]	; c930 <debug_stacktrace(unsigned int const*, char const*)+0x84>
    c8cc:	e2405004 	sub	r5, r0, #4
    c8d0:	ea000002 	b	c8e0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c8d4:	e2844001 	add	r4, r4, #1
    c8d8:	e3540040 	cmp	r4, #64	; 0x40
    c8dc:	0a00000f 	beq	c920 <debug_stacktrace(unsigned int const*, char const*)+0x74>
    c8e0:	e5b53004 	ldr	r3, [r5, #4]!
    c8e4:	e1530006 	cmp	r3, r6
    c8e8:	9afffff9 	bls	c8d4 <debug_stacktrace(unsigned int const*, char const*)+0x28>
    c8ec:	e1530007 	cmp	r3, r7
    c8f0:	2afffff7 	bcs	c8d4 <debug_stacktrace(unsigned int const*, char const*)+0x28>
    c8f4:	eb0000d6 	bl	cc54 <CLogger::Get()>
    c8f8:	e58d4000 	str	r4, [sp]
    c8fc:	e5953000 	ldr	r3, [r5]
    c900:	e1a01008 	mov	r1, r8
    c904:	e58d3004 	str	r3, [sp, #4]
    c908:	e3a02004 	mov	r2, #4
    c90c:	e59f3020 	ldr	r3, [pc, #32]	; c934 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    c910:	e2844001 	add	r4, r4, #1
    c914:	eb0001ad 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c918:	e3540040 	cmp	r4, #64	; 0x40
    c91c:	1affffef 	bne	c8e0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c920:	e28dd008 	add	sp, sp, #8
    c924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c928:	00011604 	.word	0x00011604
    c92c:	00007fff 	.word	0x00007fff
    c930:	000100d4 	.word	0x000100d4
    c934:	00011688 	.word	0x00011688

0000c938 <CDeviceNameService::CDeviceNameService()>:
    c938:	e92d4038 	push	{r3, r4, r5, lr}
    c93c:	e3a03000 	mov	r3, #0
    c940:	e59f5030 	ldr	r5, [pc, #48]	; c978 <CDeviceNameService::CDeviceNameService()+0x40>
    c944:	e1a04000 	mov	r4, r0
    c948:	e5952000 	ldr	r2, [r5]
    c94c:	e5803000 	str	r3, [r0]
    c950:	e1520003 	cmp	r2, r3
    c954:	e5803004 	str	r3, [r0, #4]
    c958:	0a000003 	beq	c96c <CDeviceNameService::CDeviceNameService()+0x34>
    c95c:	e59f0018 	ldr	r0, [pc, #24]	; c97c <CDeviceNameService::CDeviceNameService()+0x44>
    c960:	e59f1018 	ldr	r1, [pc, #24]	; c980 <CDeviceNameService::CDeviceNameService()+0x48>
    c964:	e3a0201e 	mov	r2, #30
    c968:	ebffff41 	bl	c674 <assertion_failed>
    c96c:	e5854000 	str	r4, [r5]
    c970:	e1a00004 	mov	r0, r4
    c974:	e8bd8038 	pop	{r3, r4, r5, pc}
    c978:	0001291c 	.word	0x0001291c
    c97c:	0001169c 	.word	0x0001169c
    c980:	000116a8 	.word	0x000116a8

0000c984 <CDeviceNameService::~CDeviceNameService()>:
    c984:	e5903000 	ldr	r3, [r0]
    c988:	e92d4070 	push	{r4, r5, r6, lr}
    c98c:	e3530000 	cmp	r3, #0
    c990:	e1a05000 	mov	r5, r0
    c994:	0a00000c 	beq	c9cc <CDeviceNameService::~CDeviceNameService()+0x48>
    c998:	e3a06000 	mov	r6, #0
    c99c:	e5930004 	ldr	r0, [r3, #4]
    c9a0:	e5934000 	ldr	r4, [r3]
    c9a4:	e3500000 	cmp	r0, #0
    c9a8:	0a000000 	beq	c9b0 <CDeviceNameService::~CDeviceNameService()+0x2c>
    c9ac:	ebfff527 	bl	9e50 <operator delete[](void*)>
    c9b0:	e5950000 	ldr	r0, [r5]
    c9b4:	e5806004 	str	r6, [r0, #4]
    c9b8:	e5806008 	str	r6, [r0, #8]
    c9bc:	ebfff522 	bl	9e4c <operator delete(void*)>
    c9c0:	e2543000 	subs	r3, r4, #0
    c9c4:	e5854000 	str	r4, [r5]
    c9c8:	1afffff3 	bne	c99c <CDeviceNameService::~CDeviceNameService()+0x18>
    c9cc:	e3a02000 	mov	r2, #0
    c9d0:	e59f3008 	ldr	r3, [pc, #8]	; c9e0 <CDeviceNameService::~CDeviceNameService()+0x5c>
    c9d4:	e1a00005 	mov	r0, r5
    c9d8:	e5832000 	str	r2, [r3]
    c9dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    c9e0:	0001291c 	.word	0x0001291c

0000c9e4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c9e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c9e8:	e1a05000 	mov	r5, r0
    c9ec:	e5900004 	ldr	r0, [r0, #4]
    c9f0:	e1a06001 	mov	r6, r1
    c9f4:	e3500000 	cmp	r0, #0
    c9f8:	e1a07002 	mov	r7, r2
    c9fc:	e1a08003 	mov	r8, r3
    ca00:	1a000016 	bne	ca60 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x7c>
    ca04:	e3a00010 	mov	r0, #16
    ca08:	ebfff50d 	bl	9e44 <operator new(unsigned int)>
    ca0c:	e3560000 	cmp	r6, #0
    ca10:	e1a04000 	mov	r4, r0
    ca14:	0a000018 	beq	ca7c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x98>
    ca18:	e1a00006 	mov	r0, r6
    ca1c:	eb000a7c 	bl	f414 <strlen>
    ca20:	e2800001 	add	r0, r0, #1
    ca24:	ebfff507 	bl	9e48 <operator new[](unsigned int)>
    ca28:	e1a01006 	mov	r1, r6
    ca2c:	e5840004 	str	r0, [r4, #4]
    ca30:	eb000aa5 	bl	f4cc <strcpy>
    ca34:	e3570000 	cmp	r7, #0
    ca38:	0a00000a 	beq	ca68 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x84>
    ca3c:	e895000c 	ldm	r5, {r2, r3}
    ca40:	e3530000 	cmp	r3, #0
    ca44:	e5847008 	str	r7, [r4, #8]
    ca48:	e584800c 	str	r8, [r4, #12]
    ca4c:	e5842000 	str	r2, [r4]
    ca50:	e5854000 	str	r4, [r5]
    ca54:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ca58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ca5c:	eafff50b 	b	9e90 <LeaveCritical>
    ca60:	ebfff4fb 	bl	9e54 <EnterCritical>
    ca64:	eaffffe6 	b	ca04 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    ca68:	e59f0020 	ldr	r0, [pc, #32]	; ca90 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xac>
    ca6c:	e59f1020 	ldr	r1, [pc, #32]	; ca94 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xb0>
    ca70:	e3a0203f 	mov	r2, #63	; 0x3f
    ca74:	ebfffefe 	bl	c674 <assertion_failed>
    ca78:	eaffffef 	b	ca3c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    ca7c:	e59f0014 	ldr	r0, [pc, #20]	; ca98 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xb4>
    ca80:	e59f100c 	ldr	r1, [pc, #12]	; ca94 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xb0>
    ca84:	e3a0203a 	mov	r2, #58	; 0x3a
    ca88:	ebfffef9 	bl	c674 <assertion_failed>
    ca8c:	eaffffe1 	b	ca18 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>
    ca90:	000116cc 	.word	0x000116cc
    ca94:	000116a8 	.word	0x000116a8
    ca98:	000116c0 	.word	0x000116c0

0000ca9c <CDeviceNameService::GetDevice(char const*, int)>:
    ca9c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    caa0:	e2515000 	subs	r5, r1, #0
    caa4:	e1a07000 	mov	r7, r0
    caa8:	e1a06002 	mov	r6, r2
    caac:	0a00002d 	beq	cb68 <CDeviceNameService::GetDevice(char const*, int)+0xcc>
    cab0:	e5973004 	ldr	r3, [r7, #4]
    cab4:	e3530000 	cmp	r3, #0
    cab8:	1a000016 	bne	cb18 <CDeviceNameService::GetDevice(char const*, int)+0x7c>
    cabc:	e5974000 	ldr	r4, [r7]
    cac0:	e3540000 	cmp	r4, #0
    cac4:	1a00000a 	bne	caf4 <CDeviceNameService::GetDevice(char const*, int)+0x58>
    cac8:	ea00001a 	b	cb38 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    cacc:	e1a00005 	mov	r0, r5
    cad0:	eb000a59 	bl	f43c <strcmp>
    cad4:	e3500000 	cmp	r0, #0
    cad8:	1a000002 	bne	cae8 <CDeviceNameService::GetDevice(char const*, int)+0x4c>
    cadc:	e594300c 	ldr	r3, [r4, #12]
    cae0:	e1530006 	cmp	r3, r6
    cae4:	0a000015 	beq	cb40 <CDeviceNameService::GetDevice(char const*, int)+0xa4>
    cae8:	e5944000 	ldr	r4, [r4]
    caec:	e3540000 	cmp	r4, #0
    caf0:	0a00000c 	beq	cb28 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    caf4:	e5941004 	ldr	r1, [r4, #4]
    caf8:	e3510000 	cmp	r1, #0
    cafc:	1afffff2 	bne	cacc <CDeviceNameService::GetDevice(char const*, int)+0x30>
    cb00:	e59f108c 	ldr	r1, [pc, #140]	; cb94 <CDeviceNameService::GetDevice(char const*, int)+0xf8>
    cb04:	e59f008c 	ldr	r0, [pc, #140]	; cb98 <CDeviceNameService::GetDevice(char const*, int)+0xfc>
    cb08:	e3a02053 	mov	r2, #83	; 0x53
    cb0c:	ebfffed8 	bl	c674 <assertion_failed>
    cb10:	e5941004 	ldr	r1, [r4, #4]
    cb14:	eaffffec 	b	cacc <CDeviceNameService::GetDevice(char const*, int)+0x30>
    cb18:	ebfff4cd 	bl	9e54 <EnterCritical>
    cb1c:	e5974000 	ldr	r4, [r7]
    cb20:	e3540000 	cmp	r4, #0
    cb24:	1afffff2 	bne	caf4 <CDeviceNameService::GetDevice(char const*, int)+0x58>
    cb28:	e5973004 	ldr	r3, [r7, #4]
    cb2c:	e3530000 	cmp	r3, #0
    cb30:	0a000000 	beq	cb38 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    cb34:	ebfff4d5 	bl	9e90 <LeaveCritical>
    cb38:	e3a00000 	mov	r0, #0
    cb3c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cb40:	e5973004 	ldr	r3, [r7, #4]
    cb44:	e5944008 	ldr	r4, [r4, #8]
    cb48:	e3530000 	cmp	r3, #0
    cb4c:	1a000003 	bne	cb60 <CDeviceNameService::GetDevice(char const*, int)+0xc4>
    cb50:	e3540000 	cmp	r4, #0
    cb54:	0a000008 	beq	cb7c <CDeviceNameService::GetDevice(char const*, int)+0xe0>
    cb58:	e1a00004 	mov	r0, r4
    cb5c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cb60:	ebfff4ca 	bl	9e90 <LeaveCritical>
    cb64:	eafffff9 	b	cb50 <CDeviceNameService::GetDevice(char const*, int)+0xb4>
    cb68:	e59f002c 	ldr	r0, [pc, #44]	; cb9c <CDeviceNameService::GetDevice(char const*, int)+0x100>
    cb6c:	e59f1020 	ldr	r1, [pc, #32]	; cb94 <CDeviceNameService::GetDevice(char const*, int)+0xf8>
    cb70:	e3a0204c 	mov	r2, #76	; 0x4c
    cb74:	ebfffebe 	bl	c674 <assertion_failed>
    cb78:	eaffffcc 	b	cab0 <CDeviceNameService::GetDevice(char const*, int)+0x14>
    cb7c:	e59f001c 	ldr	r0, [pc, #28]	; cba0 <CDeviceNameService::GetDevice(char const*, int)+0x104>
    cb80:	e59f100c 	ldr	r1, [pc, #12]	; cb94 <CDeviceNameService::GetDevice(char const*, int)+0xf8>
    cb84:	e3a0205b 	mov	r2, #91	; 0x5b
    cb88:	ebfffeb9 	bl	c674 <assertion_failed>
    cb8c:	e1a00004 	mov	r0, r4
    cb90:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cb94:	000116a8 	.word	0x000116a8
    cb98:	000116dc 	.word	0x000116dc
    cb9c:	000116c0 	.word	0x000116c0
    cba0:	000116f0 	.word	0x000116f0

0000cba4 <CDeviceNameService::Get()>:
    cba4:	e92d4010 	push	{r4, lr}
    cba8:	e59f4020 	ldr	r4, [pc, #32]	; cbd0 <CDeviceNameService::Get()+0x2c>
    cbac:	e5940000 	ldr	r0, [r4]
    cbb0:	e3500000 	cmp	r0, #0
    cbb4:	18bd8010 	popne	{r4, pc}
    cbb8:	e59f0014 	ldr	r0, [pc, #20]	; cbd4 <CDeviceNameService::Get()+0x30>
    cbbc:	e59f1014 	ldr	r1, [pc, #20]	; cbd8 <CDeviceNameService::Get()+0x34>
    cbc0:	e3a02069 	mov	r2, #105	; 0x69
    cbc4:	ebfffeaa 	bl	c674 <assertion_failed>
    cbc8:	e5940000 	ldr	r0, [r4]
    cbcc:	e8bd8010 	pop	{r4, pc}
    cbd0:	0001291c 	.word	0x0001291c
    cbd4:	00011700 	.word	0x00011700
    cbd8:	000116a8 	.word	0x000116a8

0000cbdc <CLogger::CLogger(unsigned int, CTimer*)>:
    cbdc:	e92d4010 	push	{r4, lr}
    cbe0:	e3a03000 	mov	r3, #0
    cbe4:	e1a04000 	mov	r4, r0
    cbe8:	e3a00001 	mov	r0, #1
    cbec:	e5843008 	str	r3, [r4, #8]
    cbf0:	e5840018 	str	r0, [r4, #24]
    cbf4:	e584300c 	str	r3, [r4, #12]
    cbf8:	e5843010 	str	r3, [r4, #16]
    cbfc:	e5843014 	str	r3, [r4, #20]
    cc00:	e8840006 	stm	r4, {r1, r2}
    cc04:	e3a00901 	mov	r0, #16384	; 0x4000
    cc08:	ebfff48e 	bl	9e48 <operator new[](unsigned int)>
    cc0c:	e59f300c 	ldr	r3, [pc, #12]	; cc20 <CLogger::CLogger(unsigned int, CTimer*)+0x44>
    cc10:	e584000c 	str	r0, [r4, #12]
    cc14:	e5834000 	str	r4, [r3]
    cc18:	e1a00004 	mov	r0, r4
    cc1c:	e8bd8010 	pop	{r4, pc}
    cc20:	00012920 	.word	0x00012920

0000cc24 <CLogger::~CLogger()>:
    cc24:	e3a02000 	mov	r2, #0
    cc28:	e92d4010 	push	{r4, lr}
    cc2c:	e1a04000 	mov	r4, r0
    cc30:	e590000c 	ldr	r0, [r0, #12]
    cc34:	e59f3014 	ldr	r3, [pc, #20]	; cc50 <CLogger::~CLogger()+0x2c>
    cc38:	e1500002 	cmp	r0, r2
    cc3c:	e5832000 	str	r2, [r3]
    cc40:	0a000000 	beq	cc48 <CLogger::~CLogger()+0x24>
    cc44:	ebfff481 	bl	9e50 <operator delete[](void*)>
    cc48:	e1a00004 	mov	r0, r4
    cc4c:	e8bd8010 	pop	{r4, pc}
    cc50:	00012920 	.word	0x00012920

0000cc54 <CLogger::Get()>:
    cc54:	e59f3004 	ldr	r3, [pc, #4]	; cc60 <CLogger::Get()+0xc>
    cc58:	e5930000 	ldr	r0, [r3]
    cc5c:	e12fff1e 	bx	lr
    cc60:	00012920 	.word	0x00012920

0000cc64 <CLogger::Write(char const*)>:
    cc64:	e92d4070 	push	{r4, r5, r6, lr}
    cc68:	e1a04000 	mov	r4, r0
    cc6c:	e1a00001 	mov	r0, r1
    cc70:	e1a05001 	mov	r5, r1
    cc74:	eb0009e6 	bl	f414 <strlen>
    cc78:	e1a06000 	mov	r6, r0
    cc7c:	e5940008 	ldr	r0, [r4, #8]
    cc80:	e1a01005 	mov	r1, r5
    cc84:	e5903000 	ldr	r3, [r0]
    cc88:	e1a02006 	mov	r2, r6
    cc8c:	e593300c 	ldr	r3, [r3, #12]
    cc90:	e12fff33 	blx	r3
    cc94:	e5943018 	ldr	r3, [r4, #24]
    cc98:	e3530000 	cmp	r3, #0
    cc9c:	1a000019 	bne	cd08 <CLogger::Write(char const*)+0xa4>
    cca0:	e0850006 	add	r0, r5, r6
    cca4:	e1550000 	cmp	r5, r0
    cca8:	0a000011 	beq	ccf4 <CLogger::Write(char const*)+0x90>
    ccac:	e4d53001 	ldrb	r3, [r5], #1
    ccb0:	e353000d 	cmp	r3, #13
    ccb4:	0afffffa 	beq	cca4 <CLogger::Write(char const*)+0x40>
    ccb8:	e5941010 	ldr	r1, [r4, #16]
    ccbc:	e594c00c 	ldr	ip, [r4, #12]
    ccc0:	e7cc3001 	strb	r3, [ip, r1]
    ccc4:	e5943010 	ldr	r3, [r4, #16]
    ccc8:	e5941014 	ldr	r1, [r4, #20]
    cccc:	e2833001 	add	r3, r3, #1
    ccd0:	e1a03903 	lsl	r3, r3, #18
    ccd4:	e1a03923 	lsr	r3, r3, #18
    ccd8:	e1530001 	cmp	r3, r1
    ccdc:	e5843010 	str	r3, [r4, #16]
    cce0:	1affffef 	bne	cca4 <CLogger::Write(char const*)+0x40>
    cce4:	e2433001 	sub	r3, r3, #1
    cce8:	e1a03903 	lsl	r3, r3, #18
    ccec:	e1a03923 	lsr	r3, r3, #18
    ccf0:	e5843010 	str	r3, [r4, #16]
    ccf4:	e5943018 	ldr	r3, [r4, #24]
    ccf8:	e3530000 	cmp	r3, #0
    ccfc:	08bd8070 	popeq	{r4, r5, r6, pc}
    cd00:	e8bd4070 	pop	{r4, r5, r6, lr}
    cd04:	eafff461 	b	9e90 <LeaveCritical>
    cd08:	ebfff451 	bl	9e54 <EnterCritical>
    cd0c:	eaffffe3 	b	cca0 <CLogger::Write(char const*)+0x3c>

0000cd10 <CLogger::Read(void*, unsigned int)>:
    cd10:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    cd14:	e5903018 	ldr	r3, [r0, #24]
    cd18:	e1a04000 	mov	r4, r0
    cd1c:	e3530000 	cmp	r3, #0
    cd20:	e1a05001 	mov	r5, r1
    cd24:	e1a06002 	mov	r6, r2
    cd28:	1a000019 	bne	cd94 <CLogger::Read(void*, unsigned int)+0x84>
    cd2c:	e5902010 	ldr	r2, [r0, #16]
    cd30:	e5903014 	ldr	r3, [r0, #20]
    cd34:	e1520003 	cmp	r2, r3
    cd38:	0a00001e 	beq	cdb8 <CLogger::Read(void*, unsigned int)+0xa8>
    cd3c:	e1a07006 	mov	r7, r6
    cd40:	e3a0c000 	mov	ip, #0
    cd44:	ea00000b 	b	cd78 <CLogger::Read(void*, unsigned int)+0x68>
    cd48:	e594100c 	ldr	r1, [r4, #12]
    cd4c:	e28cc001 	add	ip, ip, #1
    cd50:	e7d13003 	ldrb	r3, [r1, r3]
    cd54:	e4c53001 	strb	r3, [r5], #1
    cd58:	e5943014 	ldr	r3, [r4, #20]
    cd5c:	e5941010 	ldr	r1, [r4, #16]
    cd60:	e2833001 	add	r3, r3, #1
    cd64:	e1a03903 	lsl	r3, r3, #18
    cd68:	e1a03923 	lsr	r3, r3, #18
    cd6c:	e1530001 	cmp	r3, r1
    cd70:	e5843014 	str	r3, [r4, #20]
    cd74:	0a000011 	beq	cdc0 <CLogger::Read(void*, unsigned int)+0xb0>
    cd78:	e15c0006 	cmp	ip, r6
    cd7c:	1afffff1 	bne	cd48 <CLogger::Read(void*, unsigned int)+0x38>
    cd80:	e5943018 	ldr	r3, [r4, #24]
    cd84:	e3530000 	cmp	r3, #0
    cd88:	1a000010 	bne	cdd0 <CLogger::Read(void*, unsigned int)+0xc0>
    cd8c:	e1a00007 	mov	r0, r7
    cd90:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cd94:	ebfff42e 	bl	9e54 <EnterCritical>
    cd98:	e5942010 	ldr	r2, [r4, #16]
    cd9c:	e5943014 	ldr	r3, [r4, #20]
    cda0:	e1520003 	cmp	r2, r3
    cda4:	1affffe4 	bne	cd3c <CLogger::Read(void*, unsigned int)+0x2c>
    cda8:	e5943018 	ldr	r3, [r4, #24]
    cdac:	e3530000 	cmp	r3, #0
    cdb0:	0a000000 	beq	cdb8 <CLogger::Read(void*, unsigned int)+0xa8>
    cdb4:	ebfff435 	bl	9e90 <LeaveCritical>
    cdb8:	e3e00000 	mvn	r0, #0
    cdbc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    cdc0:	e5943018 	ldr	r3, [r4, #24]
    cdc4:	e1a0700c 	mov	r7, ip
    cdc8:	e3530000 	cmp	r3, #0
    cdcc:	0affffee 	beq	cd8c <CLogger::Read(void*, unsigned int)+0x7c>
    cdd0:	ebfff42e 	bl	9e90 <LeaveCritical>
    cdd4:	e1a00007 	mov	r0, r7
    cdd8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000cddc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    cddc:	e590c000 	ldr	ip, [r0]
    cde0:	e15c0002 	cmp	ip, r2
    cde4:	312fff1e 	bxcc	lr
    cde8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cdec:	e1a05002 	mov	r5, r2
    cdf0:	e24dd020 	sub	sp, sp, #32
    cdf4:	e1a04000 	mov	r4, r0
    cdf8:	e1a0000d 	mov	r0, sp
    cdfc:	e1a07003 	mov	r7, r3
    ce00:	e1a06001 	mov	r6, r1
    ce04:	eb0000c3 	bl	d118 <CString::CString()>
    ce08:	e3550000 	cmp	r5, #0
    ce0c:	0a000032 	beq	cedc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    ce10:	e5940004 	ldr	r0, [r4, #4]
    ce14:	e3500000 	cmp	r0, #0
    ce18:	0a000054 	beq	cf70 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x194>
    ce1c:	ebfff52a 	bl	a2cc <CTimer::GetTimeString()>
    ce20:	e2508000 	subs	r8, r0, #0
    ce24:	0a00000a 	beq	ce54 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x78>
    ce28:	eb0000d0 	bl	d170 <CString::operator char const*() const>
    ce2c:	e1a01000 	mov	r1, r0
    ce30:	e1a0000d 	mov	r0, sp
    ce34:	eb0000e8 	bl	d1dc <CString::Append(char const*)>
    ce38:	e1a0000d 	mov	r0, sp
    ce3c:	e59f1178 	ldr	r1, [pc, #376]	; cfbc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    ce40:	eb0000e5 	bl	d1dc <CString::Append(char const*)>
    ce44:	e5983000 	ldr	r3, [r8]
    ce48:	e1a00008 	mov	r0, r8
    ce4c:	e5933004 	ldr	r3, [r3, #4]
    ce50:	e12fff33 	blx	r3
    ce54:	e1a01006 	mov	r1, r6
    ce58:	e1a0000d 	mov	r0, sp
    ce5c:	eb0000de 	bl	d1dc <CString::Append(char const*)>
    ce60:	e28d6010 	add	r6, sp, #16
    ce64:	e59f1154 	ldr	r1, [pc, #340]	; cfc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    ce68:	e1a0000d 	mov	r0, sp
    ce6c:	eb0000da 	bl	d1dc <CString::Append(char const*)>
    ce70:	e1a00006 	mov	r0, r6
    ce74:	eb0000a7 	bl	d118 <CString::CString()>
    ce78:	e1a01007 	mov	r1, r7
    ce7c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ce80:	e1a00006 	mov	r0, r6
    ce84:	eb0001ba 	bl	d574 <CString::FormatV(char const*, std::__va_list)>
    ce88:	e1a00006 	mov	r0, r6
    ce8c:	eb0000b7 	bl	d170 <CString::operator char const*() const>
    ce90:	e1a01000 	mov	r1, r0
    ce94:	e1a0000d 	mov	r0, sp
    ce98:	eb0000cf 	bl	d1dc <CString::Append(char const*)>
    ce9c:	e3550000 	cmp	r5, #0
    cea0:	0a000025 	beq	cf3c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    cea4:	e59f1118 	ldr	r1, [pc, #280]	; cfc4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    cea8:	e1a0000d 	mov	r0, sp
    ceac:	eb0000ca 	bl	d1dc <CString::Append(char const*)>
    ceb0:	e1a0000d 	mov	r0, sp
    ceb4:	eb0000ad 	bl	d170 <CString::operator char const*() const>
    ceb8:	e1a01000 	mov	r1, r0
    cebc:	e1a00004 	mov	r0, r4
    cec0:	ebffff67 	bl	cc64 <CLogger::Write(char const*)>
    cec4:	e1a00006 	mov	r0, r6
    cec8:	eb00005e 	bl	d048 <CString::~CString()>
    cecc:	e1a0000d 	mov	r0, sp
    ced0:	eb00005c 	bl	d048 <CString::~CString()>
    ced4:	e28dd020 	add	sp, sp, #32
    ced8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cedc:	e1a0000d 	mov	r0, sp
    cee0:	e59f10e0 	ldr	r1, [pc, #224]	; cfc8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    cee4:	eb0000a7 	bl	d188 <CString::operator=(char const*)>
    cee8:	e5940004 	ldr	r0, [r4, #4]
    ceec:	e3500000 	cmp	r0, #0
    cef0:	1affffc9 	bne	ce1c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    cef4:	e1a01006 	mov	r1, r6
    cef8:	e1a0000d 	mov	r0, sp
    cefc:	eb0000b6 	bl	d1dc <CString::Append(char const*)>
    cf00:	e28d6010 	add	r6, sp, #16
    cf04:	e59f10b4 	ldr	r1, [pc, #180]	; cfc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cf08:	e1a0000d 	mov	r0, sp
    cf0c:	eb0000b2 	bl	d1dc <CString::Append(char const*)>
    cf10:	e1a00006 	mov	r0, r6
    cf14:	eb00007f 	bl	d118 <CString::CString()>
    cf18:	e1a01007 	mov	r1, r7
    cf1c:	e1a00006 	mov	r0, r6
    cf20:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cf24:	eb000192 	bl	d574 <CString::FormatV(char const*, std::__va_list)>
    cf28:	e1a00006 	mov	r0, r6
    cf2c:	eb00008f 	bl	d170 <CString::operator char const*() const>
    cf30:	e1a01000 	mov	r1, r0
    cf34:	e1a0000d 	mov	r0, sp
    cf38:	eb0000a7 	bl	d1dc <CString::Append(char const*)>
    cf3c:	e1a0000d 	mov	r0, sp
    cf40:	e59f1084 	ldr	r1, [pc, #132]	; cfcc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    cf44:	eb0000a4 	bl	d1dc <CString::Append(char const*)>
    cf48:	e1a0000d 	mov	r0, sp
    cf4c:	e59f1070 	ldr	r1, [pc, #112]	; cfc4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    cf50:	eb0000a1 	bl	d1dc <CString::Append(char const*)>
    cf54:	e1a0000d 	mov	r0, sp
    cf58:	eb000084 	bl	d170 <CString::operator char const*() const>
    cf5c:	e1a01000 	mov	r1, r0
    cf60:	e1a00004 	mov	r0, r4
    cf64:	ebffff3e 	bl	cc64 <CLogger::Write(char const*)>
    cf68:	ebfff3fa 	bl	9f58 <halt>
    cf6c:	eaffffd4 	b	cec4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe8>
    cf70:	e1a01006 	mov	r1, r6
    cf74:	e1a0000d 	mov	r0, sp
    cf78:	eb000097 	bl	d1dc <CString::Append(char const*)>
    cf7c:	e28d6010 	add	r6, sp, #16
    cf80:	e1a0000d 	mov	r0, sp
    cf84:	e59f1034 	ldr	r1, [pc, #52]	; cfc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    cf88:	eb000093 	bl	d1dc <CString::Append(char const*)>
    cf8c:	e1a00006 	mov	r0, r6
    cf90:	eb000060 	bl	d118 <CString::CString()>
    cf94:	e1a01007 	mov	r1, r7
    cf98:	e1a00006 	mov	r0, r6
    cf9c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cfa0:	eb000173 	bl	d574 <CString::FormatV(char const*, std::__va_list)>
    cfa4:	e1a00006 	mov	r0, r6
    cfa8:	eb000070 	bl	d170 <CString::operator char const*() const>
    cfac:	e1a01000 	mov	r1, r0
    cfb0:	e1a0000d 	mov	r0, sp
    cfb4:	eb000088 	bl	d1dc <CString::Append(char const*)>
    cfb8:	eaffffb9 	b	cea4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc8>
    cfbc:	00011714 	.word	0x00011714
    cfc0:	00011718 	.word	0x00011718
    cfc4:	000100d8 	.word	0x000100d8
    cfc8:	0001170c 	.word	0x0001170c
    cfcc:	0001171c 	.word	0x0001171c

0000cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    cfd0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    cfd4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cfd8:	e24dd010 	sub	sp, sp, #16
    cfdc:	e28dc018 	add	ip, sp, #24
    cfe0:	e58dc000 	str	ip, [sp]
    cfe4:	e59d3014 	ldr	r3, [sp, #20]
    cfe8:	e58dc00c 	str	ip, [sp, #12]
    cfec:	ebffff7a 	bl	cddc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    cff0:	e28dd010 	add	sp, sp, #16
    cff4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cff8:	e28dd004 	add	sp, sp, #4
    cffc:	e12fff1e 	bx	lr

0000d000 <CLogger::Initialize(CDevice*)>:
    d000:	e92d4010 	push	{r4, lr}
    d004:	e5801008 	str	r1, [r0, #8]
    d008:	e24dd008 	sub	sp, sp, #8
    d00c:	e1a04000 	mov	r4, r0
    d010:	eb00060f 	bl	e854 <CMachineInfo::Get()>
    d014:	eb000599 	bl	e680 <CMachineInfo::GetMachineName() const>
    d018:	e59f101c 	ldr	r1, [pc, #28]	; d03c <CLogger::Initialize(CDevice*)+0x3c>
    d01c:	e58d0000 	str	r0, [sp]
    d020:	e3a02003 	mov	r2, #3
    d024:	e1a00004 	mov	r0, r4
    d028:	e59f3010 	ldr	r3, [pc, #16]	; d040 <CLogger::Initialize(CDevice*)+0x40>
    d02c:	ebffffe7 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d030:	e3a00001 	mov	r0, #1
    d034:	e28dd008 	add	sp, sp, #8
    d038:	e8bd8010 	pop	{r4, pc}
    d03c:	00011724 	.word	0x00011724
    d040:	0001172c 	.word	0x0001172c
    d044:	00000000 	.word	0x00000000

0000d048 <CString::~CString()>:
    d048:	e92d4010 	push	{r4, lr}
    d04c:	e1a04000 	mov	r4, r0
    d050:	e5900004 	ldr	r0, [r0, #4]
    d054:	e59f3014 	ldr	r3, [pc, #20]	; d070 <CString::~CString()+0x28>
    d058:	e3500000 	cmp	r0, #0
    d05c:	e5843000 	str	r3, [r4]
    d060:	0a000000 	beq	d068 <CString::~CString()+0x20>
    d064:	ebfff379 	bl	9e50 <operator delete[](void*)>
    d068:	e1a00004 	mov	r0, r4
    d06c:	e8bd8010 	pop	{r4, pc}
    d070:	00011750 	.word	0x00011750

0000d074 <CString::~CString()>:
    d074:	e92d4010 	push	{r4, lr}
    d078:	e1a04000 	mov	r4, r0
    d07c:	e5900004 	ldr	r0, [r0, #4]
    d080:	e59f301c 	ldr	r3, [pc, #28]	; d0a4 <CString::~CString()+0x30>
    d084:	e3500000 	cmp	r0, #0
    d088:	e5843000 	str	r3, [r4]
    d08c:	0a000000 	beq	d094 <CString::~CString()+0x20>
    d090:	ebfff36e 	bl	9e50 <operator delete[](void*)>
    d094:	e1a00004 	mov	r0, r4
    d098:	ebfff36b 	bl	9e4c <operator delete(void*)>
    d09c:	e1a00004 	mov	r0, r4
    d0a0:	e8bd8010 	pop	{r4, pc}
    d0a4:	00011750 	.word	0x00011750

0000d0a8 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d0a8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    d0ac:	e590300c 	ldr	r3, [r0, #12]
    d0b0:	e5905004 	ldr	r5, [r0, #4]
    d0b4:	e5902008 	ldr	r2, [r0, #8]
    d0b8:	e0655003 	rsb	r5, r5, r3
    d0bc:	e0811005 	add	r1, r1, r5
    d0c0:	e2813001 	add	r3, r1, #1
    d0c4:	e1530002 	cmp	r3, r2
    d0c8:	98bd80f8 	popls	{r3, r4, r5, r6, r7, pc}
    d0cc:	e1a04000 	mov	r4, r0
    d0d0:	e2816041 	add	r6, r1, #65	; 0x41
    d0d4:	e1a00006 	mov	r0, r6
    d0d8:	ebfff35a 	bl	9e48 <operator new[](unsigned int)>
    d0dc:	e3a02000 	mov	r2, #0
    d0e0:	e594300c 	ldr	r3, [r4, #12]
    d0e4:	e1a07000 	mov	r7, r0
    d0e8:	e5c32000 	strb	r2, [r3]
    d0ec:	e5941004 	ldr	r1, [r4, #4]
    d0f0:	eb0008f5 	bl	f4cc <strcpy>
    d0f4:	e5940004 	ldr	r0, [r4, #4]
    d0f8:	e3500000 	cmp	r0, #0
    d0fc:	0a000000 	beq	d104 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x5c>
    d100:	ebfff352 	bl	9e50 <operator delete[](void*)>
    d104:	e0875005 	add	r5, r7, r5
    d108:	e584500c 	str	r5, [r4, #12]
    d10c:	e5847004 	str	r7, [r4, #4]
    d110:	e5846008 	str	r6, [r4, #8]
    d114:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000d118 <CString::CString()>:
    d118:	e3a02000 	mov	r2, #0
    d11c:	e59f1008 	ldr	r1, [pc, #8]	; d12c <CString::CString()+0x14>
    d120:	e5802008 	str	r2, [r0, #8]
    d124:	e8800006 	stm	r0, {r1, r2}
    d128:	e12fff1e 	bx	lr
    d12c:	00011750 	.word	0x00011750

0000d130 <CString::CString(char const*)>:
    d130:	e92d4038 	push	{r3, r4, r5, lr}
    d134:	e1a04000 	mov	r4, r0
    d138:	e59f302c 	ldr	r3, [pc, #44]	; d16c <CString::CString(char const*)+0x3c>
    d13c:	e1a00001 	mov	r0, r1
    d140:	e5843000 	str	r3, [r4]
    d144:	e1a05001 	mov	r5, r1
    d148:	eb0008b1 	bl	f414 <strlen>
    d14c:	e2800001 	add	r0, r0, #1
    d150:	e5840008 	str	r0, [r4, #8]
    d154:	ebfff33b 	bl	9e48 <operator new[](unsigned int)>
    d158:	e1a01005 	mov	r1, r5
    d15c:	e5840004 	str	r0, [r4, #4]
    d160:	eb0008d9 	bl	f4cc <strcpy>
    d164:	e1a00004 	mov	r0, r4
    d168:	e8bd8038 	pop	{r3, r4, r5, pc}
    d16c:	00011750 	.word	0x00011750

0000d170 <CString::operator char const*() const>:
    d170:	e5900004 	ldr	r0, [r0, #4]
    d174:	e59f3008 	ldr	r3, [pc, #8]	; d184 <CString::operator char const*() const+0x14>
    d178:	e3500000 	cmp	r0, #0
    d17c:	01a00003 	moveq	r0, r3
    d180:	e12fff1e 	bx	lr
    d184:	000104d4 	.word	0x000104d4

0000d188 <CString::operator=(char const*)>:
    d188:	e92d4038 	push	{r3, r4, r5, lr}
    d18c:	e1a04000 	mov	r4, r0
    d190:	e5900004 	ldr	r0, [r0, #4]
    d194:	e1a05001 	mov	r5, r1
    d198:	e3500000 	cmp	r0, #0
    d19c:	0a000000 	beq	d1a4 <CString::operator=(char const*)+0x1c>
    d1a0:	ebfff32a 	bl	9e50 <operator delete[](void*)>
    d1a4:	e1a00005 	mov	r0, r5
    d1a8:	eb000899 	bl	f414 <strlen>
    d1ac:	e2800001 	add	r0, r0, #1
    d1b0:	e5840008 	str	r0, [r4, #8]
    d1b4:	ebfff323 	bl	9e48 <operator new[](unsigned int)>
    d1b8:	e1a01005 	mov	r1, r5
    d1bc:	e5840004 	str	r0, [r4, #4]
    d1c0:	eb0008c1 	bl	f4cc <strcpy>
    d1c4:	e5940004 	ldr	r0, [r4, #4]
    d1c8:	e8bd8038 	pop	{r3, r4, r5, pc}

0000d1cc <CString::GetLength() const>:
    d1cc:	e5900004 	ldr	r0, [r0, #4]
    d1d0:	e3500000 	cmp	r0, #0
    d1d4:	012fff1e 	bxeq	lr
    d1d8:	ea00088d 	b	f414 <strlen>

0000d1dc <CString::Append(char const*)>:
    d1dc:	e92d4070 	push	{r4, r5, r6, lr}
    d1e0:	e3a03001 	mov	r3, #1
    d1e4:	e1a04000 	mov	r4, r0
    d1e8:	e5900004 	ldr	r0, [r0, #4]
    d1ec:	e1a06001 	mov	r6, r1
    d1f0:	e3500000 	cmp	r0, #0
    d1f4:	e5843008 	str	r3, [r4, #8]
    d1f8:	0a000003 	beq	d20c <CString::Append(char const*)+0x30>
    d1fc:	eb000884 	bl	f414 <strlen>
    d200:	e5943008 	ldr	r3, [r4, #8]
    d204:	e0830000 	add	r0, r3, r0
    d208:	e5840008 	str	r0, [r4, #8]
    d20c:	e1a00006 	mov	r0, r6
    d210:	eb00087f 	bl	f414 <strlen>
    d214:	e5943008 	ldr	r3, [r4, #8]
    d218:	e0800003 	add	r0, r0, r3
    d21c:	e5840008 	str	r0, [r4, #8]
    d220:	ebfff308 	bl	9e48 <operator new[](unsigned int)>
    d224:	e5941004 	ldr	r1, [r4, #4]
    d228:	e1a05000 	mov	r5, r0
    d22c:	e3510000 	cmp	r1, #0
    d230:	05c01000 	strbeq	r1, [r0]
    d234:	0a000004 	beq	d24c <CString::Append(char const*)+0x70>
    d238:	eb0008a3 	bl	f4cc <strcpy>
    d23c:	e5940004 	ldr	r0, [r4, #4]
    d240:	e3500000 	cmp	r0, #0
    d244:	0a000000 	beq	d24c <CString::Append(char const*)+0x70>
    d248:	ebfff300 	bl	9e50 <operator delete[](void*)>
    d24c:	e1a01006 	mov	r1, r6
    d250:	e1a00005 	mov	r0, r5
    d254:	eb0008bb 	bl	f548 <strcat>
    d258:	e5845004 	str	r5, [r4, #4]
    d25c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d260 <CString::Compare(char const*) const>:
    d260:	e5900004 	ldr	r0, [r0, #4]
    d264:	ea000874 	b	f43c <strcmp>

0000d268 <CString::Find(char) const>:
    d268:	e5902004 	ldr	r2, [r0, #4]
    d26c:	e5d23000 	ldrb	r3, [r2]
    d270:	e3530000 	cmp	r3, #0
    d274:	0a00000b 	beq	d2a8 <CString::Find(char) const+0x40>
    d278:	e6af3073 	sxtb	r3, r3
    d27c:	e1530001 	cmp	r3, r1
    d280:	13a00000 	movne	r0, #0
    d284:	1a000002 	bne	d294 <CString::Find(char) const+0x2c>
    d288:	ea000009 	b	d2b4 <CString::Find(char) const+0x4c>
    d28c:	e15c0001 	cmp	ip, r1
    d290:	0a000006 	beq	d2b0 <CString::Find(char) const+0x48>
    d294:	e5f23001 	ldrb	r3, [r2, #1]!
    d298:	e2800001 	add	r0, r0, #1
    d29c:	e3530000 	cmp	r3, #0
    d2a0:	e6afc073 	sxtb	ip, r3
    d2a4:	1afffff8 	bne	d28c <CString::Find(char) const+0x24>
    d2a8:	e3e00000 	mvn	r0, #0
    d2ac:	e12fff1e 	bx	lr
    d2b0:	e12fff1e 	bx	lr
    d2b4:	e3a00000 	mov	r0, #0
    d2b8:	e12fff1e 	bx	lr

0000d2bc <CString::PutChar(char, unsigned int)>:
    d2bc:	e92d4070 	push	{r4, r5, r6, lr}
    d2c0:	e2524000 	subs	r4, r2, #0
    d2c4:	08bd8070 	popeq	{r4, r5, r6, pc}
    d2c8:	e1a06001 	mov	r6, r1
    d2cc:	e1a01004 	mov	r1, r4
    d2d0:	e1a05000 	mov	r5, r0
    d2d4:	ebffff73 	bl	d0a8 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d2d8:	e2442001 	sub	r2, r4, #1
    d2dc:	e595300c 	ldr	r3, [r5, #12]
    d2e0:	e2422001 	sub	r2, r2, #1
    d2e4:	e2830001 	add	r0, r3, #1
    d2e8:	e3720001 	cmn	r2, #1
    d2ec:	e585000c 	str	r0, [r5, #12]
    d2f0:	e5c36000 	strb	r6, [r3]
    d2f4:	1afffff8 	bne	d2dc <CString::PutChar(char, unsigned int)+0x20>
    d2f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d2fc <CString::PutString(char const*)>:
    d2fc:	e92d4070 	push	{r4, r5, r6, lr}
    d300:	e1a04000 	mov	r4, r0
    d304:	e1a00001 	mov	r0, r1
    d308:	e1a05001 	mov	r5, r1
    d30c:	eb000840 	bl	f414 <strlen>
    d310:	e2506000 	subs	r6, r0, #0
    d314:	0a000002 	beq	d324 <CString::PutString(char const*)+0x28>
    d318:	e1a00004 	mov	r0, r4
    d31c:	e1a01006 	mov	r1, r6
    d320:	ebffff60 	bl	d0a8 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d324:	e1a01005 	mov	r1, r5
    d328:	e594000c 	ldr	r0, [r4, #12]
    d32c:	eb000866 	bl	f4cc <strcpy>
    d330:	e594300c 	ldr	r3, [r4, #12]
    d334:	e0831006 	add	r1, r3, r6
    d338:	e584100c 	str	r1, [r4, #12]
    d33c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d340 <CString::ReserveSpace(unsigned int)>:
    d340:	e3510000 	cmp	r1, #0
    d344:	012fff1e 	bxeq	lr
    d348:	eaffff56 	b	d0a8 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d34c <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d34c:	e1510002 	cmp	r1, r2
    d350:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d354:	e1a06001 	mov	r6, r1
    d358:	e1a08002 	mov	r8, r2
    d35c:	e1a0b000 	mov	fp, r0
    d360:	e1a0a003 	mov	sl, r3
    d364:	23a04001 	movcs	r4, #1
    d368:	3a000024 	bcc	d400 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xb4>
    d36c:	e0040498 	mul	r4, r8, r4
    d370:	e1a00006 	mov	r0, r6
    d374:	e1a01004 	mov	r1, r4
    d378:	eb0007f9 	bl	f364 <__aeabi_uidiv>
    d37c:	e1500008 	cmp	r0, r8
    d380:	e1a05000 	mov	r5, r0
    d384:	2afffff8 	bcs	d36c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    d388:	e1a0700b 	mov	r7, fp
    d38c:	ea000003 	b	d3a0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x54>
    d390:	e1a00006 	mov	r0, r6
    d394:	e1a01004 	mov	r1, r4
    d398:	eb0007f1 	bl	f364 <__aeabi_uidiv>
    d39c:	e1a05000 	mov	r5, r0
    d3a0:	e1a00006 	mov	r0, r6
    d3a4:	e1a01004 	mov	r1, r4
    d3a8:	eb0007f1 	bl	f374 <__aeabi_uidivmod>
    d3ac:	e3550009 	cmp	r5, #9
    d3b0:	e2853030 	add	r3, r5, #48	; 0x30
    d3b4:	e1a06001 	mov	r6, r1
    d3b8:	e1a09007 	mov	r9, r7
    d3bc:	96ef5073 	uxtbls	r5, r3
    d3c0:	9a000005 	bls	d3dc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x90>
    d3c4:	e35a0000 	cmp	sl, #0
    d3c8:	03a03020 	moveq	r3, #32
    d3cc:	13a03000 	movne	r3, #0
    d3d0:	e2855037 	add	r5, r5, #55	; 0x37
    d3d4:	e0835005 	add	r5, r3, r5
    d3d8:	e6ef5075 	uxtb	r5, r5
    d3dc:	e1a00004 	mov	r0, r4
    d3e0:	e4c75001 	strb	r5, [r7], #1
    d3e4:	e1a01008 	mov	r1, r8
    d3e8:	eb0007dd 	bl	f364 <__aeabi_uidiv>
    d3ec:	e2504000 	subs	r4, r0, #0
    d3f0:	1affffe6 	bne	d390 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x44>
    d3f4:	e5c94001 	strb	r4, [r9, #1]
    d3f8:	e1a0000b 	mov	r0, fp
    d3fc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d400:	e1a05001 	mov	r5, r1
    d404:	e3a04001 	mov	r4, #1
    d408:	eaffffde 	b	d388 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000d40c <CString::ftoa(char*, double, unsigned int)>:
    d40c:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d410:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d414:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d418:	ed9f7b50 	vldr	d7, [pc, #320]	; d560 <CString::ftoa(char*, double, unsigned int)+0x154>
    d41c:	ed2d8b04 	vpush	{d8-d9}
    d420:	eeb08b40 	vmov.f64	d8, d0
    d424:	4eb18b40 	vnegmi.f64	d8, d0
    d428:	43a0302d 	movmi	r3, #45	; 0x2d
    d42c:	eeb48bc7 	vcmpe.f64	d8, d7
    d430:	45c03000 	strbmi	r3, [r0]
    d434:	42807001 	addmi	r7, r0, #1
    d438:	51a07000 	movpl	r7, r0
    d43c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d440:	e24dd014 	sub	sp, sp, #20
    d444:	e1a06000 	mov	r6, r0
    d448:	e1a05001 	mov	r5, r1
    d44c:	ca000039 	bgt	d538 <CString::ftoa(char*, double, unsigned int)+0x12c>
    d450:	eebc9bc8 	vcvt.u32.f64	s18, d8
    d454:	e1a00007 	mov	r0, r7
    d458:	ee191a10 	vmov	r1, s18
    d45c:	e3a0200a 	mov	r2, #10
    d460:	e3a03000 	mov	r3, #0
    d464:	ebffffb8 	bl	d34c <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d468:	e3550000 	cmp	r5, #0
    d46c:	1a000003 	bne	d480 <CString::ftoa(char*, double, unsigned int)+0x74>
    d470:	e1a00006 	mov	r0, r6
    d474:	e28dd014 	add	sp, sp, #20
    d478:	ecbd8b04 	vpop	{d8-d9}
    d47c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d480:	e1a00007 	mov	r0, r7
    d484:	eb0007e2 	bl	f414 <strlen>
    d488:	e3550009 	cmp	r5, #9
    d48c:	23a05009 	movcs	r5, #9
    d490:	e3a0302e 	mov	r3, #46	; 0x2e
    d494:	e0874000 	add	r4, r7, r0
    d498:	e3550001 	cmp	r5, #1
    d49c:	e7c73000 	strb	r3, [r7, r0]
    d4a0:	e2847001 	add	r7, r4, #1
    d4a4:	0a00002a 	beq	d554 <CString::ftoa(char*, double, unsigned int)+0x148>
    d4a8:	e3a02002 	mov	r2, #2
    d4ac:	e3a0300a 	mov	r3, #10
    d4b0:	e2822001 	add	r2, r2, #1
    d4b4:	e0833103 	add	r3, r3, r3, lsl #2
    d4b8:	e1520005 	cmp	r2, r5
    d4bc:	e1a03083 	lsl	r3, r3, #1
    d4c0:	9afffffa 	bls	d4b0 <CString::ftoa(char*, double, unsigned int)+0xa4>
    d4c4:	ee073a90 	vmov	s15, r3
    d4c8:	eeb87b67 	vcvt.f64.u32	d7, s15
    d4cc:	eeb86b49 	vcvt.f64.u32	d6, s18
    d4d0:	ee388b46 	vsub.f64	d8, d8, d6
    d4d4:	ee287b07 	vmul.f64	d7, d8, d7
    d4d8:	eefc7bc7 	vcvt.u32.f64	s15, d7
    d4dc:	e3a0200a 	mov	r2, #10
    d4e0:	ee171a90 	vmov	r1, s15
    d4e4:	e3a03000 	mov	r3, #0
    d4e8:	e28d0004 	add	r0, sp, #4
    d4ec:	ebffff96 	bl	d34c <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d4f0:	e28d0004 	add	r0, sp, #4
    d4f4:	eb0007c6 	bl	f414 <strlen>
    d4f8:	e0550000 	subs	r0, r5, r0
    d4fc:	0a000006 	beq	d51c <CString::ftoa(char*, double, unsigned int)+0x110>
    d500:	e1a03004 	mov	r3, r4
    d504:	e3a01030 	mov	r1, #48	; 0x30
    d508:	e0842000 	add	r2, r4, r0
    d50c:	e5e31001 	strb	r1, [r3, #1]!
    d510:	e1530002 	cmp	r3, r2
    d514:	1afffffc 	bne	d50c <CString::ftoa(char*, double, unsigned int)+0x100>
    d518:	e0877000 	add	r7, r7, r0
    d51c:	e1a00007 	mov	r0, r7
    d520:	e28d1004 	add	r1, sp, #4
    d524:	eb0007e8 	bl	f4cc <strcpy>
    d528:	e1a00006 	mov	r0, r6
    d52c:	e28dd014 	add	sp, sp, #20
    d530:	ecbd8b04 	vpop	{d8-d9}
    d534:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d538:	e1a00007 	mov	r0, r7
    d53c:	e59f102c 	ldr	r1, [pc, #44]	; d570 <CString::ftoa(char*, double, unsigned int)+0x164>
    d540:	eb0007e1 	bl	f4cc <strcpy>
    d544:	e1a00006 	mov	r0, r6
    d548:	e28dd014 	add	sp, sp, #20
    d54c:	ecbd8b04 	vpop	{d8-d9}
    d550:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d554:	ed9f7b03 	vldr	d7, [pc, #12]	; d568 <CString::ftoa(char*, double, unsigned int)+0x15c>
    d558:	eaffffdb 	b	d4cc <CString::ftoa(char*, double, unsigned int)+0xc0>
    d55c:	e1a00000 	nop			; (mov r0, r0)
    d560:	ffe00000 	.word	0xffe00000
    d564:	41efffff 	.word	0x41efffff
    d568:	00000000 	.word	0x00000000
    d56c:	40240000 	.word	0x40240000
    d570:	00011758 	.word	0x00011758

0000d574 <CString::FormatV(char const*, std::__va_list)>:
    d574:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d578:	e1a06000 	mov	r6, r0
    d57c:	e5900004 	ldr	r0, [r0, #4]
    d580:	e24dd018 	sub	sp, sp, #24
    d584:	e3500000 	cmp	r0, #0
    d588:	e1a05001 	mov	r5, r1
    d58c:	e1a07002 	mov	r7, r2
    d590:	0a000000 	beq	d598 <CString::FormatV(char const*, std::__va_list)+0x24>
    d594:	ebfff22d 	bl	9e50 <operator delete[](void*)>
    d598:	e3a00040 	mov	r0, #64	; 0x40
    d59c:	e5860008 	str	r0, [r6, #8]
    d5a0:	ebfff228 	bl	9e48 <operator new[](unsigned int)>
    d5a4:	e5860004 	str	r0, [r6, #4]
    d5a8:	e586000c 	str	r0, [r6, #12]
    d5ac:	e5d51000 	ldrb	r1, [r5]
    d5b0:	e3510000 	cmp	r1, #0
    d5b4:	0a000067 	beq	d758 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    d5b8:	e6af1071 	sxtb	r1, r1
    d5bc:	e3510025 	cmp	r1, #37	; 0x25
    d5c0:	1a0000b1 	bne	d88c <CString::FormatV(char const*, std::__va_list)+0x318>
    d5c4:	e5d53001 	ldrb	r3, [r5, #1]
    d5c8:	e6af1073 	sxtb	r1, r3
    d5cc:	e3510025 	cmp	r1, #37	; 0x25
    d5d0:	0a0000ea 	beq	d980 <CString::FormatV(char const*, std::__va_list)+0x40c>
    d5d4:	e351002d 	cmp	r1, #45	; 0x2d
    d5d8:	05d53002 	ldrbeq	r3, [r5, #2]
    d5dc:	12855001 	addne	r5, r5, #1
    d5e0:	02855002 	addeq	r5, r5, #2
    d5e4:	13a08000 	movne	r8, #0
    d5e8:	03a08001 	moveq	r8, #1
    d5ec:	e3530030 	cmp	r3, #48	; 0x30
    d5f0:	03a09001 	moveq	r9, #1
    d5f4:	05d53001 	ldrbeq	r3, [r5, #1]
    d5f8:	13a09000 	movne	r9, #0
    d5fc:	e2432030 	sub	r2, r3, #48	; 0x30
    d600:	00855009 	addeq	r5, r5, r9
    d604:	e3520009 	cmp	r2, #9
    d608:	e3a04000 	mov	r4, #0
    d60c:	8a000007 	bhi	d630 <CString::FormatV(char const*, std::__va_list)+0xbc>
    d610:	e6af2073 	sxtb	r2, r3
    d614:	e5f53001 	ldrb	r3, [r5, #1]!
    d618:	e0844104 	add	r4, r4, r4, lsl #2
    d61c:	e2431030 	sub	r1, r3, #48	; 0x30
    d620:	e0824084 	add	r4, r2, r4, lsl #1
    d624:	e3510009 	cmp	r1, #9
    d628:	e2444030 	sub	r4, r4, #48	; 0x30
    d62c:	9afffff7 	bls	d610 <CString::FormatV(char const*, std::__va_list)+0x9c>
    d630:	e6af3073 	sxtb	r3, r3
    d634:	e353002e 	cmp	r3, #46	; 0x2e
    d638:	0a0000c1 	beq	d944 <CString::FormatV(char const*, std::__va_list)+0x3d0>
    d63c:	e3a02006 	mov	r2, #6
    d640:	e5d53000 	ldrb	r3, [r5]
    d644:	e6af1073 	sxtb	r1, r3
    d648:	e351006c 	cmp	r1, #108	; 0x6c
    d64c:	0a000092 	beq	d89c <CString::FormatV(char const*, std::__va_list)+0x328>
    d650:	e2411058 	sub	r1, r1, #88	; 0x58
    d654:	e3510020 	cmp	r1, #32
    d658:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    d65c:	ea000081 	b	d868 <CString::FormatV(char const*, std::__va_list)+0x2f4>
    d660:	0000d938 	.word	0x0000d938
    d664:	0000d868 	.word	0x0000d868
    d668:	0000d868 	.word	0x0000d868
    d66c:	0000d868 	.word	0x0000d868
    d670:	0000d868 	.word	0x0000d868
    d674:	0000d868 	.word	0x0000d868
    d678:	0000d868 	.word	0x0000d868
    d67c:	0000d868 	.word	0x0000d868
    d680:	0000d868 	.word	0x0000d868
    d684:	0000d868 	.word	0x0000d868
    d688:	0000d868 	.word	0x0000d868
    d68c:	0000d7f4 	.word	0x0000d7f4
    d690:	0000d7a4 	.word	0x0000d7a4
    d694:	0000d868 	.word	0x0000d868
    d698:	0000d768 	.word	0x0000d768
    d69c:	0000d868 	.word	0x0000d868
    d6a0:	0000d868 	.word	0x0000d868
    d6a4:	0000d868 	.word	0x0000d868
    d6a8:	0000d868 	.word	0x0000d868
    d6ac:	0000d868 	.word	0x0000d868
    d6b0:	0000d868 	.word	0x0000d868
    d6b4:	0000d868 	.word	0x0000d868
    d6b8:	0000d868 	.word	0x0000d868
    d6bc:	0000d6e4 	.word	0x0000d6e4
    d6c0:	0000d868 	.word	0x0000d868
    d6c4:	0000d868 	.word	0x0000d868
    d6c8:	0000d868 	.word	0x0000d868
    d6cc:	0000d834 	.word	0x0000d834
    d6d0:	0000d868 	.word	0x0000d868
    d6d4:	0000d994 	.word	0x0000d994
    d6d8:	0000d868 	.word	0x0000d868
    d6dc:	0000d868 	.word	0x0000d868
    d6e0:	0000d938 	.word	0x0000d938
    d6e4:	e3a02008 	mov	r2, #8
    d6e8:	e3a0306f 	mov	r3, #111	; 0x6f
    d6ec:	e2433058 	sub	r3, r3, #88	; 0x58
    d6f0:	e16f3f13 	clz	r3, r3
    d6f4:	e5971000 	ldr	r1, [r7]
    d6f8:	e1a032a3 	lsr	r3, r3, #5
    d6fc:	e1a0000d 	mov	r0, sp
    d700:	ebffff11 	bl	d34c <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d704:	e1a0000d 	mov	r0, sp
    d708:	eb000741 	bl	f414 <strlen>
    d70c:	e3580000 	cmp	r8, #0
    d710:	e2877004 	add	r7, r7, #4
    d714:	e1a0a000 	mov	sl, r0
    d718:	1a0000b4 	bne	d9f0 <CString::FormatV(char const*, std::__va_list)+0x47c>
    d71c:	e1500004 	cmp	r0, r4
    d720:	2a000005 	bcs	d73c <CString::FormatV(char const*, std::__va_list)+0x1c8>
    d724:	e3590000 	cmp	r9, #0
    d728:	e0602004 	rsb	r2, r0, r4
    d72c:	13a01030 	movne	r1, #48	; 0x30
    d730:	03a01020 	moveq	r1, #32
    d734:	e1a00006 	mov	r0, r6
    d738:	ebfffedf 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d73c:	e1a00006 	mov	r0, r6
    d740:	e1a0100d 	mov	r1, sp
    d744:	ebfffeec 	bl	d2fc <CString::PutString(char const*)>
    d748:	e2855001 	add	r5, r5, #1
    d74c:	e5d51000 	ldrb	r1, [r5]
    d750:	e3510000 	cmp	r1, #0
    d754:	1affff97 	bne	d5b8 <CString::FormatV(char const*, std::__va_list)+0x44>
    d758:	e596300c 	ldr	r3, [r6, #12]
    d75c:	e5c31000 	strb	r1, [r3]
    d760:	e28dd018 	add	sp, sp, #24
    d764:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d768:	e2877007 	add	r7, r7, #7
    d76c:	e3c77007 	bic	r7, r7, #7
    d770:	ed970b00 	vldr	d0, [r7]
    d774:	e1a01002 	mov	r1, r2
    d778:	e1a0000d 	mov	r0, sp
    d77c:	ebffff22 	bl	d40c <CString::ftoa(char*, double, unsigned int)>
    d780:	e1a0000d 	mov	r0, sp
    d784:	eb000722 	bl	f414 <strlen>
    d788:	e3580000 	cmp	r8, #0
    d78c:	e2877008 	add	r7, r7, #8
    d790:	e1a09000 	mov	r9, r0
    d794:	1a00009d 	bne	da10 <CString::FormatV(char const*, std::__va_list)+0x49c>
    d798:	e1500004 	cmp	r0, r4
    d79c:	2affffe6 	bcs	d73c <CString::FormatV(char const*, std::__va_list)+0x1c8>
    d7a0:	ea00000e 	b	d7e0 <CString::FormatV(char const*, std::__va_list)+0x26c>
    d7a4:	e5971000 	ldr	r1, [r7]
    d7a8:	e2877004 	add	r7, r7, #4
    d7ac:	e3510000 	cmp	r1, #0
    d7b0:	ba00007a 	blt	d9a0 <CString::FormatV(char const*, std::__va_list)+0x42c>
    d7b4:	e3a0200a 	mov	r2, #10
    d7b8:	e3a03000 	mov	r3, #0
    d7bc:	e1a0000d 	mov	r0, sp
    d7c0:	ebfffee1 	bl	d34c <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d7c4:	e1a0000d 	mov	r0, sp
    d7c8:	eb000711 	bl	f414 <strlen>
    d7cc:	e3580000 	cmp	r8, #0
    d7d0:	e1a09000 	mov	r9, r0
    d7d4:	1a00007f 	bne	d9d8 <CString::FormatV(char const*, std::__va_list)+0x464>
    d7d8:	e1540000 	cmp	r4, r0
    d7dc:	9affffd6 	bls	d73c <CString::FormatV(char const*, std::__va_list)+0x1c8>
    d7e0:	e0692004 	rsb	r2, r9, r4
    d7e4:	e1a00006 	mov	r0, r6
    d7e8:	e3a01020 	mov	r1, #32
    d7ec:	ebfffeb2 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d7f0:	eaffffd1 	b	d73c <CString::FormatV(char const*, std::__va_list)+0x1c8>
    d7f4:	e3580000 	cmp	r8, #0
    d7f8:	e2878004 	add	r8, r7, #4
    d7fc:	e5d77000 	ldrb	r7, [r7]
    d800:	1a000096 	bne	da60 <CString::FormatV(char const*, std::__va_list)+0x4ec>
    d804:	e3540001 	cmp	r4, #1
    d808:	9a000003 	bls	d81c <CString::FormatV(char const*, std::__va_list)+0x2a8>
    d80c:	e2442001 	sub	r2, r4, #1
    d810:	e1a00006 	mov	r0, r6
    d814:	e3a01020 	mov	r1, #32
    d818:	ebfffea7 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d81c:	e6af1077 	sxtb	r1, r7
    d820:	e1a00006 	mov	r0, r6
    d824:	e3a02001 	mov	r2, #1
    d828:	e1a07008 	mov	r7, r8
    d82c:	ebfffea2 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d830:	eaffffc4 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d834:	e5979000 	ldr	r9, [r7]
    d838:	e2877004 	add	r7, r7, #4
    d83c:	e1a00009 	mov	r0, r9
    d840:	eb0006f3 	bl	f414 <strlen>
    d844:	e3580000 	cmp	r8, #0
    d848:	e1a0a000 	mov	sl, r0
    d84c:	1a000079 	bne	da38 <CString::FormatV(char const*, std::__va_list)+0x4c4>
    d850:	e1500004 	cmp	r0, r4
    d854:	3a00008e 	bcc	da94 <CString::FormatV(char const*, std::__va_list)+0x520>
    d858:	e1a01009 	mov	r1, r9
    d85c:	e1a00006 	mov	r0, r6
    d860:	ebfffea5 	bl	d2fc <CString::PutString(char const*)>
    d864:	eaffffb7 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d868:	e1a00006 	mov	r0, r6
    d86c:	e3a01025 	mov	r1, #37	; 0x25
    d870:	e3a02001 	mov	r2, #1
    d874:	ebfffe90 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d878:	e1a00006 	mov	r0, r6
    d87c:	e1d510d0 	ldrsb	r1, [r5]
    d880:	e3a02001 	mov	r2, #1
    d884:	ebfffe8c 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d888:	eaffffae 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d88c:	e1a00006 	mov	r0, r6
    d890:	e3a02001 	mov	r2, #1
    d894:	ebfffe88 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d898:	eaffffaa 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d89c:	e1d530d1 	ldrsb	r3, [r5, #1]
    d8a0:	e2855001 	add	r5, r5, #1
    d8a4:	e2431058 	sub	r1, r3, #88	; 0x58
    d8a8:	e3510020 	cmp	r1, #32
    d8ac:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    d8b0:	eaffffec 	b	d868 <CString::FormatV(char const*, std::__va_list)+0x2f4>
    d8b4:	0000d93c 	.word	0x0000d93c
    d8b8:	0000d868 	.word	0x0000d868
    d8bc:	0000d868 	.word	0x0000d868
    d8c0:	0000d868 	.word	0x0000d868
    d8c4:	0000d868 	.word	0x0000d868
    d8c8:	0000d868 	.word	0x0000d868
    d8cc:	0000d868 	.word	0x0000d868
    d8d0:	0000d868 	.word	0x0000d868
    d8d4:	0000d868 	.word	0x0000d868
    d8d8:	0000d868 	.word	0x0000d868
    d8dc:	0000d868 	.word	0x0000d868
    d8e0:	0000d7f4 	.word	0x0000d7f4
    d8e4:	0000d7a4 	.word	0x0000d7a4
    d8e8:	0000d868 	.word	0x0000d868
    d8ec:	0000d768 	.word	0x0000d768
    d8f0:	0000d868 	.word	0x0000d868
    d8f4:	0000d868 	.word	0x0000d868
    d8f8:	0000d868 	.word	0x0000d868
    d8fc:	0000d868 	.word	0x0000d868
    d900:	0000d868 	.word	0x0000d868
    d904:	0000d868 	.word	0x0000d868
    d908:	0000d868 	.word	0x0000d868
    d90c:	0000d868 	.word	0x0000d868
    d910:	0000d6e4 	.word	0x0000d6e4
    d914:	0000d868 	.word	0x0000d868
    d918:	0000d868 	.word	0x0000d868
    d91c:	0000d868 	.word	0x0000d868
    d920:	0000d834 	.word	0x0000d834
    d924:	0000d868 	.word	0x0000d868
    d928:	0000da08 	.word	0x0000da08
    d92c:	0000d868 	.word	0x0000d868
    d930:	0000d868 	.word	0x0000d868
    d934:	0000d93c 	.word	0x0000d93c
    d938:	e6af3073 	sxtb	r3, r3
    d93c:	e3a02010 	mov	r2, #16
    d940:	eaffff69 	b	d6ec <CString::FormatV(char const*, std::__va_list)+0x178>
    d944:	e5d53001 	ldrb	r3, [r5, #1]
    d948:	e2855001 	add	r5, r5, #1
    d94c:	e2432030 	sub	r2, r3, #48	; 0x30
    d950:	e3520009 	cmp	r2, #9
    d954:	e3a02000 	mov	r2, #0
    d958:	8affff39 	bhi	d644 <CString::FormatV(char const*, std::__va_list)+0xd0>
    d95c:	e6af0073 	sxtb	r0, r3
    d960:	e5f53001 	ldrb	r3, [r5, #1]!
    d964:	e0822102 	add	r2, r2, r2, lsl #2
    d968:	e243c030 	sub	ip, r3, #48	; 0x30
    d96c:	e0802082 	add	r2, r0, r2, lsl #1
    d970:	e35c0009 	cmp	ip, #9
    d974:	e2422030 	sub	r2, r2, #48	; 0x30
    d978:	9afffff7 	bls	d95c <CString::FormatV(char const*, std::__va_list)+0x3e8>
    d97c:	eaffff30 	b	d644 <CString::FormatV(char const*, std::__va_list)+0xd0>
    d980:	e1a00006 	mov	r0, r6
    d984:	e3a02001 	mov	r2, #1
    d988:	e2855002 	add	r5, r5, #2
    d98c:	ebfffe4a 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d990:	eaffff05 	b	d5ac <CString::FormatV(char const*, std::__va_list)+0x38>
    d994:	e3a0200a 	mov	r2, #10
    d998:	e3a03075 	mov	r3, #117	; 0x75
    d99c:	eaffff52 	b	d6ec <CString::FormatV(char const*, std::__va_list)+0x178>
    d9a0:	e2611000 	rsb	r1, r1, #0
    d9a4:	e3a0200a 	mov	r2, #10
    d9a8:	e3a03000 	mov	r3, #0
    d9ac:	e1a0000d 	mov	r0, sp
    d9b0:	ebfffe65 	bl	d34c <CString::ntoa(char*, unsigned long, unsigned int, int)>
    d9b4:	e1a0000d 	mov	r0, sp
    d9b8:	eb000695 	bl	f414 <strlen>
    d9bc:	e3580000 	cmp	r8, #0
    d9c0:	e2809001 	add	r9, r0, #1
    d9c4:	0a000037 	beq	daa8 <CString::FormatV(char const*, std::__va_list)+0x534>
    d9c8:	e1a00006 	mov	r0, r6
    d9cc:	e3a0102d 	mov	r1, #45	; 0x2d
    d9d0:	e3a02001 	mov	r2, #1
    d9d4:	ebfffe38 	bl	d2bc <CString::PutChar(char, unsigned int)>
    d9d8:	e1a00006 	mov	r0, r6
    d9dc:	e1a0100d 	mov	r1, sp
    d9e0:	ebfffe45 	bl	d2fc <CString::PutString(char const*)>
    d9e4:	e1540009 	cmp	r4, r9
    d9e8:	9affff56 	bls	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d9ec:	ea00000c 	b	da24 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    d9f0:	e1a00006 	mov	r0, r6
    d9f4:	e1a0100d 	mov	r1, sp
    d9f8:	ebfffe3f 	bl	d2fc <CString::PutString(char const*)>
    d9fc:	e15a0004 	cmp	sl, r4
    da00:	2affff50 	bcs	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da04:	ea000010 	b	da4c <CString::FormatV(char const*, std::__va_list)+0x4d8>
    da08:	e3a0200a 	mov	r2, #10
    da0c:	eaffff36 	b	d6ec <CString::FormatV(char const*, std::__va_list)+0x178>
    da10:	e1a00006 	mov	r0, r6
    da14:	e1a0100d 	mov	r1, sp
    da18:	ebfffe37 	bl	d2fc <CString::PutString(char const*)>
    da1c:	e1590004 	cmp	r9, r4
    da20:	2affff48 	bcs	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da24:	e0692004 	rsb	r2, r9, r4
    da28:	e1a00006 	mov	r0, r6
    da2c:	e3a01020 	mov	r1, #32
    da30:	ebfffe21 	bl	d2bc <CString::PutChar(char, unsigned int)>
    da34:	eaffff43 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da38:	e1a01009 	mov	r1, r9
    da3c:	e1a00006 	mov	r0, r6
    da40:	ebfffe2d 	bl	d2fc <CString::PutString(char const*)>
    da44:	e15a0004 	cmp	sl, r4
    da48:	2affff3e 	bcs	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da4c:	e06a2004 	rsb	r2, sl, r4
    da50:	e1a00006 	mov	r0, r6
    da54:	e3a01020 	mov	r1, #32
    da58:	ebfffe17 	bl	d2bc <CString::PutChar(char, unsigned int)>
    da5c:	eaffff39 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da60:	e6af1077 	sxtb	r1, r7
    da64:	e1a00006 	mov	r0, r6
    da68:	e3a02001 	mov	r2, #1
    da6c:	ebfffe12 	bl	d2bc <CString::PutChar(char, unsigned int)>
    da70:	e3540001 	cmp	r4, #1
    da74:	91a07008 	movls	r7, r8
    da78:	9affff32 	bls	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da7c:	e2442001 	sub	r2, r4, #1
    da80:	e1a00006 	mov	r0, r6
    da84:	e3a01020 	mov	r1, #32
    da88:	e1a07008 	mov	r7, r8
    da8c:	ebfffe0a 	bl	d2bc <CString::PutChar(char, unsigned int)>
    da90:	eaffff2c 	b	d748 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    da94:	e0602004 	rsb	r2, r0, r4
    da98:	e3a01020 	mov	r1, #32
    da9c:	e1a00006 	mov	r0, r6
    daa0:	ebfffe05 	bl	d2bc <CString::PutChar(char, unsigned int)>
    daa4:	eaffff6b 	b	d858 <CString::FormatV(char const*, std::__va_list)+0x2e4>
    daa8:	e1540009 	cmp	r4, r9
    daac:	8a000004 	bhi	dac4 <CString::FormatV(char const*, std::__va_list)+0x550>
    dab0:	e1a00006 	mov	r0, r6
    dab4:	e3a0102d 	mov	r1, #45	; 0x2d
    dab8:	e3a02001 	mov	r2, #1
    dabc:	ebfffdfe 	bl	d2bc <CString::PutChar(char, unsigned int)>
    dac0:	eaffff1d 	b	d73c <CString::FormatV(char const*, std::__va_list)+0x1c8>
    dac4:	e0692004 	rsb	r2, r9, r4
    dac8:	e1a00006 	mov	r0, r6
    dacc:	e3a01020 	mov	r1, #32
    dad0:	ebfffdf9 	bl	d2bc <CString::PutChar(char, unsigned int)>
    dad4:	eafffff5 	b	dab0 <CString::FormatV(char const*, std::__va_list)+0x53c>

0000dad8 <CString::Format(char const*, ...)>:
    dad8:	e92d000e 	push	{r1, r2, r3}
    dadc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dae0:	e24dd008 	sub	sp, sp, #8
    dae4:	e28d3010 	add	r3, sp, #16
    dae8:	e1a02003 	mov	r2, r3
    daec:	e59d100c 	ldr	r1, [sp, #12]
    daf0:	e58d3004 	str	r3, [sp, #4]
    daf4:	ebfffe9e 	bl	d574 <CString::FormatV(char const*, std::__va_list)>
    daf8:	e28dd008 	add	sp, sp, #8
    dafc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    db00:	e28dd00c 	add	sp, sp, #12
    db04:	e12fff1e 	bx	lr

0000db08 <DelayLoop>:
    db08:	e2500001 	subs	r0, r0, #1
    db0c:	8afffffd 	bhi	db08 <DelayLoop>
    db10:	e1a0f00e 	mov	pc, lr
    db14:	e1a00000 	nop			; (mov r0, r0)

0000db18 <CInterruptSystem::CInterruptSystem()>:
    db18:	e280cf47 	add	ip, r0, #284	; 0x11c
    db1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    db20:	e1a0100c 	mov	r1, ip
    db24:	e1a0e000 	mov	lr, r0
    db28:	e3a02000 	mov	r2, #0
    db2c:	e2403004 	sub	r3, r0, #4
    db30:	e5a32004 	str	r2, [r3, #4]!
    db34:	e153000c 	cmp	r3, ip
    db38:	e5a12004 	str	r2, [r1, #4]!
    db3c:	1afffffb 	bne	db30 <CInterruptSystem::CInterruptSystem()+0x18>
    db40:	e59f3008 	ldr	r3, [pc, #8]	; db50 <CInterruptSystem::CInterruptSystem()+0x38>
    db44:	e1a0000e 	mov	r0, lr
    db48:	e583e000 	str	lr, [r3]
    db4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    db50:	00012924 	.word	0x00012924

0000db54 <CInterruptSystem::~CInterruptSystem()>:
    db54:	e3a02000 	mov	r2, #0
    db58:	e59f3004 	ldr	r3, [pc, #4]	; db64 <CInterruptSystem::~CInterruptSystem()+0x10>
    db5c:	e5832000 	str	r2, [r3]
    db60:	e12fff1e 	bx	lr
    db64:	00012924 	.word	0x00012924

0000db68 <CInterruptSystem::Initialize()>:
    db68:	e92d4010 	push	{r4, lr}
    db6c:	e3a04000 	mov	r4, #0
    db70:	e59f303c 	ldr	r3, [pc, #60]	; dbb4 <CInterruptSystem::Initialize()+0x4c>
    db74:	e1a03143 	asr	r3, r3, #2
    db78:	e2433002 	sub	r3, r3, #2
    db7c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    db80:	e5843018 	str	r3, [r4, #24]
    db84:	ebfff0ea 	bl	9f34 <SyncDataAndInstructionCache>
    db88:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    db8c:	e3e02000 	mvn	r2, #0
    db90:	e59f3020 	ldr	r3, [pc, #32]	; dbb8 <CInterruptSystem::Initialize()+0x50>
    db94:	e583420c 	str	r4, [r3, #524]	; 0x20c
    db98:	e583221c 	str	r2, [r3, #540]	; 0x21c
    db9c:	e5832220 	str	r2, [r3, #544]	; 0x220
    dba0:	e5832224 	str	r2, [r3, #548]	; 0x224
    dba4:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    dba8:	f1080080 	cpsie	i
    dbac:	e3a00001 	mov	r0, #1
    dbb0:	e8bd8010 	pop	{r4, pc}
    dbb4:	0000fd68 	.word	0x0000fd68
    dbb8:	2000b000 	.word	0x2000b000

0000dbbc <CInterruptSystem::EnableIRQ(unsigned int)>:
    dbbc:	e92d4010 	push	{r4, lr}
    dbc0:	e3a03000 	mov	r3, #0
    dbc4:	e1a04000 	mov	r4, r0
    dbc8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    dbcc:	e3500047 	cmp	r0, #71	; 0x47
    dbd0:	8a00000e 	bhi	dc10 <CInterruptSystem::EnableIRQ(unsigned int)+0x54>
    dbd4:	e350001f 	cmp	r0, #31
    dbd8:	8a000007 	bhi	dbfc <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    dbdc:	e59f2044 	ldr	r2, [pc, #68]	; dc28 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    dbe0:	e3a03001 	mov	r3, #1
    dbe4:	e204401f 	and	r4, r4, #31
    dbe8:	e1a04413 	lsl	r4, r3, r4
    dbec:	e5824000 	str	r4, [r2]
    dbf0:	e3a03000 	mov	r3, #0
    dbf4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dbf8:	e8bd8010 	pop	{r4, pc}
    dbfc:	e59f3028 	ldr	r3, [pc, #40]	; dc2c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    dc00:	e350003f 	cmp	r0, #63	; 0x3f
    dc04:	e59f2024 	ldr	r2, [pc, #36]	; dc30 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    dc08:	91a02003 	movls	r2, r3
    dc0c:	eafffff3 	b	dbe0 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    dc10:	e3a02074 	mov	r2, #116	; 0x74
    dc14:	e59f0018 	ldr	r0, [pc, #24]	; dc34 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    dc18:	e59f1018 	ldr	r1, [pc, #24]	; dc38 <CInterruptSystem::EnableIRQ(unsigned int)+0x7c>
    dc1c:	ebfffa94 	bl	c674 <assertion_failed>
    dc20:	e59f2008 	ldr	r2, [pc, #8]	; dc30 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    dc24:	eaffffed 	b	dbe0 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    dc28:	2000b210 	.word	0x2000b210
    dc2c:	2000b214 	.word	0x2000b214
    dc30:	2000b218 	.word	0x2000b218
    dc34:	00011764 	.word	0x00011764
    dc38:	00011778 	.word	0x00011778

0000dc3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    dc3c:	e3510047 	cmp	r1, #71	; 0x47
    dc40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dc44:	e1a04001 	mov	r4, r1
    dc48:	e1a05000 	mov	r5, r0
    dc4c:	e1a08002 	mov	r8, r2
    dc50:	e1a07003 	mov	r7, r3
    dc54:	8a00000c 	bhi	dc8c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
    dc58:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    dc5c:	e0856104 	add	r6, r5, r4, lsl #2
    dc60:	e3530000 	cmp	r3, #0
    dc64:	0a000003 	beq	dc78 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    dc68:	e59f0030 	ldr	r0, [pc, #48]	; dca0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
    dc6c:	e59f1030 	ldr	r1, [pc, #48]	; dca4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    dc70:	e3a0205d 	mov	r2, #93	; 0x5d
    dc74:	ebfffa7e 	bl	c674 <assertion_failed>
    dc78:	e7858104 	str	r8, [r5, r4, lsl #2]
    dc7c:	e1a00004 	mov	r0, r4
    dc80:	e5867120 	str	r7, [r6, #288]	; 0x120
    dc84:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    dc88:	eaffffcb 	b	dbbc <CInterruptSystem::EnableIRQ(unsigned int)>
    dc8c:	e59f0014 	ldr	r0, [pc, #20]	; dca8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
    dc90:	e59f100c 	ldr	r1, [pc, #12]	; dca4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
    dc94:	e3a0205c 	mov	r2, #92	; 0x5c
    dc98:	ebfffa75 	bl	c674 <assertion_failed>
    dc9c:	eaffffed 	b	dc58 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    dca0:	00011788 	.word	0x00011788
    dca4:	00011778 	.word	0x00011778
    dca8:	00011764 	.word	0x00011764

0000dcac <CInterruptSystem::DisableIRQ(unsigned int)>:
    dcac:	e92d4010 	push	{r4, lr}
    dcb0:	e3a03000 	mov	r3, #0
    dcb4:	e1a04000 	mov	r4, r0
    dcb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    dcbc:	e3500047 	cmp	r0, #71	; 0x47
    dcc0:	8a00000e 	bhi	dd00 <CInterruptSystem::DisableIRQ(unsigned int)+0x54>
    dcc4:	e350001f 	cmp	r0, #31
    dcc8:	8a000007 	bhi	dcec <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    dccc:	e59f2044 	ldr	r2, [pc, #68]	; dd18 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    dcd0:	e3a03001 	mov	r3, #1
    dcd4:	e204401f 	and	r4, r4, #31
    dcd8:	e1a04413 	lsl	r4, r3, r4
    dcdc:	e5824000 	str	r4, [r2]
    dce0:	e3a03000 	mov	r3, #0
    dce4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dce8:	e8bd8010 	pop	{r4, pc}
    dcec:	e59f3028 	ldr	r3, [pc, #40]	; dd1c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    dcf0:	e350003f 	cmp	r0, #63	; 0x3f
    dcf4:	e59f2024 	ldr	r2, [pc, #36]	; dd20 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    dcf8:	91a02003 	movls	r2, r3
    dcfc:	eafffff3 	b	dcd0 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    dd00:	e3a0207f 	mov	r2, #127	; 0x7f
    dd04:	e59f0018 	ldr	r0, [pc, #24]	; dd24 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    dd08:	e59f1018 	ldr	r1, [pc, #24]	; dd28 <CInterruptSystem::DisableIRQ(unsigned int)+0x7c>
    dd0c:	ebfffa58 	bl	c674 <assertion_failed>
    dd10:	e59f2008 	ldr	r2, [pc, #8]	; dd20 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    dd14:	eaffffed 	b	dcd0 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    dd18:	2000b21c 	.word	0x2000b21c
    dd1c:	2000b220 	.word	0x2000b220
    dd20:	2000b224 	.word	0x2000b224
    dd24:	00011764 	.word	0x00011764
    dd28:	00011778 	.word	0x00011778

0000dd2c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    dd2c:	e3510047 	cmp	r1, #71	; 0x47
    dd30:	e92d4070 	push	{r4, r5, r6, lr}
    dd34:	e1a04001 	mov	r4, r1
    dd38:	e1a05000 	mov	r5, r0
    dd3c:	8a000009 	bhi	dd68 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    dd40:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    dd44:	e0856104 	add	r6, r5, r4, lsl #2
    dd48:	e3530000 	cmp	r3, #0
    dd4c:	0a00000d 	beq	dd88 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
    dd50:	e1a00004 	mov	r0, r4
    dd54:	ebffffd4 	bl	dcac <CInterruptSystem::DisableIRQ(unsigned int)>
    dd58:	e3a03000 	mov	r3, #0
    dd5c:	e7853104 	str	r3, [r5, r4, lsl #2]
    dd60:	e5863120 	str	r3, [r6, #288]	; 0x120
    dd64:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd68:	e59f002c 	ldr	r0, [pc, #44]	; dd9c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
    dd6c:	e59f102c 	ldr	r1, [pc, #44]	; dda0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    dd70:	e3a02067 	mov	r2, #103	; 0x67
    dd74:	ebfffa3e 	bl	c674 <assertion_failed>
    dd78:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    dd7c:	e0856104 	add	r6, r5, r4, lsl #2
    dd80:	e3530000 	cmp	r3, #0
    dd84:	1afffff1 	bne	dd50 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    dd88:	e59f0014 	ldr	r0, [pc, #20]	; dda4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
    dd8c:	e59f100c 	ldr	r1, [pc, #12]	; dda0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    dd90:	e3a02068 	mov	r2, #104	; 0x68
    dd94:	ebfffa36 	bl	c674 <assertion_failed>
    dd98:	eaffffec 	b	dd50 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    dd9c:	00011764 	.word	0x00011764
    dda0:	00011778 	.word	0x00011778
    dda4:	000117a4 	.word	0x000117a4

0000dda8 <CInterruptSystem::Get()>:
    dda8:	e92d4010 	push	{r4, lr}
    ddac:	e59f4020 	ldr	r4, [pc, #32]	; ddd4 <CInterruptSystem::Get()+0x2c>
    ddb0:	e5940000 	ldr	r0, [r4]
    ddb4:	e3500000 	cmp	r0, #0
    ddb8:	18bd8010 	popne	{r4, pc}
    ddbc:	e59f0014 	ldr	r0, [pc, #20]	; ddd8 <CInterruptSystem::Get()+0x30>
    ddc0:	e59f1014 	ldr	r1, [pc, #20]	; dddc <CInterruptSystem::Get()+0x34>
    ddc4:	e3a02088 	mov	r2, #136	; 0x88
    ddc8:	ebfffa29 	bl	c674 <assertion_failed>
    ddcc:	e5940000 	ldr	r0, [r4]
    ddd0:	e8bd8010 	pop	{r4, pc}
    ddd4:	00012924 	.word	0x00012924
    ddd8:	0001069c 	.word	0x0001069c
    dddc:	00011778 	.word	0x00011778

0000dde0 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    dde0:	e3510047 	cmp	r1, #71	; 0x47
    dde4:	e92d4070 	push	{r4, r5, r6, lr}
    dde8:	e1a06001 	mov	r6, r1
    ddec:	e1a05000 	mov	r5, r0
    ddf0:	8a000007 	bhi	de14 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    ddf4:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ddf8:	e0855106 	add	r5, r5, r6, lsl #2
    ddfc:	e3540000 	cmp	r4, #0
    de00:	0a00000b 	beq	de34 <CInterruptSystem::CallIRQHandler(unsigned int)+0x54>
    de04:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    de08:	e12fff34 	blx	r4
    de0c:	e3a00001 	mov	r0, #1
    de10:	e8bd8070 	pop	{r4, r5, r6, pc}
    de14:	e59f0028 	ldr	r0, [pc, #40]	; de44 <CInterruptSystem::CallIRQHandler(unsigned int)+0x64>
    de18:	e59f1028 	ldr	r1, [pc, #40]	; de48 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
    de1c:	e3a0208e 	mov	r2, #142	; 0x8e
    de20:	ebfffa13 	bl	c674 <assertion_failed>
    de24:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    de28:	e0855106 	add	r5, r5, r6, lsl #2
    de2c:	e3540000 	cmp	r4, #0
    de30:	1afffff3 	bne	de04 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    de34:	e1a00006 	mov	r0, r6
    de38:	ebffff9b 	bl	dcac <CInterruptSystem::DisableIRQ(unsigned int)>
    de3c:	e1a00004 	mov	r0, r4
    de40:	e8bd8070 	pop	{r4, r5, r6, pc}
    de44:	00011764 	.word	0x00011764
    de48:	00011778 	.word	0x00011778

0000de4c <CInterruptSystem::InterruptHandler()>:
    de4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    de50:	e59f70a0 	ldr	r7, [pc, #160]	; def8 <CInterruptSystem::InterruptHandler()+0xac>
    de54:	e24dd014 	sub	sp, sp, #20
    de58:	e5973000 	ldr	r3, [r7]
    de5c:	e3530000 	cmp	r3, #0
    de60:	0a00001f 	beq	dee4 <CInterruptSystem::InterruptHandler()+0x98>
    de64:	e3a06000 	mov	r6, #0
    de68:	e59f308c 	ldr	r3, [pc, #140]	; defc <CInterruptSystem::InterruptHandler()+0xb0>
    de6c:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    de70:	e58d2004 	str	r2, [sp, #4]
    de74:	e1a04002 	mov	r4, r2
    de78:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    de7c:	e58d2008 	str	r2, [sp, #8]
    de80:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    de84:	e6ef3073 	uxtb	r3, r3
    de88:	e58d300c 	str	r3, [sp, #12]
    de8c:	e3540000 	cmp	r4, #0
    de90:	0a00000d 	beq	decc <CInterruptSystem::InterruptHandler()+0x80>
    de94:	e1a05286 	lsl	r5, r6, #5
    de98:	ea000002 	b	dea8 <CInterruptSystem::InterruptHandler()+0x5c>
    de9c:	e1b040a4 	lsrs	r4, r4, #1
    dea0:	e2855001 	add	r5, r5, #1
    dea4:	0a000008 	beq	decc <CInterruptSystem::InterruptHandler()+0x80>
    dea8:	e3140001 	tst	r4, #1
    deac:	0afffffa 	beq	de9c <CInterruptSystem::InterruptHandler()+0x50>
    deb0:	e5970000 	ldr	r0, [r7]
    deb4:	e1a01005 	mov	r1, r5
    deb8:	ebffffc8 	bl	dde0 <CInterruptSystem::CallIRQHandler(unsigned int)>
    debc:	e3500000 	cmp	r0, #0
    dec0:	0afffff5 	beq	de9c <CInterruptSystem::InterruptHandler()+0x50>
    dec4:	e28dd014 	add	sp, sp, #20
    dec8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    decc:	e2866001 	add	r6, r6, #1
    ded0:	e3560003 	cmp	r6, #3
    ded4:	0afffffa 	beq	dec4 <CInterruptSystem::InterruptHandler()+0x78>
    ded8:	e28d3004 	add	r3, sp, #4
    dedc:	e7934106 	ldr	r4, [r3, r6, lsl #2]
    dee0:	eaffffe9 	b	de8c <CInterruptSystem::InterruptHandler()+0x40>
    dee4:	e59f0014 	ldr	r0, [pc, #20]	; df00 <CInterruptSystem::InterruptHandler()+0xb4>
    dee8:	e59f1014 	ldr	r1, [pc, #20]	; df04 <CInterruptSystem::InterruptHandler()+0xb8>
    deec:	e3a020a1 	mov	r2, #161	; 0xa1
    def0:	ebfff9df 	bl	c674 <assertion_failed>
    def4:	eaffffda 	b	de64 <CInterruptSystem::InterruptHandler()+0x18>
    def8:	00012924 	.word	0x00012924
    defc:	2000b000 	.word	0x2000b000
    df00:	0001069c 	.word	0x0001069c
    df04:	00011778 	.word	0x00011778

0000df08 <InterruptHandler>:
    df08:	e92d4010 	push	{r4, lr}
    df0c:	e3a04000 	mov	r4, #0
    df10:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    df14:	ebffffcc 	bl	de4c <CInterruptSystem::InterruptHandler()>
    df18:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    df1c:	e8bd8010 	pop	{r4, pc}

0000df20 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    df20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    df24:	e3a0e000 	mov	lr, #0
    df28:	e1a03000 	mov	r3, r0
    df2c:	e1a0c00e 	mov	ip, lr
    df30:	e5801000 	str	r1, [r0]
    df34:	e28020dc 	add	r2, r0, #220	; 0xdc
    df38:	e5a3e004 	str	lr, [r3, #4]!
    df3c:	e5a3c004 	str	ip, [r3, #4]!
    df40:	e1530002 	cmp	r3, r2
    df44:	1afffffc 	bne	df3c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    df48:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000df4c <CGPIOManager::~CGPIOManager()>:
    df4c:	e92d4070 	push	{r4, r5, r6, lr}
    df50:	e1a06000 	mov	r6, r0
    df54:	e2804004 	add	r4, r0, #4
    df58:	e28050dc 	add	r5, r0, #220	; 0xdc
    df5c:	e5b43004 	ldr	r3, [r4, #4]!
    df60:	e59f0058 	ldr	r0, [pc, #88]	; dfc0 <CGPIOManager::~CGPIOManager()+0x74>
    df64:	e3530000 	cmp	r3, #0
    df68:	e59f1054 	ldr	r1, [pc, #84]	; dfc4 <CGPIOManager::~CGPIOManager()+0x78>
    df6c:	0a000001 	beq	df78 <CGPIOManager::~CGPIOManager()+0x2c>
    df70:	e3a0202c 	mov	r2, #44	; 0x2c
    df74:	ebfff9be 	bl	c674 <assertion_failed>
    df78:	e1540005 	cmp	r4, r5
    df7c:	1afffff6 	bne	df5c <CGPIOManager::~CGPIOManager()+0x10>
    df80:	e5963004 	ldr	r3, [r6, #4]
    df84:	e3530000 	cmp	r3, #0
    df88:	0a000004 	beq	dfa0 <CGPIOManager::~CGPIOManager()+0x54>
    df8c:	e5960000 	ldr	r0, [r6]
    df90:	e3500000 	cmp	r0, #0
    df94:	0a000003 	beq	dfa8 <CGPIOManager::~CGPIOManager()+0x5c>
    df98:	e3a01034 	mov	r1, #52	; 0x34
    df9c:	ebffff62 	bl	dd2c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    dfa0:	e1a00006 	mov	r0, r6
    dfa4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dfa8:	e59f0018 	ldr	r0, [pc, #24]	; dfc8 <CGPIOManager::~CGPIOManager()+0x7c>
    dfac:	e59f1010 	ldr	r1, [pc, #16]	; dfc4 <CGPIOManager::~CGPIOManager()+0x78>
    dfb0:	e3a02032 	mov	r2, #50	; 0x32
    dfb4:	ebfff9ae 	bl	c674 <assertion_failed>
    dfb8:	e5960000 	ldr	r0, [r6]
    dfbc:	eafffff5 	b	df98 <CGPIOManager::~CGPIOManager()+0x4c>
    dfc0:	000117c0 	.word	0x000117c0
    dfc4:	000117d4 	.word	0x000117d4
    dfc8:	000117e4 	.word	0x000117e4

0000dfcc <CGPIOManager::Initialize()>:
    dfcc:	e5903004 	ldr	r3, [r0, #4]
    dfd0:	e92d4010 	push	{r4, lr}
    dfd4:	e3530000 	cmp	r3, #0
    dfd8:	e1a04000 	mov	r4, r0
    dfdc:	1a000009 	bne	e008 <CGPIOManager::Initialize()+0x3c>
    dfe0:	e5940000 	ldr	r0, [r4]
    dfe4:	e3500000 	cmp	r0, #0
    dfe8:	0a00000d 	beq	e024 <CGPIOManager::Initialize()+0x58>
    dfec:	e3a01034 	mov	r1, #52	; 0x34
    dff0:	e59f2044 	ldr	r2, [pc, #68]	; e03c <CGPIOManager::Initialize()+0x70>
    dff4:	e1a03004 	mov	r3, r4
    dff8:	ebffff0f 	bl	dc3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    dffc:	e3a00001 	mov	r0, #1
    e000:	e5840004 	str	r0, [r4, #4]
    e004:	e8bd8010 	pop	{r4, pc}
    e008:	e59f0030 	ldr	r0, [pc, #48]	; e040 <CGPIOManager::Initialize()+0x74>
    e00c:	e59f1030 	ldr	r1, [pc, #48]	; e044 <CGPIOManager::Initialize()+0x78>
    e010:	e3a0203b 	mov	r2, #59	; 0x3b
    e014:	ebfff996 	bl	c674 <assertion_failed>
    e018:	e5940000 	ldr	r0, [r4]
    e01c:	e3500000 	cmp	r0, #0
    e020:	1afffff1 	bne	dfec <CGPIOManager::Initialize()+0x20>
    e024:	e59f001c 	ldr	r0, [pc, #28]	; e048 <CGPIOManager::Initialize()+0x7c>
    e028:	e59f1014 	ldr	r1, [pc, #20]	; e044 <CGPIOManager::Initialize()+0x78>
    e02c:	e3a0203c 	mov	r2, #60	; 0x3c
    e030:	ebfff98f 	bl	c674 <assertion_failed>
    e034:	e5940000 	ldr	r0, [r4]
    e038:	eaffffeb 	b	dfec <CGPIOManager::Initialize()+0x20>
    e03c:	0000e264 	.word	0x0000e264
    e040:	000117f8 	.word	0x000117f8
    e044:	000117d4 	.word	0x000117d4
    e048:	000117e4 	.word	0x000117e4

0000e04c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    e04c:	e5903004 	ldr	r3, [r0, #4]
    e050:	e92d4070 	push	{r4, r5, r6, lr}
    e054:	e3530000 	cmp	r3, #0
    e058:	e1a04000 	mov	r4, r0
    e05c:	e1a05001 	mov	r5, r1
    e060:	0a00000e 	beq	e0a0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    e064:	e3550000 	cmp	r5, #0
    e068:	0a000016 	beq	e0c8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
    e06c:	e5956004 	ldr	r6, [r5, #4]
    e070:	e3560035 	cmp	r6, #53	; 0x35
    e074:	8a00000e 	bhi	e0b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>
    e078:	e0844106 	add	r4, r4, r6, lsl #2
    e07c:	e5943008 	ldr	r3, [r4, #8]
    e080:	e3530000 	cmp	r3, #0
    e084:	0a000003 	beq	e098 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
    e088:	e59f004c 	ldr	r0, [pc, #76]	; e0dc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x90>
    e08c:	e59f104c 	ldr	r1, [pc, #76]	; e0e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e090:	e3a0204b 	mov	r2, #75	; 0x4b
    e094:	ebfff976 	bl	c674 <assertion_failed>
    e098:	e5845008 	str	r5, [r4, #8]
    e09c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0a0:	e59f003c 	ldr	r0, [pc, #60]	; e0e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x98>
    e0a4:	e59f1034 	ldr	r1, [pc, #52]	; e0e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e0a8:	e3a02045 	mov	r2, #69	; 0x45
    e0ac:	ebfff970 	bl	c674 <assertion_failed>
    e0b0:	eaffffeb 	b	e064 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    e0b4:	e59f002c 	ldr	r0, [pc, #44]	; e0e8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
    e0b8:	e59f1020 	ldr	r1, [pc, #32]	; e0e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e0bc:	e3a02049 	mov	r2, #73	; 0x49
    e0c0:	ebfff96b 	bl	c674 <assertion_failed>
    e0c4:	eaffffeb 	b	e078 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    e0c8:	e59f001c 	ldr	r0, [pc, #28]	; e0ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
    e0cc:	e59f100c 	ldr	r1, [pc, #12]	; e0e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    e0d0:	e3a02047 	mov	r2, #71	; 0x47
    e0d4:	ebfff966 	bl	c674 <assertion_failed>
    e0d8:	eaffffe3 	b	e06c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
    e0dc:	000117c0 	.word	0x000117c0
    e0e0:	000117d4 	.word	0x000117d4
    e0e4:	0001180c 	.word	0x0001180c
    e0e8:	0001047c 	.word	0x0001047c
    e0ec:	0001181c 	.word	0x0001181c

0000e0f0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    e0f0:	e92d4038 	push	{r3, r4, r5, lr}
    e0f4:	e5903004 	ldr	r3, [r0, #4]
    e0f8:	e1a04000 	mov	r4, r0
    e0fc:	e3530000 	cmp	r3, #0
    e100:	e1a05001 	mov	r5, r1
    e104:	0a00000b 	beq	e138 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    e108:	e3550000 	cmp	r5, #0
    e10c:	0a00001b 	beq	e180 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
    e110:	e5955004 	ldr	r5, [r5, #4]
    e114:	e3550035 	cmp	r5, #53	; 0x35
    e118:	8a00000b 	bhi	e14c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x5c>
    e11c:	e0844105 	add	r4, r4, r5, lsl #2
    e120:	e5943008 	ldr	r3, [r4, #8]
    e124:	e3530000 	cmp	r3, #0
    e128:	0a00000f 	beq	e16c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
    e12c:	e3a03000 	mov	r3, #0
    e130:	e5843008 	str	r3, [r4, #8]
    e134:	e8bd8038 	pop	{r3, r4, r5, pc}
    e138:	e59f0054 	ldr	r0, [pc, #84]	; e194 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa4>
    e13c:	e59f1054 	ldr	r1, [pc, #84]	; e198 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e140:	e3a02052 	mov	r2, #82	; 0x52
    e144:	ebfff94a 	bl	c674 <assertion_failed>
    e148:	eaffffee 	b	e108 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    e14c:	e59f0048 	ldr	r0, [pc, #72]	; e19c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xac>
    e150:	e59f1040 	ldr	r1, [pc, #64]	; e198 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e154:	e3a02056 	mov	r2, #86	; 0x56
    e158:	e0844105 	add	r4, r4, r5, lsl #2
    e15c:	ebfff944 	bl	c674 <assertion_failed>
    e160:	e5943008 	ldr	r3, [r4, #8]
    e164:	e3530000 	cmp	r3, #0
    e168:	1affffef 	bne	e12c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e16c:	e59f002c 	ldr	r0, [pc, #44]	; e1a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
    e170:	e59f1020 	ldr	r1, [pc, #32]	; e198 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e174:	e3a02058 	mov	r2, #88	; 0x58
    e178:	ebfff93d 	bl	c674 <assertion_failed>
    e17c:	eaffffea 	b	e12c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    e180:	e59f001c 	ldr	r0, [pc, #28]	; e1a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
    e184:	e59f100c 	ldr	r1, [pc, #12]	; e198 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    e188:	e3a02054 	mov	r2, #84	; 0x54
    e18c:	ebfff938 	bl	c674 <assertion_failed>
    e190:	eaffffde 	b	e110 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
    e194:	0001180c 	.word	0x0001180c
    e198:	000117d4 	.word	0x000117d4
    e19c:	0001047c 	.word	0x0001047c
    e1a0:	00011828 	.word	0x00011828
    e1a4:	0001181c 	.word	0x0001181c

0000e1a8 <CGPIOManager::InterruptHandler()>:
    e1a8:	e92d4038 	push	{r3, r4, r5, lr}
    e1ac:	e5903004 	ldr	r3, [r0, #4]
    e1b0:	e1a05000 	mov	r5, r0
    e1b4:	e3530000 	cmp	r3, #0
    e1b8:	0a00001d 	beq	e234 <CGPIOManager::InterruptHandler()+0x8c>
    e1bc:	e3a04000 	mov	r4, #0
    e1c0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    e1c4:	e59f3088 	ldr	r3, [pc, #136]	; e254 <CGPIOManager::InterruptHandler()+0xac>
    e1c8:	e1a02003 	mov	r2, r3
    e1cc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    e1d0:	ea000005 	b	e1ec <CGPIOManager::InterruptHandler()+0x44>
    e1d4:	e2844001 	add	r4, r4, #1
    e1d8:	e314001f 	tst	r4, #31
    e1dc:	11a030a3 	lsrne	r3, r3, #1
    e1e0:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    e1e4:	e3540036 	cmp	r4, #54	; 0x36
    e1e8:	0a00000e 	beq	e228 <CGPIOManager::InterruptHandler()+0x80>
    e1ec:	e3130001 	tst	r3, #1
    e1f0:	0afffff7 	beq	e1d4 <CGPIOManager::InterruptHandler()+0x2c>
    e1f4:	e3a03001 	mov	r3, #1
    e1f8:	e2842002 	add	r2, r4, #2
    e1fc:	e7950102 	ldr	r0, [r5, r2, lsl #2]
    e200:	e204501f 	and	r5, r4, #31
    e204:	e3500000 	cmp	r0, #0
    e208:	e1a05513 	lsl	r5, r3, r5
    e20c:	0a00000d 	beq	e248 <CGPIOManager::InterruptHandler()+0xa0>
    e210:	ebffedc6 	bl	9930 <CGPIOPin::InterruptHandler()>
    e214:	e59f303c 	ldr	r3, [pc, #60]	; e258 <CGPIOManager::InterruptHandler()+0xb0>
    e218:	e1a042a4 	lsr	r4, r4, #5
    e21c:	e0843003 	add	r3, r4, r3
    e220:	e1a03103 	lsl	r3, r3, #2
    e224:	e5835000 	str	r5, [r3]
    e228:	e3a03000 	mov	r3, #0
    e22c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e230:	e8bd8038 	pop	{r3, r4, r5, pc}
    e234:	e59f0020 	ldr	r0, [pc, #32]	; e25c <CGPIOManager::InterruptHandler()+0xb4>
    e238:	e59f1020 	ldr	r1, [pc, #32]	; e260 <CGPIOManager::InterruptHandler()+0xb8>
    e23c:	e3a0205e 	mov	r2, #94	; 0x5e
    e240:	ebfff90b 	bl	c674 <assertion_failed>
    e244:	eaffffdc 	b	e1bc <CGPIOManager::InterruptHandler()+0x14>
    e248:	e1a00004 	mov	r0, r4
    e24c:	ebffede4 	bl	99e4 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    e250:	eaffffef 	b	e214 <CGPIOManager::InterruptHandler()+0x6c>
    e254:	20200000 	.word	0x20200000
    e258:	08080010 	.word	0x08080010
    e25c:	0001180c 	.word	0x0001180c
    e260:	000117d4 	.word	0x000117d4

0000e264 <CGPIOManager::InterruptStub(void*)>:
    e264:	e92d4010 	push	{r4, lr}
    e268:	e2504000 	subs	r4, r0, #0
    e26c:	0a000002 	beq	e27c <CGPIOManager::InterruptStub(void*)+0x18>
    e270:	e1a00004 	mov	r0, r4
    e274:	e8bd4010 	pop	{r4, lr}
    e278:	eaffffca 	b	e1a8 <CGPIOManager::InterruptHandler()>
    e27c:	e59f0014 	ldr	r0, [pc, #20]	; e298 <CGPIOManager::InterruptStub(void*)+0x34>
    e280:	e59f1014 	ldr	r1, [pc, #20]	; e29c <CGPIOManager::InterruptStub(void*)+0x38>
    e284:	e3a0208a 	mov	r2, #138	; 0x8a
    e288:	ebfff8f9 	bl	c674 <assertion_failed>
    e28c:	e1a00004 	mov	r0, r4
    e290:	e8bd4010 	pop	{r4, lr}
    e294:	eaffffc3 	b	e1a8 <CGPIOManager::InterruptHandler()>
    e298:	0001183c 	.word	0x0001183c
    e29c:	000117d4 	.word	0x000117d4

0000e2a0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e2a0:	e12fff1e 	bx	lr

0000e2a4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    e2a4:	e92d4010 	push	{r4, lr}
    e2a8:	e1a04000 	mov	r4, r0
    e2ac:	ebffeee6 	bl	9e4c <operator delete(void*)>
    e2b0:	e1a00004 	mov	r0, r4
    e2b4:	e8bd8010 	pop	{r4, pc}

0000e2b8 <CVirtualGPIOPin::Write(unsigned int)>:
    e2b8:	e5903004 	ldr	r3, [r0, #4]
    e2bc:	e3530001 	cmp	r3, #1
    e2c0:	812fff1e 	bxhi	lr
    e2c4:	e3510001 	cmp	r1, #1
    e2c8:	93a03000 	movls	r3, #0
    e2cc:	83a03001 	movhi	r3, #1
    e2d0:	e92d4070 	push	{r4, r5, r6, lr}
    e2d4:	e59f60a8 	ldr	r6, [pc, #168]	; e384 <CVirtualGPIOPin::Write(unsigned int)+0xcc>
    e2d8:	e5962000 	ldr	r2, [r6]
    e2dc:	e3520000 	cmp	r2, #0
    e2e0:	03833001 	orreq	r3, r3, #1
    e2e4:	e3530000 	cmp	r3, #0
    e2e8:	18bd8070 	popne	{r4, r5, r6, pc}
    e2ec:	e5963004 	ldr	r3, [r6, #4]
    e2f0:	e1a05001 	mov	r5, r1
    e2f4:	e3530000 	cmp	r3, #0
    e2f8:	e1a04000 	mov	r4, r0
    e2fc:	1a000018 	bne	e364 <CVirtualGPIOPin::Write(unsigned int)+0xac>
    e300:	e1d410bc 	ldrh	r1, [r4, #12]
    e304:	e1d430be 	ldrh	r3, [r4, #14]
    e308:	e5845008 	str	r5, [r4, #8]
    e30c:	e0632001 	rsb	r2, r3, r1
    e310:	e6bf2072 	sxth	r2, r2
    e314:	e3520000 	cmp	r2, #0
    e318:	da000013 	ble	e36c <CVirtualGPIOPin::Write(unsigned int)+0xb4>
    e31c:	e3550000 	cmp	r5, #0
    e320:	0a000004 	beq	e338 <CVirtualGPIOPin::Write(unsigned int)+0x80>
    e324:	e5963004 	ldr	r3, [r6, #4]
    e328:	e3530000 	cmp	r3, #0
    e32c:	08bd8070 	popeq	{r4, r5, r6, pc}
    e330:	e8bd4070 	pop	{r4, r5, r6, lr}
    e334:	eaffeed5 	b	9e90 <LeaveCritical>
    e338:	e2832001 	add	r2, r3, #1
    e33c:	e6ff3072 	uxth	r3, r2
    e340:	e1c430be 	strh	r3, [r4, #14]
    e344:	e5940004 	ldr	r0, [r4, #4]
    e348:	e5962000 	ldr	r2, [r6]
    e34c:	e1833801 	orr	r3, r3, r1, lsl #16
    e350:	e7823100 	str	r3, [r2, r0, lsl #2]
    e354:	e5963004 	ldr	r3, [r6, #4]
    e358:	e3530000 	cmp	r3, #0
    e35c:	08bd8070 	popeq	{r4, r5, r6, pc}
    e360:	eafffff2 	b	e330 <CVirtualGPIOPin::Write(unsigned int)+0x78>
    e364:	ebffeeba 	bl	9e54 <EnterCritical>
    e368:	eaffffe4 	b	e300 <CVirtualGPIOPin::Write(unsigned int)+0x48>
    e36c:	e3550000 	cmp	r5, #0
    e370:	0affffeb 	beq	e324 <CVirtualGPIOPin::Write(unsigned int)+0x6c>
    e374:	e2811001 	add	r1, r1, #1
    e378:	e6ff1071 	uxth	r1, r1
    e37c:	e1c410bc 	strh	r1, [r4, #12]
    e380:	eaffffef 	b	e344 <CVirtualGPIOPin::Write(unsigned int)+0x8c>
    e384:	00012928 	.word	0x00012928

0000e388 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    e388:	e3a03000 	mov	r3, #0
    e38c:	e92d4030 	push	{r4, r5, lr}
    e390:	e59f20c8 	ldr	r2, [pc, #200]	; e460 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd8>
    e394:	e3510001 	cmp	r1, #1
    e398:	e24dd024 	sub	sp, sp, #36	; 0x24
    e39c:	e1a04000 	mov	r4, r0
    e3a0:	e5801004 	str	r1, [r0, #4]
    e3a4:	e5802000 	str	r2, [r0]
    e3a8:	e1c030bc 	strh	r3, [r0, #12]
    e3ac:	e1c030be 	strh	r3, [r0, #14]
    e3b0:	9a000002 	bls	e3c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    e3b4:	e1a00004 	mov	r0, r4
    e3b8:	e28dd024 	add	sp, sp, #36	; 0x24
    e3bc:	e8bd8030 	pop	{r4, r5, pc}
    e3c0:	e59f509c 	ldr	r5, [pc, #156]	; e464 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xdc>
    e3c4:	e5953004 	ldr	r3, [r5, #4]
    e3c8:	e3530000 	cmp	r3, #0
    e3cc:	1a000008 	bne	e3f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x6c>
    e3d0:	e5953000 	ldr	r3, [r5]
    e3d4:	e3530000 	cmp	r3, #0
    e3d8:	0a000009 	beq	e404 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x7c>
    e3dc:	e1a00004 	mov	r0, r4
    e3e0:	e3a01000 	mov	r1, #0
    e3e4:	ebffffb3 	bl	e2b8 <CVirtualGPIOPin::Write(unsigned int)>
    e3e8:	e1a00004 	mov	r0, r4
    e3ec:	e28dd024 	add	sp, sp, #36	; 0x24
    e3f0:	e8bd8030 	pop	{r4, r5, pc}
    e3f4:	ebffee96 	bl	9e54 <EnterCritical>
    e3f8:	e5953000 	ldr	r3, [r5]
    e3fc:	e3530000 	cmp	r3, #0
    e400:	1a00000e 	bne	e440 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xb8>
    e404:	e28d0008 	add	r0, sp, #8
    e408:	ebffe9b7 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    e40c:	e3a03000 	mov	r3, #0
    e410:	e28d0008 	add	r0, sp, #8
    e414:	e58d3000 	str	r3, [sp]
    e418:	e59f1048 	ldr	r1, [pc, #72]	; e468 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xe0>
    e41c:	e3a03010 	mov	r3, #16
    e420:	e28d2010 	add	r2, sp, #16
    e424:	ebffe9f8 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e428:	e3500000 	cmp	r0, #0
    e42c:	159d301c 	ldrne	r3, [sp, #28]
    e430:	e28d0008 	add	r0, sp, #8
    e434:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    e438:	15853000 	strne	r3, [r5]
    e43c:	ebffe9b0 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    e440:	e5953004 	ldr	r3, [r5, #4]
    e444:	e3530000 	cmp	r3, #0
    e448:	0affffe3 	beq	e3dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x54>
    e44c:	ebffee8f 	bl	9e90 <LeaveCritical>
    e450:	e1a00004 	mov	r0, r4
    e454:	e3a01000 	mov	r1, #0
    e458:	ebffff96 	bl	e2b8 <CVirtualGPIOPin::Write(unsigned int)>
    e45c:	eaffffe1 	b	e3e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x60>
    e460:	00011850 	.word	0x00011850
    e464:	00012928 	.word	0x00012928
    e468:	00040010 	.word	0x00040010

0000e46c <CVirtualGPIOPin::Invert()>:
    e46c:	e5901008 	ldr	r1, [r0, #8]
    e470:	e2211001 	eor	r1, r1, #1
    e474:	eaffff8f 	b	e2b8 <CVirtualGPIOPin::Write(unsigned int)>

0000e478 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    e478:	e3a02000 	mov	r2, #0
    e47c:	e59f3004 	ldr	r3, [pc, #4]	; e488 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
    e480:	e5832004 	str	r2, [r3, #4]
    e484:	e12fff1e 	bx	lr
    e488:	00012928 	.word	0x00012928

0000e48c <CMachineInfo::CMachineInfo()>:
    e48c:	e3a03000 	mov	r3, #0
    e490:	e92d4030 	push	{r4, r5, lr}
    e494:	e3a01003 	mov	r1, #3
    e498:	e1a04000 	mov	r4, r0
    e49c:	e3a0000a 	mov	r0, #10
    e4a0:	e59f219c 	ldr	r2, [pc, #412]	; e644 <CMachineInfo::CMachineInfo()+0x1b8>
    e4a4:	e24dd024 	sub	sp, sp, #36	; 0x24
    e4a8:	e5925000 	ldr	r5, [r2]
    e4ac:	e5840004 	str	r0, [r4, #4]
    e4b0:	e1550003 	cmp	r5, r3
    e4b4:	e5841010 	str	r1, [r4, #16]
    e4b8:	e5843000 	str	r3, [r4]
    e4bc:	e5843008 	str	r3, [r4, #8]
    e4c0:	e584300c 	str	r3, [r4, #12]
    e4c4:	e5843014 	str	r3, [r4, #20]
    e4c8:	0a00000c 	beq	e500 <CMachineInfo::CMachineInfo()+0x74>
    e4cc:	e595e000 	ldr	lr, [r5]
    e4d0:	e595c004 	ldr	ip, [r5, #4]
    e4d4:	e2850008 	add	r0, r5, #8
    e4d8:	e890000f 	ldm	r0, {r0, r1, r2, r3}
    e4dc:	e584e000 	str	lr, [r4]
    e4e0:	e584c004 	str	ip, [r4, #4]
    e4e4:	e5840008 	str	r0, [r4, #8]
    e4e8:	e584100c 	str	r1, [r4, #12]
    e4ec:	e5842010 	str	r2, [r4, #16]
    e4f0:	e5843014 	str	r3, [r4, #20]
    e4f4:	e1a00004 	mov	r0, r4
    e4f8:	e28dd024 	add	sp, sp, #36	; 0x24
    e4fc:	e8bd8030 	pop	{r4, r5, pc}
    e500:	e28d0008 	add	r0, sp, #8
    e504:	e5824000 	str	r4, [r2]
    e508:	ebffe977 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    e50c:	e58d5000 	str	r5, [sp]
    e510:	e28d0008 	add	r0, sp, #8
    e514:	e59f112c 	ldr	r1, [pc, #300]	; e648 <CMachineInfo::CMachineInfo()+0x1bc>
    e518:	e28d2010 	add	r2, sp, #16
    e51c:	e3a03010 	mov	r3, #16
    e520:	ebffe9b9 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e524:	e3500000 	cmp	r0, #0
    e528:	0a00000f 	beq	e56c <CMachineInfo::CMachineInfo()+0xe0>
    e52c:	e59d201c 	ldr	r2, [sp, #28]
    e530:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    e534:	e5842000 	str	r2, [r4]
    e538:	0a00000e 	beq	e578 <CMachineInfo::CMachineInfo()+0xec>
    e53c:	e1a03005 	mov	r3, r5
    e540:	e1a00222 	lsr	r0, r2, #4
    e544:	e59fc100 	ldr	ip, [pc, #256]	; e64c <CMachineInfo::CMachineInfo()+0x1c0>
    e548:	e6ef0070 	uxtb	r0, r0
    e54c:	e79c1005 	ldr	r1, [ip, r5]
    e550:	e59fe0f4 	ldr	lr, [pc, #244]	; e64c <CMachineInfo::CMachineInfo()+0x1c0>
    e554:	e1510000 	cmp	r1, r0
    e558:	0a00001c 	beq	e5d0 <CMachineInfo::CMachineInfo()+0x144>
    e55c:	e2833001 	add	r3, r3, #1
    e560:	e3530008 	cmp	r3, #8
    e564:	e285500c 	add	r5, r5, #12
    e568:	1afffff7 	bne	e54c <CMachineInfo::CMachineInfo()+0xc0>
    e56c:	e28d0008 	add	r0, sp, #8
    e570:	ebffe963 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    e574:	eaffffde 	b	e4f4 <CMachineInfo::CMachineInfo()+0x68>
    e578:	e59fc0d0 	ldr	ip, [pc, #208]	; e650 <CMachineInfo::CMachineInfo()+0x1c4>
    e57c:	e79c1203 	ldr	r1, [ip, r3, lsl #4]
    e580:	e59f00c4 	ldr	r0, [pc, #196]	; e64c <CMachineInfo::CMachineInfo()+0x1c0>
    e584:	e1520001 	cmp	r2, r1
    e588:	e1a01203 	lsl	r1, r3, #4
    e58c:	e2833001 	add	r3, r3, #1
    e590:	0a000002 	beq	e5a0 <CMachineInfo::CMachineInfo()+0x114>
    e594:	e3530011 	cmp	r3, #17
    e598:	1afffff7 	bne	e57c <CMachineInfo::CMachineInfo()+0xf0>
    e59c:	eafffff2 	b	e56c <CMachineInfo::CMachineInfo()+0xe0>
    e5a0:	e3a02001 	mov	r2, #1
    e5a4:	e3a03000 	mov	r3, #0
    e5a8:	e0800001 	add	r0, r0, r1
    e5ac:	e590e064 	ldr	lr, [r0, #100]	; 0x64
    e5b0:	e590c068 	ldr	ip, [r0, #104]	; 0x68
    e5b4:	e590106c 	ldr	r1, [r0, #108]	; 0x6c
    e5b8:	e584e004 	str	lr, [r4, #4]
    e5bc:	e584c00c 	str	ip, [r4, #12]
    e5c0:	e5841014 	str	r1, [r4, #20]
    e5c4:	e5842008 	str	r2, [r4, #8]
    e5c8:	e5843010 	str	r3, [r4, #16]
    e5cc:	eaffffe6 	b	e56c <CMachineInfo::CMachineInfo()+0xe0>
    e5d0:	e3a01c01 	mov	r1, #256	; 0x100
    e5d4:	e1a00622 	lsr	r0, r2, #12
    e5d8:	e0833083 	add	r3, r3, r3, lsl #1
    e5dc:	e1a03103 	lsl	r3, r3, #2
    e5e0:	e1a0ca22 	lsr	ip, r2, #20
    e5e4:	e200000f 	and	r0, r0, #15
    e5e8:	e08e5003 	add	r5, lr, r3
    e5ec:	e3500002 	cmp	r0, #2
    e5f0:	e2833008 	add	r3, r3, #8
    e5f4:	e20cc007 	and	ip, ip, #7
    e5f8:	e79ee003 	ldr	lr, [lr, r3]
    e5fc:	e202300f 	and	r3, r2, #15
    e600:	e1a02c11 	lsl	r2, r1, ip
    e604:	83a01003 	movhi	r1, #3
    e608:	e5955004 	ldr	r5, [r5, #4]
    e60c:	e5840010 	str	r0, [r4, #16]
    e610:	85841010 	strhi	r1, [r4, #16]
    e614:	e3520c01 	cmp	r2, #256	; 0x100
    e618:	03550003 	cmpeq	r5, #3
    e61c:	e2833001 	add	r3, r3, #1
    e620:	e9844020 	stmib	r4, {r5, lr}
    e624:	e5842014 	str	r2, [r4, #20]
    e628:	e584300c 	str	r3, [r4, #12]
    e62c:	1affffce 	bne	e56c <CMachineInfo::CMachineInfo()+0xe0>
    e630:	e3530001 	cmp	r3, #1
    e634:	03a03001 	moveq	r3, #1
    e638:	13a03002 	movne	r3, #2
    e63c:	e5843004 	str	r3, [r4, #4]
    e640:	eaffffc9 	b	e56c <CMachineInfo::CMachineInfo()+0xe0>
    e644:	00012930 	.word	0x00012930
    e648:	00010002 	.word	0x00010002
    e64c:	00011858 	.word	0x00011858
    e650:	000118b8 	.word	0x000118b8

0000e654 <CMachineInfo::~CMachineInfo()>:
    e654:	e3a0200a 	mov	r2, #10
    e658:	e59f3014 	ldr	r3, [pc, #20]	; e674 <CMachineInfo::~CMachineInfo()+0x20>
    e65c:	e5802004 	str	r2, [r0, #4]
    e660:	e5932000 	ldr	r2, [r3]
    e664:	e1520000 	cmp	r2, r0
    e668:	03a02000 	moveq	r2, #0
    e66c:	05832000 	streq	r2, [r3]
    e670:	e12fff1e 	bx	lr
    e674:	00012930 	.word	0x00012930

0000e678 <CMachineInfo::GetMachineModel() const>:
    e678:	e5900004 	ldr	r0, [r0, #4]
    e67c:	e12fff1e 	bx	lr

0000e680 <CMachineInfo::GetMachineName() const>:
    e680:	e5902004 	ldr	r2, [r0, #4]
    e684:	e59f3008 	ldr	r3, [pc, #8]	; e694 <CMachineInfo::GetMachineName() const+0x14>
    e688:	e0833102 	add	r3, r3, r2, lsl #2
    e68c:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    e690:	e12fff1e 	bx	lr
    e694:	00011858 	.word	0x00011858

0000e698 <CMachineInfo::GetModelMajor() const>:
    e698:	e5900008 	ldr	r0, [r0, #8]
    e69c:	e12fff1e 	bx	lr

0000e6a0 <CMachineInfo::GetModelRevision() const>:
    e6a0:	e590000c 	ldr	r0, [r0, #12]
    e6a4:	e12fff1e 	bx	lr

0000e6a8 <CMachineInfo::GetSoCType() const>:
    e6a8:	e5900010 	ldr	r0, [r0, #16]
    e6ac:	e12fff1e 	bx	lr

0000e6b0 <CMachineInfo::GetRAMSize() const>:
    e6b0:	e5900014 	ldr	r0, [r0, #20]
    e6b4:	e12fff1e 	bx	lr

0000e6b8 <CMachineInfo::GetSoCName() const>:
    e6b8:	e5902010 	ldr	r2, [r0, #16]
    e6bc:	e59f3008 	ldr	r3, [pc, #8]	; e6cc <CMachineInfo::GetSoCName() const+0x14>
    e6c0:	e0833102 	add	r3, r3, r2, lsl #2
    e6c4:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    e6c8:	e12fff1e 	bx	lr
    e6cc:	00011858 	.word	0x00011858

0000e6d0 <CMachineInfo::GetRevisionRaw() const>:
    e6d0:	e5900000 	ldr	r0, [r0]
    e6d4:	e12fff1e 	bx	lr

0000e6d8 <CMachineInfo::GetClockRate(unsigned int) const>:
    e6d8:	e92d4070 	push	{r4, r5, r6, lr}
    e6dc:	e24dd028 	sub	sp, sp, #40	; 0x28
    e6e0:	e1a06000 	mov	r6, r0
    e6e4:	e28d000c 	add	r0, sp, #12
    e6e8:	e1a05001 	mov	r5, r1
    e6ec:	ebffe8fe 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    e6f0:	e3a03004 	mov	r3, #4
    e6f4:	e28d000c 	add	r0, sp, #12
    e6f8:	e58d3000 	str	r3, [sp]
    e6fc:	e59f1084 	ldr	r1, [pc, #132]	; e788 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    e700:	e28d2014 	add	r2, sp, #20
    e704:	e3a03014 	mov	r3, #20
    e708:	e58d5020 	str	r5, [sp, #32]
    e70c:	ebffe93e 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e710:	e2504000 	subs	r4, r0, #0
    e714:	1a00000e 	bne	e754 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    e718:	e3550002 	cmp	r5, #2
    e71c:	0a00000e 	beq	e75c <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    e720:	e3550004 	cmp	r5, #4
    e724:	0a000010 	beq	e76c <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    e728:	e3550001 	cmp	r5, #1
    e72c:	0a00000c 	beq	e764 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    e730:	e59f0054 	ldr	r0, [pc, #84]	; e78c <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    e734:	e59f1054 	ldr	r1, [pc, #84]	; e790 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    e738:	e3a02f43 	mov	r2, #268	; 0x10c
    e73c:	ebfff7cc 	bl	c674 <assertion_failed>
    e740:	e28d000c 	add	r0, sp, #12
    e744:	ebffe8ee 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    e748:	e1a00004 	mov	r0, r4
    e74c:	e28dd028 	add	sp, sp, #40	; 0x28
    e750:	e8bd8070 	pop	{r4, r5, r6, pc}
    e754:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    e758:	eafffff8 	b	e740 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    e75c:	e59f4030 	ldr	r4, [pc, #48]	; e794 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    e760:	eafffff6 	b	e740 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    e764:	e59f402c 	ldr	r4, [pc, #44]	; e798 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    e768:	eafffff4 	b	e740 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    e76c:	e5964008 	ldr	r4, [r6, #8]
    e770:	e59f3024 	ldr	r3, [pc, #36]	; e79c <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    e774:	e59f2024 	ldr	r2, [pc, #36]	; e7a0 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    e778:	e3540002 	cmp	r4, #2
    e77c:	91a04003 	movls	r4, r3
    e780:	81a04002 	movhi	r4, r2
    e784:	eaffffed 	b	e740 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    e788:	00030002 	.word	0x00030002
    e78c:	000117bc 	.word	0x000117bc
    e790:	00011a04 	.word	0x00011a04
    e794:	02dc6c00 	.word	0x02dc6c00
    e798:	05f5e100 	.word	0x05f5e100
    e79c:	0ee6b280 	.word	0x0ee6b280
    e7a0:	11e1a300 	.word	0x11e1a300

0000e7a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    e7a4:	e3510036 	cmp	r1, #54	; 0x36
    e7a8:	e92d4008 	push	{r3, lr}
    e7ac:	0a00000c 	beq	e7e4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    e7b0:	e3510037 	cmp	r1, #55	; 0x37
    e7b4:	1a000004 	bne	e7cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x28>
    e7b8:	e5900004 	ldr	r0, [r0, #4]
    e7bc:	e3500003 	cmp	r0, #3
    e7c0:	d3a0002d 	movle	r0, #45	; 0x2d
    e7c4:	c3a00028 	movgt	r0, #40	; 0x28
    e7c8:	e8bd8008 	pop	{r3, pc}
    e7cc:	e59f0038 	ldr	r0, [pc, #56]	; e80c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    e7d0:	e59f1038 	ldr	r1, [pc, #56]	; e810 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    e7d4:	e59f2038 	ldr	r2, [pc, #56]	; e814 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    e7d8:	ebfff7a5 	bl	c674 <assertion_failed>
    e7dc:	e3a00000 	mov	r0, #0
    e7e0:	e8bd8008 	pop	{r3, pc}
    e7e4:	e5903004 	ldr	r3, [r0, #4]
    e7e8:	e3530003 	cmp	r3, #3
    e7ec:	ca000001 	bgt	e7f8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
    e7f0:	e3a00028 	mov	r0, #40	; 0x28
    e7f4:	e8bd8008 	pop	{r3, pc}
    e7f8:	e5900008 	ldr	r0, [r0, #8]
    e7fc:	e3500002 	cmp	r0, #2
    e800:	93a0002d 	movls	r0, #45	; 0x2d
    e804:	83a00029 	movhi	r0, #41	; 0x29
    e808:	e8bd8008 	pop	{r3, pc}
    e80c:	000117bc 	.word	0x000117bc
    e810:	00011a04 	.word	0x00011a04
    e814:	00000137 	.word	0x00000137

0000e818 <CMachineInfo::GetDevice(TDeviceId) const>:
    e818:	e3510000 	cmp	r1, #0
    e81c:	1a000003 	bne	e830 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    e820:	e5900004 	ldr	r0, [r0, #4]
    e824:	e2500001 	subs	r0, r0, #1
    e828:	13a00001 	movne	r0, #1
    e82c:	e12fff1e 	bx	lr
    e830:	e92d4008 	push	{r3, lr}
    e834:	e59f0010 	ldr	r0, [pc, #16]	; e84c <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    e838:	e59f1010 	ldr	r1, [pc, #16]	; e850 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    e83c:	e3a02e15 	mov	r2, #336	; 0x150
    e840:	ebfff78b 	bl	c674 <assertion_failed>
    e844:	e3a00000 	mov	r0, #0
    e848:	e8bd8008 	pop	{r3, pc}
    e84c:	000117bc 	.word	0x000117bc
    e850:	00011a04 	.word	0x00011a04

0000e854 <CMachineInfo::Get()>:
    e854:	e92d4010 	push	{r4, lr}
    e858:	e59f4020 	ldr	r4, [pc, #32]	; e880 <CMachineInfo::Get()+0x2c>
    e85c:	e5940000 	ldr	r0, [r4]
    e860:	e3500000 	cmp	r0, #0
    e864:	18bd8010 	popne	{r4, pc}
    e868:	e59f0014 	ldr	r0, [pc, #20]	; e884 <CMachineInfo::Get()+0x30>
    e86c:	e59f1014 	ldr	r1, [pc, #20]	; e888 <CMachineInfo::Get()+0x34>
    e870:	e59f2014 	ldr	r2, [pc, #20]	; e88c <CMachineInfo::Get()+0x38>
    e874:	ebfff77e 	bl	c674 <assertion_failed>
    e878:	e5940000 	ldr	r0, [r4]
    e87c:	e8bd8010 	pop	{r4, pc}
    e880:	00012930 	.word	0x00012930
    e884:	0001069c 	.word	0x0001069c
    e888:	00011a04 	.word	0x00011a04
    e88c:	00000159 	.word	0x00000159

0000e890 <CPtrList::CPtrList()>:
    e890:	e3a02000 	mov	r2, #0
    e894:	e5802000 	str	r2, [r0]
    e898:	e12fff1e 	bx	lr

0000e89c <CPtrList::~CPtrList()>:
    e89c:	e5903000 	ldr	r3, [r0]
    e8a0:	e92d4010 	push	{r4, lr}
    e8a4:	e3530000 	cmp	r3, #0
    e8a8:	e1a04000 	mov	r4, r0
    e8ac:	0a000003 	beq	e8c0 <CPtrList::~CPtrList()+0x24>
    e8b0:	e59f0010 	ldr	r0, [pc, #16]	; e8c8 <CPtrList::~CPtrList()+0x2c>
    e8b4:	e59f1010 	ldr	r1, [pc, #16]	; e8cc <CPtrList::~CPtrList()+0x30>
    e8b8:	e3a0202a 	mov	r2, #42	; 0x2a
    e8bc:	ebfff76c 	bl	c674 <assertion_failed>
    e8c0:	e1a00004 	mov	r0, r4
    e8c4:	e8bd8010 	pop	{r4, pc}
    e8c8:	00011af8 	.word	0x00011af8
    e8cc:	00011b08 	.word	0x00011b08

0000e8d0 <CPtrList::GetFirst()>:
    e8d0:	e5900000 	ldr	r0, [r0]
    e8d4:	e12fff1e 	bx	lr

0000e8d8 <CPtrList::GetNext(TPtrListElement*)>:
    e8d8:	e92d4010 	push	{r4, lr}
    e8dc:	e2514000 	subs	r4, r1, #0
    e8e0:	0a000009 	beq	e90c <CPtrList::GetNext(TPtrListElement*)+0x34>
    e8e4:	e59f3034 	ldr	r3, [pc, #52]	; e920 <CPtrList::GetNext(TPtrListElement*)+0x48>
    e8e8:	e5942000 	ldr	r2, [r4]
    e8ec:	e1520003 	cmp	r2, r3
    e8f0:	0a000003 	beq	e904 <CPtrList::GetNext(TPtrListElement*)+0x2c>
    e8f4:	e59f0028 	ldr	r0, [pc, #40]	; e924 <CPtrList::GetNext(TPtrListElement*)+0x4c>
    e8f8:	e59f1028 	ldr	r1, [pc, #40]	; e928 <CPtrList::GetNext(TPtrListElement*)+0x50>
    e8fc:	e3a02035 	mov	r2, #53	; 0x35
    e900:	ebfff75b 	bl	c674 <assertion_failed>
    e904:	e5940008 	ldr	r0, [r4, #8]
    e908:	e8bd8010 	pop	{r4, pc}
    e90c:	e59f0018 	ldr	r0, [pc, #24]	; e92c <CPtrList::GetNext(TPtrListElement*)+0x54>
    e910:	e59f1010 	ldr	r1, [pc, #16]	; e928 <CPtrList::GetNext(TPtrListElement*)+0x50>
    e914:	e3a02034 	mov	r2, #52	; 0x34
    e918:	ebfff755 	bl	c674 <assertion_failed>
    e91c:	eafffff0 	b	e8e4 <CPtrList::GetNext(TPtrListElement*)+0xc>
    e920:	504c4d43 	.word	0x504c4d43
    e924:	00011b24 	.word	0x00011b24
    e928:	00011b08 	.word	0x00011b08
    e92c:	00011b14 	.word	0x00011b14

0000e930 <CPtrList::GetPtr(TPtrListElement*)>:
    e930:	e92d4010 	push	{r4, lr}
    e934:	e2514000 	subs	r4, r1, #0
    e938:	0a000009 	beq	e964 <CPtrList::GetPtr(TPtrListElement*)+0x34>
    e93c:	e59f3034 	ldr	r3, [pc, #52]	; e978 <CPtrList::GetPtr(TPtrListElement*)+0x48>
    e940:	e5942000 	ldr	r2, [r4]
    e944:	e1520003 	cmp	r2, r3
    e948:	0a000003 	beq	e95c <CPtrList::GetPtr(TPtrListElement*)+0x2c>
    e94c:	e59f0028 	ldr	r0, [pc, #40]	; e97c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
    e950:	e59f1028 	ldr	r1, [pc, #40]	; e980 <CPtrList::GetPtr(TPtrListElement*)+0x50>
    e954:	e3a0203d 	mov	r2, #61	; 0x3d
    e958:	ebfff745 	bl	c674 <assertion_failed>
    e95c:	e594000c 	ldr	r0, [r4, #12]
    e960:	e8bd8010 	pop	{r4, pc}
    e964:	e59f0018 	ldr	r0, [pc, #24]	; e984 <CPtrList::GetPtr(TPtrListElement*)+0x54>
    e968:	e59f1010 	ldr	r1, [pc, #16]	; e980 <CPtrList::GetPtr(TPtrListElement*)+0x50>
    e96c:	e3a0203c 	mov	r2, #60	; 0x3c
    e970:	ebfff73f 	bl	c674 <assertion_failed>
    e974:	eafffff0 	b	e93c <CPtrList::GetPtr(TPtrListElement*)+0xc>
    e978:	504c4d43 	.word	0x504c4d43
    e97c:	00011b24 	.word	0x00011b24
    e980:	00011b08 	.word	0x00011b08
    e984:	00011b14 	.word	0x00011b14

0000e988 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    e988:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    e98c:	e1a06000 	mov	r6, r0
    e990:	e3a00010 	mov	r0, #16
    e994:	e1a07002 	mov	r7, r2
    e998:	e1a04001 	mov	r4, r1
    e99c:	ebffed28 	bl	9e44 <operator new(unsigned int)>
    e9a0:	e5962000 	ldr	r2, [r6]
    e9a4:	e59f30c4 	ldr	r3, [pc, #196]	; ea70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>
    e9a8:	e3520000 	cmp	r2, #0
    e9ac:	e1a05000 	mov	r5, r0
    e9b0:	e580700c 	str	r7, [r0, #12]
    e9b4:	e5803000 	str	r3, [r0]
    e9b8:	0a000022 	beq	ea48 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    e9bc:	e3540000 	cmp	r4, #0
    e9c0:	0a000025 	beq	ea5c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
    e9c4:	e59f30a4 	ldr	r3, [pc, #164]	; ea70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>
    e9c8:	e5942000 	ldr	r2, [r4]
    e9cc:	e1520003 	cmp	r2, r3
    e9d0:	0a000003 	beq	e9e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
    e9d4:	e59f0098 	ldr	r0, [pc, #152]	; ea74 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xec>
    e9d8:	e59f1098 	ldr	r1, [pc, #152]	; ea78 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e9dc:	e3a0204e 	mov	r2, #78	; 0x4e
    e9e0:	ebfff723 	bl	c674 <assertion_failed>
    e9e4:	e5963000 	ldr	r3, [r6]
    e9e8:	e1530004 	cmp	r3, r4
    e9ec:	0a000010 	beq	ea34 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
    e9f0:	e5943004 	ldr	r3, [r4, #4]
    e9f4:	e9850018 	stmib	r5, {r3, r4}
    e9f8:	e5943004 	ldr	r3, [r4, #4]
    e9fc:	e3530000 	cmp	r3, #0
    ea00:	0a000009 	beq	ea2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa4>
    ea04:	e59f2064 	ldr	r2, [pc, #100]	; ea70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>
    ea08:	e5931000 	ldr	r1, [r3]
    ea0c:	e1510002 	cmp	r1, r2
    ea10:	0a000004 	beq	ea28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
    ea14:	e59f0060 	ldr	r0, [pc, #96]	; ea7c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    ea18:	e59f1058 	ldr	r1, [pc, #88]	; ea78 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ea1c:	e3a02060 	mov	r2, #96	; 0x60
    ea20:	ebfff713 	bl	c674 <assertion_failed>
    ea24:	e5943004 	ldr	r3, [r4, #4]
    ea28:	e5835008 	str	r5, [r3, #8]
    ea2c:	e5845004 	str	r5, [r4, #4]
    ea30:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ea34:	e3a03000 	mov	r3, #0
    ea38:	e9850018 	stmib	r5, {r3, r4}
    ea3c:	e5845004 	str	r5, [r4, #4]
    ea40:	e5865000 	str	r5, [r6]
    ea44:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ea48:	e59f0030 	ldr	r0, [pc, #48]	; ea80 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
    ea4c:	e59f1024 	ldr	r1, [pc, #36]	; ea78 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ea50:	e3a0204c 	mov	r2, #76	; 0x4c
    ea54:	ebfff706 	bl	c674 <assertion_failed>
    ea58:	eaffffd7 	b	e9bc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
    ea5c:	e59f0020 	ldr	r0, [pc, #32]	; ea84 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    ea60:	e59f1010 	ldr	r1, [pc, #16]	; ea78 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    ea64:	e3a0204d 	mov	r2, #77	; 0x4d
    ea68:	ebfff701 	bl	c674 <assertion_failed>
    ea6c:	eaffffd4 	b	e9c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
    ea70:	504c4d43 	.word	0x504c4d43
    ea74:	00011b64 	.word	0x00011b64
    ea78:	00011b08 	.word	0x00011b08
    ea7c:	00011b88 	.word	0x00011b88
    ea80:	00011b48 	.word	0x00011b48
    ea84:	00011b58 	.word	0x00011b58

0000ea88 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    ea88:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    ea8c:	e1a06000 	mov	r6, r0
    ea90:	e1a05001 	mov	r5, r1
    ea94:	e3a00010 	mov	r0, #16
    ea98:	e1a07002 	mov	r7, r2
    ea9c:	ebffece8 	bl	9e44 <operator new(unsigned int)>
    eaa0:	e59f30c4 	ldr	r3, [pc, #196]	; eb6c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    eaa4:	e3550000 	cmp	r5, #0
    eaa8:	e5803000 	str	r3, [r0]
    eaac:	e1a04000 	mov	r4, r0
    eab0:	e580700c 	str	r7, [r0, #12]
    eab4:	e5963000 	ldr	r3, [r6]
    eab8:	0a00001b 	beq	eb2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa4>
    eabc:	e3530000 	cmp	r3, #0
    eac0:	0a000024 	beq	eb58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
    eac4:	e59f30a0 	ldr	r3, [pc, #160]	; eb6c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    eac8:	e5952000 	ldr	r2, [r5]
    eacc:	e1520003 	cmp	r2, r3
    ead0:	0a000003 	beq	eae4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
    ead4:	e59f0094 	ldr	r0, [pc, #148]	; eb70 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    ead8:	e59f1094 	ldr	r1, [pc, #148]	; eb74 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    eadc:	e3a0207e 	mov	r2, #126	; 0x7e
    eae0:	ebfff6e3 	bl	c674 <assertion_failed>
    eae4:	e5953008 	ldr	r3, [r5, #8]
    eae8:	e5845004 	str	r5, [r4, #4]
    eaec:	e5843008 	str	r3, [r4, #8]
    eaf0:	e5953008 	ldr	r3, [r5, #8]
    eaf4:	e3530000 	cmp	r3, #0
    eaf8:	0a000009 	beq	eb24 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
    eafc:	e59f2068 	ldr	r2, [pc, #104]	; eb6c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    eb00:	e5931000 	ldr	r1, [r3]
    eb04:	e1510002 	cmp	r1, r2
    eb08:	0a000004 	beq	eb20 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
    eb0c:	e59f0064 	ldr	r0, [pc, #100]	; eb78 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    eb10:	e59f105c 	ldr	r1, [pc, #92]	; eb74 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    eb14:	e3a02085 	mov	r2, #133	; 0x85
    eb18:	ebfff6d5 	bl	c674 <assertion_failed>
    eb1c:	e5953008 	ldr	r3, [r5, #8]
    eb20:	e5834004 	str	r4, [r3, #4]
    eb24:	e5854008 	str	r4, [r5, #8]
    eb28:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    eb2c:	e3530000 	cmp	r3, #0
    eb30:	0a000003 	beq	eb44 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    eb34:	e59f0040 	ldr	r0, [pc, #64]	; eb7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
    eb38:	e59f1034 	ldr	r1, [pc, #52]	; eb74 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    eb3c:	e3a02074 	mov	r2, #116	; 0x74
    eb40:	ebfff6cb 	bl	c674 <assertion_failed>
    eb44:	e3a03000 	mov	r3, #0
    eb48:	e5843004 	str	r3, [r4, #4]
    eb4c:	e5843008 	str	r3, [r4, #8]
    eb50:	e5864000 	str	r4, [r6]
    eb54:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    eb58:	e59f0020 	ldr	r0, [pc, #32]	; eb80 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf8>
    eb5c:	e59f1010 	ldr	r1, [pc, #16]	; eb74 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    eb60:	e3a0207d 	mov	r2, #125	; 0x7d
    eb64:	ebfff6c2 	bl	c674 <assertion_failed>
    eb68:	eaffffd5 	b	eac4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
    eb6c:	504c4d43 	.word	0x504c4d43
    eb70:	00011bb0 	.word	0x00011bb0
    eb74:	00011b08 	.word	0x00011b08
    eb78:	00011bd4 	.word	0x00011bd4
    eb7c:	00011af8 	.word	0x00011af8
    eb80:	00011b48 	.word	0x00011b48

0000eb84 <CPtrList::Remove(TPtrListElement*)>:
    eb84:	e92d4038 	push	{r3, r4, r5, lr}
    eb88:	e2514000 	subs	r4, r1, #0
    eb8c:	e1a05000 	mov	r5, r0
    eb90:	0a00003b 	beq	ec84 <CPtrList::Remove(TPtrListElement*)+0x100>
    eb94:	e59f3114 	ldr	r3, [pc, #276]	; ecb0 <CPtrList::Remove(TPtrListElement*)+0x12c>
    eb98:	e5942000 	ldr	r2, [r4]
    eb9c:	e1520003 	cmp	r2, r3
    eba0:	0a000003 	beq	ebb4 <CPtrList::Remove(TPtrListElement*)+0x30>
    eba4:	e59f0108 	ldr	r0, [pc, #264]	; ecb4 <CPtrList::Remove(TPtrListElement*)+0x130>
    eba8:	e59f1108 	ldr	r1, [pc, #264]	; ecb8 <CPtrList::Remove(TPtrListElement*)+0x134>
    ebac:	e3a02090 	mov	r2, #144	; 0x90
    ebb0:	ebfff6af 	bl	c674 <assertion_failed>
    ebb4:	e5953000 	ldr	r3, [r5]
    ebb8:	e1530004 	cmp	r3, r4
    ebbc:	0a000020 	beq	ec44 <CPtrList::Remove(TPtrListElement*)+0xc0>
    ebc0:	e5943004 	ldr	r3, [r4, #4]
    ebc4:	e3530000 	cmp	r3, #0
    ebc8:	0a000032 	beq	ec98 <CPtrList::Remove(TPtrListElement*)+0x114>
    ebcc:	e59f20dc 	ldr	r2, [pc, #220]	; ecb0 <CPtrList::Remove(TPtrListElement*)+0x12c>
    ebd0:	e5931000 	ldr	r1, [r3]
    ebd4:	e1510002 	cmp	r1, r2
    ebd8:	0a000004 	beq	ebf0 <CPtrList::Remove(TPtrListElement*)+0x6c>
    ebdc:	e59f00d8 	ldr	r0, [pc, #216]	; ecbc <CPtrList::Remove(TPtrListElement*)+0x138>
    ebe0:	e59f10d0 	ldr	r1, [pc, #208]	; ecb8 <CPtrList::Remove(TPtrListElement*)+0x134>
    ebe4:	e3a0209f 	mov	r2, #159	; 0x9f
    ebe8:	ebfff6a1 	bl	c674 <assertion_failed>
    ebec:	e5943004 	ldr	r3, [r4, #4]
    ebf0:	e5942008 	ldr	r2, [r4, #8]
    ebf4:	e5832008 	str	r2, [r3, #8]
    ebf8:	e5942008 	ldr	r2, [r4, #8]
    ebfc:	e3520000 	cmp	r2, #0
    ec00:	0a00000a 	beq	ec30 <CPtrList::Remove(TPtrListElement*)+0xac>
    ec04:	e59f10a4 	ldr	r1, [pc, #164]	; ecb0 <CPtrList::Remove(TPtrListElement*)+0x12c>
    ec08:	e5920000 	ldr	r0, [r2]
    ec0c:	e1500001 	cmp	r0, r1
    ec10:	0a000005 	beq	ec2c <CPtrList::Remove(TPtrListElement*)+0xa8>
    ec14:	e3a020a4 	mov	r2, #164	; 0xa4
    ec18:	e59f00a0 	ldr	r0, [pc, #160]	; ecc0 <CPtrList::Remove(TPtrListElement*)+0x13c>
    ec1c:	e59f1094 	ldr	r1, [pc, #148]	; ecb8 <CPtrList::Remove(TPtrListElement*)+0x134>
    ec20:	ebfff693 	bl	c674 <assertion_failed>
    ec24:	e5942008 	ldr	r2, [r4, #8]
    ec28:	e5943004 	ldr	r3, [r4, #4]
    ec2c:	e5823004 	str	r3, [r2, #4]
    ec30:	e3a03000 	mov	r3, #0
    ec34:	e1a00004 	mov	r0, r4
    ec38:	e5843000 	str	r3, [r4]
    ec3c:	e8bd4038 	pop	{r3, r4, r5, lr}
    ec40:	eaffec81 	b	9e4c <operator delete(void*)>
    ec44:	e5943008 	ldr	r3, [r4, #8]
    ec48:	e3530000 	cmp	r3, #0
    ec4c:	e5853000 	str	r3, [r5]
    ec50:	0afffff6 	beq	ec30 <CPtrList::Remove(TPtrListElement*)+0xac>
    ec54:	e59f2054 	ldr	r2, [pc, #84]	; ecb0 <CPtrList::Remove(TPtrListElement*)+0x12c>
    ec58:	e5931000 	ldr	r1, [r3]
    ec5c:	e1510002 	cmp	r1, r2
    ec60:	0a000004 	beq	ec78 <CPtrList::Remove(TPtrListElement*)+0xf4>
    ec64:	e59f0054 	ldr	r0, [pc, #84]	; ecc0 <CPtrList::Remove(TPtrListElement*)+0x13c>
    ec68:	e59f1048 	ldr	r1, [pc, #72]	; ecb8 <CPtrList::Remove(TPtrListElement*)+0x134>
    ec6c:	e3a02098 	mov	r2, #152	; 0x98
    ec70:	ebfff67f 	bl	c674 <assertion_failed>
    ec74:	e5943008 	ldr	r3, [r4, #8]
    ec78:	e3a02000 	mov	r2, #0
    ec7c:	e5832004 	str	r2, [r3, #4]
    ec80:	eaffffea 	b	ec30 <CPtrList::Remove(TPtrListElement*)+0xac>
    ec84:	e59f0038 	ldr	r0, [pc, #56]	; ecc4 <CPtrList::Remove(TPtrListElement*)+0x140>
    ec88:	e59f1028 	ldr	r1, [pc, #40]	; ecb8 <CPtrList::Remove(TPtrListElement*)+0x134>
    ec8c:	e3a0208f 	mov	r2, #143	; 0x8f
    ec90:	ebfff677 	bl	c674 <assertion_failed>
    ec94:	eaffffbe 	b	eb94 <CPtrList::Remove(TPtrListElement*)+0x10>
    ec98:	e59f0028 	ldr	r0, [pc, #40]	; ecc8 <CPtrList::Remove(TPtrListElement*)+0x144>
    ec9c:	e59f1014 	ldr	r1, [pc, #20]	; ecb8 <CPtrList::Remove(TPtrListElement*)+0x134>
    eca0:	e3a0209e 	mov	r2, #158	; 0x9e
    eca4:	ebfff672 	bl	c674 <assertion_failed>
    eca8:	e5943004 	ldr	r3, [r4, #4]
    ecac:	eaffffc6 	b	ebcc <CPtrList::Remove(TPtrListElement*)+0x48>
    ecb0:	504c4d43 	.word	0x504c4d43
    ecb4:	00011b24 	.word	0x00011b24
    ecb8:	00011b08 	.word	0x00011b08
    ecbc:	00011c44 	.word	0x00011c44
    ecc0:	00011c00 	.word	0x00011c00
    ecc4:	00011b14 	.word	0x00011b14
    ecc8:	00011c2c 	.word	0x00011c2c

0000eccc <CPtrList::Find(void*)>:
    eccc:	e92d4070 	push	{r4, r5, r6, lr}
    ecd0:	e5904000 	ldr	r4, [r0]
    ecd4:	e3540000 	cmp	r4, #0
    ecd8:	0a000011 	beq	ed24 <CPtrList::Find(void*)+0x58>
    ecdc:	e1a05001 	mov	r5, r1
    ece0:	e59f6044 	ldr	r6, [pc, #68]	; ed2c <CPtrList::Find(void*)+0x60>
    ece4:	ea000002 	b	ecf4 <CPtrList::Find(void*)+0x28>
    ece8:	e5944008 	ldr	r4, [r4, #8]
    ecec:	e3540000 	cmp	r4, #0
    ecf0:	0a00000b 	beq	ed24 <CPtrList::Find(void*)+0x58>
    ecf4:	e5943000 	ldr	r3, [r4]
    ecf8:	e59f0030 	ldr	r0, [pc, #48]	; ed30 <CPtrList::Find(void*)+0x64>
    ecfc:	e1530006 	cmp	r3, r6
    ed00:	e59f102c 	ldr	r1, [pc, #44]	; ed34 <CPtrList::Find(void*)+0x68>
    ed04:	0a000001 	beq	ed10 <CPtrList::Find(void*)+0x44>
    ed08:	e3a020b3 	mov	r2, #179	; 0xb3
    ed0c:	ebfff658 	bl	c674 <assertion_failed>
    ed10:	e594300c 	ldr	r3, [r4, #12]
    ed14:	e1530005 	cmp	r3, r5
    ed18:	1afffff2 	bne	ece8 <CPtrList::Find(void*)+0x1c>
    ed1c:	e1a00004 	mov	r0, r4
    ed20:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed24:	e3a00000 	mov	r0, #0
    ed28:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed2c:	504c4d43 	.word	0x504c4d43
    ed30:	00011b24 	.word	0x00011b24
    ed34:	00011b08 	.word	0x00011b08

0000ed38 <mem_init>:
    ed38:	e3500605 	cmp	r0, #5242880	; 0x500000
    ed3c:	21a0c000 	movcs	ip, r0
    ed40:	33a0c605 	movcc	ip, #5242880	; 0x500000
    ed44:	e0801001 	add	r1, r0, r1
    ed48:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    ed4c:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    ed50:	e59f2018 	ldr	r2, [pc, #24]	; ed70 <mem_init+0x38>
    ed54:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    ed58:	e2410501 	sub	r0, r1, #4194304	; 0x400000
    ed5c:	e3c3300f 	bic	r3, r3, #15
    ed60:	e582c000 	str	ip, [r2]
    ed64:	e582100c 	str	r1, [r2, #12]
    ed68:	e9820009 	stmib	r2, {r0, r3}
    ed6c:	e12fff1e 	bx	lr
    ed70:	00012934 	.word	0x00012934

0000ed74 <mem_get_size>:
    ed74:	e59f301c 	ldr	r3, [pc, #28]	; ed98 <mem_get_size+0x24>
    ed78:	e593100c 	ldr	r1, [r3, #12]
    ed7c:	e5930008 	ldr	r0, [r3, #8]
    ed80:	e5932004 	ldr	r2, [r3, #4]
    ed84:	e5933000 	ldr	r3, [r3]
    ed88:	e0600001 	rsb	r0, r0, r1
    ed8c:	e0633002 	rsb	r3, r3, r2
    ed90:	e0800003 	add	r0, r0, r3
    ed94:	e12fff1e 	bx	lr
    ed98:	00012934 	.word	0x00012934

0000ed9c <malloc>:
    ed9c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    eda0:	e59f719c 	ldr	r7, [pc, #412]	; ef44 <malloc+0x1a8>
    eda4:	e1a05000 	mov	r5, r0
    eda8:	e5973000 	ldr	r3, [r7]
    edac:	e3530000 	cmp	r3, #0
    edb0:	0a00005e 	beq	ef30 <malloc+0x194>
    edb4:	e5973010 	ldr	r3, [r7, #16]
    edb8:	e3530000 	cmp	r3, #0
    edbc:	1a000053 	bne	ef10 <malloc+0x174>
    edc0:	e59f4180 	ldr	r4, [pc, #384]	; ef48 <malloc+0x1ac>
    edc4:	e5943000 	ldr	r3, [r4]
    edc8:	e3530000 	cmp	r3, #0
    edcc:	1a000003 	bne	ede0 <malloc+0x44>
    edd0:	ea00002b 	b	ee84 <malloc+0xe8>
    edd4:	e5b43008 	ldr	r3, [r4, #8]!
    edd8:	e3530000 	cmp	r3, #0
    eddc:	0a000028 	beq	ee84 <malloc+0xe8>
    ede0:	e1530005 	cmp	r3, r5
    ede4:	3afffffa 	bcc	edd4 <malloc+0x38>
    ede8:	e5946004 	ldr	r6, [r4, #4]
    edec:	e3560000 	cmp	r6, #0
    edf0:	01a05003 	moveq	r5, r3
    edf4:	0a000022 	beq	ee84 <malloc+0xe8>
    edf8:	e5d61001 	ldrb	r1, [r6, #1]
    edfc:	e5d62000 	ldrb	r2, [r6]
    ee00:	e5d63002 	ldrb	r3, [r6, #2]
    ee04:	e1822401 	orr	r2, r2, r1, lsl #8
    ee08:	e5d61003 	ldrb	r1, [r6, #3]
    ee0c:	e1823803 	orr	r3, r2, r3, lsl #16
    ee10:	e59f2134 	ldr	r2, [pc, #308]	; ef4c <malloc+0x1b0>
    ee14:	e1833c01 	orr	r3, r3, r1, lsl #24
    ee18:	e1530002 	cmp	r3, r2
    ee1c:	0a000003 	beq	ee30 <malloc+0x94>
    ee20:	e59f0128 	ldr	r0, [pc, #296]	; ef50 <malloc+0x1b4>
    ee24:	e59f1128 	ldr	r1, [pc, #296]	; ef54 <malloc+0x1b8>
    ee28:	e3a02089 	mov	r2, #137	; 0x89
    ee2c:	ebfff610 	bl	c674 <assertion_failed>
    ee30:	e5d61009 	ldrb	r1, [r6, #9]
    ee34:	e5d62008 	ldrb	r2, [r6, #8]
    ee38:	e5d6300a 	ldrb	r3, [r6, #10]
    ee3c:	e1822401 	orr	r2, r2, r1, lsl #8
    ee40:	e5d6100b 	ldrb	r1, [r6, #11]
    ee44:	e1823803 	orr	r3, r2, r3, lsl #16
    ee48:	e1833c01 	orr	r3, r3, r1, lsl #24
    ee4c:	e5843004 	str	r3, [r4, #4]
    ee50:	e5973010 	ldr	r3, [r7, #16]
    ee54:	e3530000 	cmp	r3, #0
    ee58:	1a00002a 	bne	ef08 <malloc+0x16c>
    ee5c:	e3a03000 	mov	r3, #0
    ee60:	e2864010 	add	r4, r6, #16
    ee64:	e314000f 	tst	r4, #15
    ee68:	e5c63008 	strb	r3, [r6, #8]
    ee6c:	e5c63009 	strb	r3, [r6, #9]
    ee70:	e5c6300a 	strb	r3, [r6, #10]
    ee74:	e5c6300b 	strb	r3, [r6, #11]
    ee78:	1a000026 	bne	ef18 <malloc+0x17c>
    ee7c:	e1a00004 	mov	r0, r4
    ee80:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ee84:	e5976000 	ldr	r6, [r7]
    ee88:	e285301f 	add	r3, r5, #31
    ee8c:	e3c3300f 	bic	r3, r3, #15
    ee90:	e5972004 	ldr	r2, [r7, #4]
    ee94:	e0863003 	add	r3, r6, r3
    ee98:	e1530002 	cmp	r3, r2
    ee9c:	e5873000 	str	r3, [r7]
    eea0:	e59f309c 	ldr	r3, [pc, #156]	; ef44 <malloc+0x1a8>
    eea4:	9a000005 	bls	eec0 <malloc+0x124>
    eea8:	e5934010 	ldr	r4, [r3, #16]
    eeac:	e3540000 	cmp	r4, #0
    eeb0:	0afffff1 	beq	ee7c <malloc+0xe0>
    eeb4:	ebffebf5 	bl	9e90 <LeaveCritical>
    eeb8:	e3a00000 	mov	r0, #0
    eebc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    eec0:	e3a04043 	mov	r4, #67	; 0x43
    eec4:	e3a0e04d 	mov	lr, #77	; 0x4d
    eec8:	e3a0c04c 	mov	ip, #76	; 0x4c
    eecc:	e3a00042 	mov	r0, #66	; 0x42
    eed0:	e1a03c25 	lsr	r3, r5, #24
    eed4:	e5c63007 	strb	r3, [r6, #7]
    eed8:	e5973010 	ldr	r3, [r7, #16]
    eedc:	e1a01425 	lsr	r1, r5, #8
    eee0:	e1a02825 	lsr	r2, r5, #16
    eee4:	e3530000 	cmp	r3, #0
    eee8:	e5c65004 	strb	r5, [r6, #4]
    eeec:	e5c64000 	strb	r4, [r6]
    eef0:	e5c6e001 	strb	lr, [r6, #1]
    eef4:	e5c6c002 	strb	ip, [r6, #2]
    eef8:	e5c60003 	strb	r0, [r6, #3]
    eefc:	e5c61005 	strb	r1, [r6, #5]
    ef00:	e5c62006 	strb	r2, [r6, #6]
    ef04:	0affffd4 	beq	ee5c <malloc+0xc0>
    ef08:	ebffebe0 	bl	9e90 <LeaveCritical>
    ef0c:	eaffffd2 	b	ee5c <malloc+0xc0>
    ef10:	ebffebcf 	bl	9e54 <EnterCritical>
    ef14:	eaffffa9 	b	edc0 <malloc+0x24>
    ef18:	e59f0038 	ldr	r0, [pc, #56]	; ef58 <malloc+0x1bc>
    ef1c:	e59f1030 	ldr	r1, [pc, #48]	; ef54 <malloc+0x1b8>
    ef20:	e3a020a1 	mov	r2, #161	; 0xa1
    ef24:	ebfff5d2 	bl	c674 <assertion_failed>
    ef28:	e1a00004 	mov	r0, r4
    ef2c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    ef30:	e59f0024 	ldr	r0, [pc, #36]	; ef5c <malloc+0x1c0>
    ef34:	e59f1018 	ldr	r1, [pc, #24]	; ef54 <malloc+0x1b8>
    ef38:	e3a0206f 	mov	r2, #111	; 0x6f
    ef3c:	ebfff5cc 	bl	c674 <assertion_failed>
    ef40:	eaffff9b 	b	edb4 <malloc+0x18>
    ef44:	00012934 	.word	0x00012934
    ef48:	00012848 	.word	0x00012848
    ef4c:	424c4d43 	.word	0x424c4d43
    ef50:	00011c90 	.word	0x00011c90
    ef54:	00011c84 	.word	0x00011c84
    ef58:	00011cb4 	.word	0x00011cb4
    ef5c:	00011c70 	.word	0x00011c70

0000ef60 <free>:
    ef60:	e3500000 	cmp	r0, #0
    ef64:	012fff1e 	bxeq	lr
    ef68:	e92d4070 	push	{r4, r5, r6, lr}
    ef6c:	e2405010 	sub	r5, r0, #16
    ef70:	e5d51001 	ldrb	r1, [r5, #1]
    ef74:	e5502010 	ldrb	r2, [r0, #-16]
    ef78:	e5d53002 	ldrb	r3, [r5, #2]
    ef7c:	e1822401 	orr	r2, r2, r1, lsl #8
    ef80:	e5d51003 	ldrb	r1, [r5, #3]
    ef84:	e1823803 	orr	r3, r2, r3, lsl #16
    ef88:	e59f20dc 	ldr	r2, [pc, #220]	; f06c <free+0x10c>
    ef8c:	e1833c01 	orr	r3, r3, r1, lsl #24
    ef90:	e1530002 	cmp	r3, r2
    ef94:	0a000003 	beq	efa8 <free+0x48>
    ef98:	e59f00d0 	ldr	r0, [pc, #208]	; f070 <free+0x110>
    ef9c:	e59f10d0 	ldr	r1, [pc, #208]	; f074 <free+0x114>
    efa0:	e3a020ae 	mov	r2, #174	; 0xae
    efa4:	ebfff5b2 	bl	c674 <assertion_failed>
    efa8:	e59f40c8 	ldr	r4, [pc, #200]	; f078 <free+0x118>
    efac:	e5940000 	ldr	r0, [r4]
    efb0:	e3500000 	cmp	r0, #0
    efb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    efb8:	e5d51004 	ldrb	r1, [r5, #4]
    efbc:	e5d53005 	ldrb	r3, [r5, #5]
    efc0:	e5d52006 	ldrb	r2, [r5, #6]
    efc4:	e1813403 	orr	r3, r1, r3, lsl #8
    efc8:	e5d51007 	ldrb	r1, [r5, #7]
    efcc:	e1833802 	orr	r3, r3, r2, lsl #16
    efd0:	e1832c01 	orr	r2, r3, r1, lsl #24
    efd4:	e1500002 	cmp	r0, r2
    efd8:	1a000002 	bne	efe8 <free+0x88>
    efdc:	ea000005 	b	eff8 <free+0x98>
    efe0:	e1530002 	cmp	r3, r2
    efe4:	0a000003 	beq	eff8 <free+0x98>
    efe8:	e5b43008 	ldr	r3, [r4, #8]!
    efec:	e3530000 	cmp	r3, #0
    eff0:	1afffffa 	bne	efe0 <free+0x80>
    eff4:	e8bd8070 	pop	{r4, r5, r6, pc}
    eff8:	e59f607c 	ldr	r6, [pc, #124]	; f07c <free+0x11c>
    effc:	e5963010 	ldr	r3, [r6, #16]
    f000:	e3530000 	cmp	r3, #0
    f004:	1a000009 	bne	f030 <free+0xd0>
    f008:	e5d40004 	ldrb	r0, [r4, #4]
    f00c:	e5d41005 	ldrb	r1, [r4, #5]
    f010:	e5d42006 	ldrb	r2, [r4, #6]
    f014:	e5d43007 	ldrb	r3, [r4, #7]
    f018:	e5c50008 	strb	r0, [r5, #8]
    f01c:	e5c51009 	strb	r1, [r5, #9]
    f020:	e5c5200a 	strb	r2, [r5, #10]
    f024:	e5c5300b 	strb	r3, [r5, #11]
    f028:	e5845004 	str	r5, [r4, #4]
    f02c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f030:	ebffeb87 	bl	9e54 <EnterCritical>
    f034:	e596c010 	ldr	ip, [r6, #16]
    f038:	e5d40004 	ldrb	r0, [r4, #4]
    f03c:	e5d41005 	ldrb	r1, [r4, #5]
    f040:	e5d42006 	ldrb	r2, [r4, #6]
    f044:	e5d43007 	ldrb	r3, [r4, #7]
    f048:	e35c0000 	cmp	ip, #0
    f04c:	e5c50008 	strb	r0, [r5, #8]
    f050:	e5c51009 	strb	r1, [r5, #9]
    f054:	e5c5200a 	strb	r2, [r5, #10]
    f058:	e5c5300b 	strb	r3, [r5, #11]
    f05c:	e5845004 	str	r5, [r4, #4]
    f060:	08bd8070 	popeq	{r4, r5, r6, pc}
    f064:	e8bd4070 	pop	{r4, r5, r6, lr}
    f068:	eaffeb88 	b	9e90 <LeaveCritical>
    f06c:	424c4d43 	.word	0x424c4d43
    f070:	00011c90 	.word	0x00011c90
    f074:	00011c84 	.word	0x00011c84
    f078:	00012848 	.word	0x00012848
    f07c:	00012934 	.word	0x00012934

0000f080 <palloc>:
    f080:	e92d4038 	push	{r3, r4, r5, lr}
    f084:	e59f50d0 	ldr	r5, [pc, #208]	; f15c <palloc+0xdc>
    f088:	e5953008 	ldr	r3, [r5, #8]
    f08c:	e3530000 	cmp	r3, #0
    f090:	0a00002a 	beq	f140 <palloc+0xc0>
    f094:	e5953014 	ldr	r3, [r5, #20]
    f098:	e3530000 	cmp	r3, #0
    f09c:	1a000014 	bne	f0f4 <palloc+0x74>
    f0a0:	e5954018 	ldr	r4, [r5, #24]
    f0a4:	e59f30b0 	ldr	r3, [pc, #176]	; f15c <palloc+0xdc>
    f0a8:	e3540000 	cmp	r4, #0
    f0ac:	0a000015 	beq	f108 <palloc+0x88>
    f0b0:	e59f30a8 	ldr	r3, [pc, #168]	; f160 <palloc+0xe0>
    f0b4:	e5942000 	ldr	r2, [r4]
    f0b8:	e1520003 	cmp	r2, r3
    f0bc:	0a000003 	beq	f0d0 <palloc+0x50>
    f0c0:	e59f009c 	ldr	r0, [pc, #156]	; f164 <palloc+0xe4>
    f0c4:	e59f109c 	ldr	r1, [pc, #156]	; f168 <palloc+0xe8>
    f0c8:	e3a020d4 	mov	r2, #212	; 0xd4
    f0cc:	ebfff568 	bl	c674 <assertion_failed>
    f0d0:	e3a02000 	mov	r2, #0
    f0d4:	e5943004 	ldr	r3, [r4, #4]
    f0d8:	e5842000 	str	r2, [r4]
    f0dc:	e5853018 	str	r3, [r5, #24]
    f0e0:	e5953014 	ldr	r3, [r5, #20]
    f0e4:	e3530000 	cmp	r3, #0
    f0e8:	1a000011 	bne	f134 <palloc+0xb4>
    f0ec:	e1a00004 	mov	r0, r4
    f0f0:	e8bd8038 	pop	{r3, r4, r5, pc}
    f0f4:	ebffeb56 	bl	9e54 <EnterCritical>
    f0f8:	e5954018 	ldr	r4, [r5, #24]
    f0fc:	e59f3058 	ldr	r3, [pc, #88]	; f15c <palloc+0xdc>
    f100:	e3540000 	cmp	r4, #0
    f104:	1affffe9 	bne	f0b0 <palloc+0x30>
    f108:	e5934008 	ldr	r4, [r3, #8]
    f10c:	e593100c 	ldr	r1, [r3, #12]
    f110:	e2842a01 	add	r2, r4, #4096	; 0x1000
    f114:	e1520001 	cmp	r2, r1
    f118:	e5832008 	str	r2, [r3, #8]
    f11c:	9affffef 	bls	f0e0 <palloc+0x60>
    f120:	e5934014 	ldr	r4, [r3, #20]
    f124:	e3540000 	cmp	r4, #0
    f128:	1a000009 	bne	f154 <palloc+0xd4>
    f12c:	e3a00000 	mov	r0, #0
    f130:	e8bd8038 	pop	{r3, r4, r5, pc}
    f134:	ebffeb55 	bl	9e90 <LeaveCritical>
    f138:	e1a00004 	mov	r0, r4
    f13c:	e8bd8038 	pop	{r3, r4, r5, pc}
    f140:	e59f0024 	ldr	r0, [pc, #36]	; f16c <palloc+0xec>
    f144:	e59f101c 	ldr	r1, [pc, #28]	; f168 <palloc+0xe8>
    f148:	e3a020c6 	mov	r2, #198	; 0xc6
    f14c:	ebfff548 	bl	c674 <assertion_failed>
    f150:	eaffffcf 	b	f094 <palloc+0x14>
    f154:	ebffeb4d 	bl	9e90 <LeaveCritical>
    f158:	eafffff3 	b	f12c <palloc+0xac>
    f15c:	00012934 	.word	0x00012934
    f160:	50474d43 	.word	0x50474d43
    f164:	00011cf4 	.word	0x00011cf4
    f168:	00011c84 	.word	0x00011c84
    f16c:	00011ce0 	.word	0x00011ce0

0000f170 <pfree>:
    f170:	e3500000 	cmp	r0, #0
    f174:	012fff1e 	bxeq	lr
    f178:	e92d4038 	push	{r3, r4, r5, lr}
    f17c:	e59f5048 	ldr	r5, [pc, #72]	; f1cc <pfree+0x5c>
    f180:	e5953014 	ldr	r3, [r5, #20]
    f184:	e3530000 	cmp	r3, #0
    f188:	1a000004 	bne	f1a0 <pfree+0x30>
    f18c:	e5953018 	ldr	r3, [r5, #24]
    f190:	e59f2038 	ldr	r2, [pc, #56]	; f1d0 <pfree+0x60>
    f194:	e5850018 	str	r0, [r5, #24]
    f198:	e880000c 	stm	r0, {r2, r3}
    f19c:	e8bd8038 	pop	{r3, r4, r5, pc}
    f1a0:	e1a04000 	mov	r4, r0
    f1a4:	ebffeb2a 	bl	9e54 <EnterCritical>
    f1a8:	e5951014 	ldr	r1, [r5, #20]
    f1ac:	e5953018 	ldr	r3, [r5, #24]
    f1b0:	e59f2018 	ldr	r2, [pc, #24]	; f1d0 <pfree+0x60>
    f1b4:	e3510000 	cmp	r1, #0
    f1b8:	e884000c 	stm	r4, {r2, r3}
    f1bc:	e5854018 	str	r4, [r5, #24]
    f1c0:	08bd8038 	popeq	{r3, r4, r5, pc}
    f1c4:	e8bd4038 	pop	{r3, r4, r5, lr}
    f1c8:	eaffeb30 	b	9e90 <LeaveCritical>
    f1cc:	00012934 	.word	0x00012934
    f1d0:	50474d43 	.word	0x50474d43

0000f1d4 <_GLOBAL__sub_I_mem_init>:
    f1d4:	e3a02001 	mov	r2, #1
    f1d8:	e59f3008 	ldr	r3, [pc, #8]	; f1e8 <_GLOBAL__sub_I_mem_init+0x14>
    f1dc:	e5832010 	str	r2, [r3, #16]
    f1e0:	e5832014 	str	r2, [r3, #20]
    f1e4:	e12fff1e 	bx	lr
    f1e8:	00012934 	.word	0x00012934

0000f1ec <CBcmMailBox::CBcmMailBox(unsigned int)>:
    f1ec:	e3a02000 	mov	r2, #0
    f1f0:	e8800006 	stm	r0, {r1, r2}
    f1f4:	e12fff1e 	bx	lr

0000f1f8 <CBcmMailBox::~CBcmMailBox()>:
    f1f8:	e12fff1e 	bx	lr

0000f1fc <CBcmMailBox::Flush()>:
    f1fc:	e92d4010 	push	{r4, lr}
    f200:	e59f4024 	ldr	r4, [pc, #36]	; f22c <CBcmMailBox::Flush()+0x30>
    f204:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f208:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f20c:	18bd8010 	popne	{r4, pc}
    f210:	e3a00014 	mov	r0, #20
    f214:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f218:	ebffee33 	bl	aaec <CTimer::SimpleMsDelay(unsigned int)>
    f21c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f220:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f224:	0afffff9 	beq	f210 <CBcmMailBox::Flush()+0x14>
    f228:	e8bd8010 	pop	{r4, pc}
    f22c:	2000b000 	.word	0x2000b000

0000f230 <CBcmMailBox::Read()>:
    f230:	e590c000 	ldr	ip, [r0]
    f234:	e59f1024 	ldr	r1, [pc, #36]	; f260 <CBcmMailBox::Read()+0x30>
    f238:	e5913898 	ldr	r3, [r1, #2200]	; 0x898
    f23c:	e59f201c 	ldr	r2, [pc, #28]	; f260 <CBcmMailBox::Read()+0x30>
    f240:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f244:	1afffffb 	bne	f238 <CBcmMailBox::Read()+0x8>
    f248:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    f24c:	e200300f 	and	r3, r0, #15
    f250:	e15c0003 	cmp	ip, r3
    f254:	1afffff7 	bne	f238 <CBcmMailBox::Read()+0x8>
    f258:	e3c0000f 	bic	r0, r0, #15
    f25c:	e12fff1e 	bx	lr
    f260:	2000b000 	.word	0x2000b000

0000f264 <CBcmMailBox::Write(unsigned int)>:
    f264:	e92d4038 	push	{r3, r4, r5, lr}
    f268:	e1a05000 	mov	r5, r0
    f26c:	e1a04001 	mov	r4, r1
    f270:	e59f2034 	ldr	r2, [pc, #52]	; f2ac <CBcmMailBox::Write(unsigned int)+0x48>
    f274:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    f278:	e3530000 	cmp	r3, #0
    f27c:	bafffffc 	blt	f274 <CBcmMailBox::Write(unsigned int)+0x10>
    f280:	e314000f 	tst	r4, #15
    f284:	0a000003 	beq	f298 <CBcmMailBox::Write(unsigned int)+0x34>
    f288:	e59f0020 	ldr	r0, [pc, #32]	; f2b0 <CBcmMailBox::Write(unsigned int)+0x4c>
    f28c:	e59f1020 	ldr	r1, [pc, #32]	; f2b4 <CBcmMailBox::Write(unsigned int)+0x50>
    f290:	e3a0205a 	mov	r2, #90	; 0x5a
    f294:	ebfff4f6 	bl	c674 <assertion_failed>
    f298:	e5953000 	ldr	r3, [r5]
    f29c:	e59f2008 	ldr	r2, [pc, #8]	; f2ac <CBcmMailBox::Write(unsigned int)+0x48>
    f2a0:	e1841003 	orr	r1, r4, r3
    f2a4:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
    f2a8:	e8bd8038 	pop	{r3, r4, r5, pc}
    f2ac:	2000b000 	.word	0x2000b000
    f2b0:	00011d18 	.word	0x00011d18
    f2b4:	00011d2c 	.word	0x00011d2c

0000f2b8 <CBcmMailBox::WriteRead(unsigned int)>:
    f2b8:	e92d4070 	push	{r4, r5, r6, lr}
    f2bc:	e3a03000 	mov	r3, #0
    f2c0:	e1a05000 	mov	r5, r0
    f2c4:	e1a06001 	mov	r6, r1
    f2c8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f2cc:	e5903004 	ldr	r3, [r0, #4]
    f2d0:	e3530000 	cmp	r3, #0
    f2d4:	1a00001f 	bne	f358 <CBcmMailBox::WriteRead(unsigned int)+0xa0>
    f2d8:	e59f4080 	ldr	r4, [pc, #128]	; f360 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    f2dc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f2e0:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f2e4:	1a000005 	bne	f300 <CBcmMailBox::WriteRead(unsigned int)+0x48>
    f2e8:	e3a00014 	mov	r0, #20
    f2ec:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    f2f0:	ebffedfd 	bl	aaec <CTimer::SimpleMsDelay(unsigned int)>
    f2f4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    f2f8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f2fc:	0afffff9 	beq	f2e8 <CBcmMailBox::WriteRead(unsigned int)+0x30>
    f300:	e1a01006 	mov	r1, r6
    f304:	e1a00005 	mov	r0, r5
    f308:	ebffffd5 	bl	f264 <CBcmMailBox::Write(unsigned int)>
    f30c:	e5950000 	ldr	r0, [r5]
    f310:	e59f1048 	ldr	r1, [pc, #72]	; f360 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    f314:	e5913898 	ldr	r3, [r1, #2200]	; 0x898
    f318:	e59f2040 	ldr	r2, [pc, #64]	; f360 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    f31c:	e3130101 	tst	r3, #1073741824	; 0x40000000
    f320:	1afffffb 	bne	f314 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    f324:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    f328:	e203200f 	and	r2, r3, #15
    f32c:	e1520000 	cmp	r2, r0
    f330:	1afffff7 	bne	f314 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    f334:	e5952004 	ldr	r2, [r5, #4]
    f338:	e3c3400f 	bic	r4, r3, #15
    f33c:	e3520000 	cmp	r2, #0
    f340:	0a000000 	beq	f348 <CBcmMailBox::WriteRead(unsigned int)+0x90>
    f344:	ebffead1 	bl	9e90 <LeaveCritical>
    f348:	e3a03000 	mov	r3, #0
    f34c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f350:	e1a00004 	mov	r0, r4
    f354:	e8bd8070 	pop	{r4, r5, r6, pc}
    f358:	ebffeabd 	bl	9e54 <EnterCritical>
    f35c:	eaffffdd 	b	f2d8 <CBcmMailBox::WriteRead(unsigned int)+0x20>
    f360:	2000b000 	.word	0x2000b000

0000f364 <__aeabi_uidiv>:
    f364:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f368:	e3a02000 	mov	r2, #0
    f36c:	eb000287 	bl	fd90 <__Divide>
    f370:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f374 <__aeabi_uidivmod>:
    f374:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f378:	e24dd00c 	sub	sp, sp, #12
    f37c:	e28d2004 	add	r2, sp, #4
    f380:	eb000282 	bl	fd90 <__Divide>
    f384:	e59d1004 	ldr	r1, [sp, #4]
    f388:	e28dd00c 	add	sp, sp, #12
    f38c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f390 <__aeabi_idiv>:
    f390:	ea0002b3 	b	fe64 <__DivideInteger>

0000f394 <memset>:
    f394:	e3520000 	cmp	r2, #0
    f398:	012fff1e 	bxeq	lr
    f39c:	e1a03000 	mov	r3, r0
    f3a0:	e6ef1071 	uxtb	r1, r1
    f3a4:	e0802002 	add	r2, r0, r2
    f3a8:	e4c31001 	strb	r1, [r3], #1
    f3ac:	e1530002 	cmp	r3, r2
    f3b0:	1afffffc 	bne	f3a8 <memset+0x14>
    f3b4:	e12fff1e 	bx	lr

0000f3b8 <memcmp>:
    f3b8:	e3520000 	cmp	r2, #0
    f3bc:	0a00000e 	beq	f3fc <memcmp+0x44>
    f3c0:	e5d0c000 	ldrb	ip, [r0]
    f3c4:	e5d13000 	ldrb	r3, [r1]
    f3c8:	e15c0003 	cmp	ip, r3
    f3cc:	8a00000c 	bhi	f404 <memcmp+0x4c>
    f3d0:	3a00000d 	bcc	f40c <memcmp+0x54>
    f3d4:	e0802002 	add	r2, r0, r2
    f3d8:	e2800001 	add	r0, r0, #1
    f3dc:	ea000004 	b	f3f4 <memcmp+0x3c>
    f3e0:	e4d0c001 	ldrb	ip, [r0], #1
    f3e4:	e5f13001 	ldrb	r3, [r1, #1]!
    f3e8:	e15c0003 	cmp	ip, r3
    f3ec:	8a000004 	bhi	f404 <memcmp+0x4c>
    f3f0:	3a000005 	bcc	f40c <memcmp+0x54>
    f3f4:	e1500002 	cmp	r0, r2
    f3f8:	1afffff8 	bne	f3e0 <memcmp+0x28>
    f3fc:	e3a00000 	mov	r0, #0
    f400:	e12fff1e 	bx	lr
    f404:	e3a00001 	mov	r0, #1
    f408:	e12fff1e 	bx	lr
    f40c:	e3e00000 	mvn	r0, #0
    f410:	e12fff1e 	bx	lr

0000f414 <strlen>:
    f414:	e1d010d0 	ldrsb	r1, [r0]
    f418:	e2803001 	add	r3, r0, #1
    f41c:	e3510000 	cmp	r1, #0
    f420:	0a000003 	beq	f434 <strlen+0x20>
    f424:	e0601003 	rsb	r1, r0, r3
    f428:	e0d320d1 	ldrsb	r2, [r3], #1
    f42c:	e3520000 	cmp	r2, #0
    f430:	1afffffb 	bne	f424 <strlen+0x10>
    f434:	e1a00001 	mov	r0, r1
    f438:	e12fff1e 	bx	lr

0000f43c <strcmp>:
    f43c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f440:	e5d03000 	ldrb	r3, [r0]
    f444:	e5d12000 	ldrb	r2, [r1]
    f448:	e3530000 	cmp	r3, #0
    f44c:	0a000013 	beq	f4a0 <strcmp+0x64>
    f450:	e3520000 	cmp	r2, #0
    f454:	0a000011 	beq	f4a0 <strcmp+0x64>
    f458:	e6af2072 	sxtb	r2, r2
    f45c:	e6af3073 	sxtb	r3, r3
    f460:	e1520003 	cmp	r2, r3
    f464:	ba000014 	blt	f4bc <strcmp+0x80>
    f468:	da000007 	ble	f48c <strcmp+0x50>
    f46c:	ea000014 	b	f4c4 <strcmp+0x88>
    f470:	e5f12001 	ldrb	r2, [r1, #1]!
    f474:	e3520000 	cmp	r2, #0
    f478:	e6afe072 	sxtb	lr, r2
    f47c:	0a000007 	beq	f4a0 <strcmp+0x64>
    f480:	e15c000e 	cmp	ip, lr
    f484:	ca00000c 	bgt	f4bc <strcmp+0x80>
    f488:	ba00000d 	blt	f4c4 <strcmp+0x88>
    f48c:	e5f03001 	ldrb	r3, [r0, #1]!
    f490:	e3530000 	cmp	r3, #0
    f494:	e6afc073 	sxtb	ip, r3
    f498:	1afffff4 	bne	f470 <strcmp+0x34>
    f49c:	e5d12001 	ldrb	r2, [r1, #1]
    f4a0:	e6af2072 	sxtb	r2, r2
    f4a4:	e6af3073 	sxtb	r3, r3
    f4a8:	e1520003 	cmp	r2, r3
    f4ac:	ba000002 	blt	f4bc <strcmp+0x80>
    f4b0:	c3e00000 	mvngt	r0, #0
    f4b4:	d3a00000 	movle	r0, #0
    f4b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f4bc:	e3a00001 	mov	r0, #1
    f4c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f4c4:	e3e00000 	mvn	r0, #0
    f4c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f4cc <strcpy>:
    f4cc:	e5d13000 	ldrb	r3, [r1]
    f4d0:	e1a02000 	mov	r2, r0
    f4d4:	e3530000 	cmp	r3, #0
    f4d8:	0a000003 	beq	f4ec <strcpy+0x20>
    f4dc:	e4c23001 	strb	r3, [r2], #1
    f4e0:	e5f13001 	ldrb	r3, [r1, #1]!
    f4e4:	e3530000 	cmp	r3, #0
    f4e8:	1afffffb 	bne	f4dc <strcpy+0x10>
    f4ec:	e3a03000 	mov	r3, #0
    f4f0:	e5c23000 	strb	r3, [r2]
    f4f4:	e12fff1e 	bx	lr

0000f4f8 <strncpy>:
    f4f8:	e3520000 	cmp	r2, #0
    f4fc:	012fff1e 	bxeq	lr
    f500:	e5d13000 	ldrb	r3, [r1]
    f504:	e3530000 	cmp	r3, #0
    f508:	0a00000a 	beq	f538 <strncpy+0x40>
    f50c:	e0812002 	add	r2, r1, r2
    f510:	e1a0c000 	mov	ip, r0
    f514:	e2811001 	add	r1, r1, #1
    f518:	ea000002 	b	f528 <strncpy+0x30>
    f51c:	e4d13001 	ldrb	r3, [r1], #1
    f520:	e3530000 	cmp	r3, #0
    f524:	0a000004 	beq	f53c <strncpy+0x44>
    f528:	e1510002 	cmp	r1, r2
    f52c:	e4cc3001 	strb	r3, [ip], #1
    f530:	1afffff9 	bne	f51c <strncpy+0x24>
    f534:	e12fff1e 	bx	lr
    f538:	e1a0c000 	mov	ip, r0
    f53c:	e3a03000 	mov	r3, #0
    f540:	e5cc3000 	strb	r3, [ip]
    f544:	e12fff1e 	bx	lr

0000f548 <strcat>:
    f548:	e1d030d0 	ldrsb	r3, [r0]
    f54c:	e3530000 	cmp	r3, #0
    f550:	e1a03000 	mov	r3, r0
    f554:	0a000002 	beq	f564 <strcat+0x1c>
    f558:	e1f320d1 	ldrsb	r2, [r3, #1]!
    f55c:	e3520000 	cmp	r2, #0
    f560:	1afffffc 	bne	f558 <strcat+0x10>
    f564:	e5d12000 	ldrb	r2, [r1]
    f568:	e3520000 	cmp	r2, #0
    f56c:	0a000003 	beq	f580 <strcat+0x38>
    f570:	e4c32001 	strb	r2, [r3], #1
    f574:	e5f12001 	ldrb	r2, [r1, #1]!
    f578:	e3520000 	cmp	r2, #0
    f57c:	1afffffb 	bne	f570 <strcat+0x28>
    f580:	e3a02000 	mov	r2, #0
    f584:	e5c32000 	strb	r2, [r3]
    f588:	e12fff1e 	bx	lr

0000f58c <strchr>:
    f58c:	e5d03000 	ldrb	r3, [r0]
    f590:	e3530000 	cmp	r3, #0
    f594:	0a000009 	beq	f5c0 <strchr+0x34>
    f598:	e6af3073 	sxtb	r3, r3
    f59c:	e1530001 	cmp	r3, r1
    f5a0:	1a000002 	bne	f5b0 <strchr+0x24>
    f5a4:	ea000007 	b	f5c8 <strchr+0x3c>
    f5a8:	e1520001 	cmp	r2, r1
    f5ac:	012fff1e 	bxeq	lr
    f5b0:	e5f03001 	ldrb	r3, [r0, #1]!
    f5b4:	e3530000 	cmp	r3, #0
    f5b8:	e6af2073 	sxtb	r2, r3
    f5bc:	1afffff9 	bne	f5a8 <strchr+0x1c>
    f5c0:	e1a00003 	mov	r0, r3
    f5c4:	e12fff1e 	bx	lr
    f5c8:	e12fff1e 	bx	lr

0000f5cc <strtok_r>:
    f5cc:	e3500000 	cmp	r0, #0
    f5d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f5d4:	0a000031 	beq	f6a0 <strtok_r+0xd4>
    f5d8:	e5d05000 	ldrb	r5, [r0]
    f5dc:	e3550000 	cmp	r5, #0
    f5e0:	0a00002b 	beq	f694 <strtok_r+0xc8>
    f5e4:	e5d17000 	ldrb	r7, [r1]
    f5e8:	e6af6077 	sxtb	r6, r7
    f5ec:	e3570000 	cmp	r7, #0
    f5f0:	0a00000a 	beq	f620 <strtok_r+0x54>
    f5f4:	e6af4075 	sxtb	r4, r5
    f5f8:	e1560004 	cmp	r6, r4
    f5fc:	0a00001d 	beq	f678 <strtok_r+0xac>
    f600:	e1a0c001 	mov	ip, r1
    f604:	ea000001 	b	f610 <strtok_r+0x44>
    f608:	e15e0004 	cmp	lr, r4
    f60c:	0a000019 	beq	f678 <strtok_r+0xac>
    f610:	e5fc3001 	ldrb	r3, [ip, #1]!
    f614:	e3530000 	cmp	r3, #0
    f618:	e6afe073 	sxtb	lr, r3
    f61c:	1afffff9 	bne	f608 <strtok_r+0x3c>
    f620:	e3550000 	cmp	r5, #0
    f624:	0a00001a 	beq	f694 <strtok_r+0xc8>
    f628:	e1a06000 	mov	r6, r0
    f62c:	e6af8077 	sxtb	r8, r7
    f630:	e3570000 	cmp	r7, #0
    f634:	0a00000a 	beq	f664 <strtok_r+0x98>
    f638:	e6af4075 	sxtb	r4, r5
    f63c:	e1540008 	cmp	r4, r8
    f640:	0a00000e 	beq	f680 <strtok_r+0xb4>
    f644:	e1a0c001 	mov	ip, r1
    f648:	ea000001 	b	f654 <strtok_r+0x88>
    f64c:	e154000e 	cmp	r4, lr
    f650:	0a00000a 	beq	f680 <strtok_r+0xb4>
    f654:	e5fc3001 	ldrb	r3, [ip, #1]!
    f658:	e3530000 	cmp	r3, #0
    f65c:	e6afe073 	sxtb	lr, r3
    f660:	1afffff9 	bne	f64c <strtok_r+0x80>
    f664:	e5f65001 	ldrb	r5, [r6, #1]!
    f668:	e3550000 	cmp	r5, #0
    f66c:	1affffef 	bne	f630 <strtok_r+0x64>
    f670:	e5826000 	str	r6, [r2]
    f674:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f678:	e5f05001 	ldrb	r5, [r0, #1]!
    f67c:	eaffffda 	b	f5ec <strtok_r+0x20>
    f680:	e3a03000 	mov	r3, #0
    f684:	e2866001 	add	r6, r6, #1
    f688:	e5463001 	strb	r3, [r6, #-1]
    f68c:	e5826000 	str	r6, [r2]
    f690:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f694:	e3a00000 	mov	r0, #0
    f698:	e5820000 	str	r0, [r2]
    f69c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f6a0:	e5920000 	ldr	r0, [r2]
    f6a4:	e3500000 	cmp	r0, #0
    f6a8:	1affffca 	bne	f5d8 <strtok_r+0xc>
    f6ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000f6b0 <strtoul>:
    f6b0:	e3510000 	cmp	r1, #0
    f6b4:	e2423002 	sub	r3, r2, #2
    f6b8:	15810000 	strne	r0, [r1]
    f6bc:	e3520000 	cmp	r2, #0
    f6c0:	13530022 	cmpne	r3, #34	; 0x22
    f6c4:	8a000038 	bhi	f7ac <strtoul+0xfc>
    f6c8:	e92d4070 	push	{r4, r5, r6, lr}
    f6cc:	e5d03000 	ldrb	r3, [r0]
    f6d0:	e1a0c000 	mov	ip, r0
    f6d4:	e6afe073 	sxtb	lr, r3
    f6d8:	e35e0020 	cmp	lr, #32
    f6dc:	e2800001 	add	r0, r0, #1
    f6e0:	e2434009 	sub	r4, r3, #9
    f6e4:	0afffff8 	beq	f6cc <strtoul+0x1c>
    f6e8:	e3540004 	cmp	r4, #4
    f6ec:	e1a04003 	mov	r4, r3
    f6f0:	9afffff5 	bls	f6cc <strtoul+0x1c>
    f6f4:	e244402b 	sub	r4, r4, #43	; 0x2b
    f6f8:	e31400fd 	tst	r4, #253	; 0xfd
    f6fc:	e1a0400c 	mov	r4, ip
    f700:	024e502d 	subeq	r5, lr, #45	; 0x2d
    f704:	016f5f15 	clzeq	r5, r5
    f708:	05d43001 	ldrbeq	r3, [r4, #1]
    f70c:	13a05000 	movne	r5, #0
    f710:	e6af3073 	sxtb	r3, r3
    f714:	01a0c000 	moveq	ip, r0
    f718:	01a052a5 	lsreq	r5, r5, #5
    f71c:	e3530030 	cmp	r3, #48	; 0x30
    f720:	0a00002c 	beq	f7d8 <strtoul+0x128>
    f724:	e3520000 	cmp	r2, #0
    f728:	03a0200a 	moveq	r2, #10
    f72c:	e353002f 	cmp	r3, #47	; 0x2f
    f730:	da00003d 	ble	f82c <strtoul+0x17c>
    f734:	e3a06001 	mov	r6, #1
    f738:	e3a00000 	mov	r0, #0
    f73c:	e1a0e003 	mov	lr, r3
    f740:	ea000008 	b	f768 <strtoul+0xb8>
    f744:	e0243092 	mla	r4, r2, r0, r3
    f748:	e1540000 	cmp	r4, r0
    f74c:	3a000018 	bcc	f7b4 <strtoul+0x104>
    f750:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    f754:	e3a06000 	mov	r6, #0
    f758:	e353002f 	cmp	r3, #47	; 0x2f
    f75c:	e1a0e003 	mov	lr, r3
    f760:	da000018 	ble	f7c8 <strtoul+0x118>
    f764:	e1a00004 	mov	r0, r4
    f768:	e24ee061 	sub	lr, lr, #97	; 0x61
    f76c:	e35e0019 	cmp	lr, #25
    f770:	92433020 	subls	r3, r3, #32
    f774:	e3530040 	cmp	r3, #64	; 0x40
    f778:	c2433007 	subgt	r3, r3, #7
    f77c:	e2433030 	sub	r3, r3, #48	; 0x30
    f780:	e1530002 	cmp	r3, r2
    f784:	baffffee 	blt	f744 <strtoul+0x94>
    f788:	e3510000 	cmp	r1, #0
    f78c:	0a000000 	beq	f794 <strtoul+0xe4>
    f790:	e581c000 	str	ip, [r1]
    f794:	e3560000 	cmp	r6, #0
    f798:	18bd8070 	popne	{r4, r5, r6, pc}
    f79c:	e2653000 	rsb	r3, r5, #0
    f7a0:	e0200003 	eor	r0, r0, r3
    f7a4:	e0800005 	add	r0, r0, r5
    f7a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7ac:	e3a00000 	mov	r0, #0
    f7b0:	e12fff1e 	bx	lr
    f7b4:	e3510000 	cmp	r1, #0
    f7b8:	0a000019 	beq	f824 <strtoul+0x174>
    f7bc:	e581c000 	str	ip, [r1]
    f7c0:	e3e00000 	mvn	r0, #0
    f7c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7c8:	e3510000 	cmp	r1, #0
    f7cc:	e1a00004 	mov	r0, r4
    f7d0:	1affffee 	bne	f790 <strtoul+0xe0>
    f7d4:	eafffff0 	b	f79c <strtoul+0xec>
    f7d8:	e5dc3001 	ldrb	r3, [ip, #1]
    f7dc:	e28ce001 	add	lr, ip, #1
    f7e0:	e3c30020 	bic	r0, r3, #32
    f7e4:	e3500058 	cmp	r0, #88	; 0x58
    f7e8:	1a000006 	bne	f808 <strtoul+0x158>
    f7ec:	e3d23010 	bics	r3, r2, #16
    f7f0:	1a000009 	bne	f81c <strtoul+0x16c>
    f7f4:	e5dc3002 	ldrb	r3, [ip, #2]
    f7f8:	e3a02010 	mov	r2, #16
    f7fc:	e6af3073 	sxtb	r3, r3
    f800:	e28cc002 	add	ip, ip, #2
    f804:	eaffffc8 	b	f72c <strtoul+0x7c>
    f808:	e3520000 	cmp	r2, #0
    f80c:	e1a0c00e 	mov	ip, lr
    f810:	e6af3073 	sxtb	r3, r3
    f814:	03a02008 	moveq	r2, #8
    f818:	eaffffc3 	b	f72c <strtoul+0x7c>
    f81c:	e3a00000 	mov	r0, #0
    f820:	e8bd8070 	pop	{r4, r5, r6, pc}
    f824:	e3e00000 	mvn	r0, #0
    f828:	e8bd8070 	pop	{r4, r5, r6, pc}
    f82c:	e3510000 	cmp	r1, #0
    f830:	13a06001 	movne	r6, #1
    f834:	13a00000 	movne	r0, #0
    f838:	1affffd4 	bne	f790 <strtoul+0xe0>
    f83c:	e1a00001 	mov	r0, r1
    f840:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f844 <char2int>:
    f844:	e12fff1e 	bx	lr

0000f848 <sign>:
    f848:	e1a03fc0 	asr	r3, r0, #31
    f84c:	e3500000 	cmp	r0, #0
    f850:	01a00003 	moveq	r0, r3
    f854:	13830001 	orrne	r0, r3, #1
    f858:	e12fff1e 	bx	lr

0000f85c <abs>:
    f85c:	e1a03fc0 	asr	r3, r0, #31
    f860:	e3500000 	cmp	r0, #0
    f864:	13833001 	orrne	r3, r3, #1
    f868:	e0000093 	mul	r0, r3, r0
    f86c:	e12fff1e 	bx	lr

0000f870 <sqrt3>:
    f870:	ee103a10 	vmov	r3, s0
    f874:	e1a030c3 	asr	r3, r3, #1
    f878:	e283357f 	add	r3, r3, #532676608	; 0x1fc00000
    f87c:	ee073a10 	vmov	s14, r3
    f880:	eec06a07 	vdiv.f32	s13, s0, s14
    f884:	eddf7a0a 	vldr	s15, [pc, #40]	; f8b4 <sqrt3+0x44>
    f888:	ee377a26 	vadd.f32	s14, s14, s13
    f88c:	ee277a27 	vmul.f32	s14, s14, s15
    f890:	eec06a07 	vdiv.f32	s13, s0, s14
    f894:	ee377a26 	vadd.f32	s14, s14, s13
    f898:	ee677a27 	vmul.f32	s15, s14, s15
    f89c:	ee807a27 	vdiv.f32	s14, s0, s15
    f8a0:	ee777a87 	vadd.f32	s15, s15, s14
    f8a4:	ed9f7a03 	vldr	s14, [pc, #12]	; f8b8 <sqrt3+0x48>
    f8a8:	ee800a27 	vdiv.f32	s0, s0, s15
    f8ac:	ee070a87 	vmla.f32	s0, s15, s14
    f8b0:	e12fff1e 	bx	lr
    f8b4:	3f000000 	.word	0x3f000000
    f8b8:	3e800000 	.word	0x3e800000

0000f8bc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    f8bc:	e3a01000 	mov	r1, #0
    f8c0:	e3a02c01 	mov	r2, #256	; 0x100
    f8c4:	e92d4010 	push	{r4, lr}
    f8c8:	e1a04000 	mov	r4, r0
    f8cc:	e5903020 	ldr	r3, [r0, #32]
    f8d0:	e24dd010 	sub	sp, sp, #16
    f8d4:	e583100c 	str	r1, [r3, #12]
    f8d8:	e5832010 	str	r2, [r3, #16]
    f8dc:	e28d0008 	add	r0, sp, #8
    f8e0:	ebffe481 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    f8e4:	e59f3050 	ldr	r3, [pc, #80]	; f93c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x80>
    f8e8:	e5942020 	ldr	r2, [r4, #32]
    f8ec:	e28d0008 	add	r0, sp, #8
    f8f0:	e58d3000 	str	r3, [sp]
    f8f4:	e59f1044 	ldr	r1, [pc, #68]	; f940 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x84>
    f8f8:	e283300c 	add	r3, r3, #12
    f8fc:	ebffe4c2 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f900:	e3500000 	cmp	r0, #0
    f904:	e28d0008 	add	r0, sp, #8
    f908:	0a000003 	beq	f91c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x60>
    f90c:	e5943020 	ldr	r3, [r4, #32]
    f910:	e593300c 	ldr	r3, [r3, #12]
    f914:	e3530000 	cmp	r3, #0
    f918:	0a000003 	beq	f92c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x70>
    f91c:	ebffe478 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    f920:	e3a00000 	mov	r0, #0
    f924:	e28dd010 	add	sp, sp, #16
    f928:	e8bd8010 	pop	{r4, pc}
    f92c:	ebffe474 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    f930:	e3a00001 	mov	r0, #1
    f934:	e28dd010 	add	sp, sp, #16
    f938:	e8bd8010 	pop	{r4, pc}
    f93c:	00000408 	.word	0x00000408
    f940:	0004800b 	.word	0x0004800b

0000f944 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    f944:	e92d4030 	push	{r4, r5, lr}
    f948:	e3520000 	cmp	r2, #0
    f94c:	13510000 	cmpne	r1, #0
    f950:	e1a04000 	mov	r4, r0
    f954:	e3a05000 	mov	r5, #0
    f958:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f95c:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
    f960:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    f964:	e8840006 	stm	r4, {r1, r2}
    f968:	e5843010 	str	r3, [r4, #16]
    f96c:	e584c00c 	str	ip, [r4, #12]
    f970:	e5840008 	str	r0, [r4, #8]
    f974:	e5845014 	str	r5, [r4, #20]
    f978:	e5845018 	str	r5, [r4, #24]
    f97c:	e584501c 	str	r5, [r4, #28]
    f980:	e5845020 	str	r5, [r4, #32]
    f984:	1a000010 	bne	f9cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
    f988:	e28d000c 	add	r0, sp, #12
    f98c:	ebffe456 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    f990:	e58d5000 	str	r5, [sp]
    f994:	e28d000c 	add	r0, sp, #12
    f998:	e59f10d0 	ldr	r1, [pc, #208]	; fa70 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
    f99c:	e28d2014 	add	r2, sp, #20
    f9a0:	e3a03014 	mov	r3, #20
    f9a4:	ebffe498 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f9a8:	e1500005 	cmp	r0, r5
    f9ac:	1a000026 	bne	fa4c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x108>
    f9b0:	e3a02d0a 	mov	r2, #640	; 0x280
    f9b4:	e3a03e1e 	mov	r3, #480	; 0x1e0
    f9b8:	e884000c 	stm	r4, {r2, r3}
    f9bc:	e28d000c 	add	r0, sp, #12
    f9c0:	ebffe44f 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    f9c4:	e5940008 	ldr	r0, [r4, #8]
    f9c8:	e5943010 	ldr	r3, [r4, #16]
    f9cc:	e3500000 	cmp	r0, #0
    f9d0:	0a000019 	beq	fa3c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
    f9d4:	e594200c 	ldr	r2, [r4, #12]
    f9d8:	e3520000 	cmp	r2, #0
    f9dc:	0a000016 	beq	fa3c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
    f9e0:	e3530008 	cmp	r3, #8
    f9e4:	8a000007 	bhi	fa08 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc4>
    f9e8:	e59f0084 	ldr	r0, [pc, #132]	; fa74 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
    f9ec:	ebffe915 	bl	9e48 <operator new[](unsigned int)>
    f9f0:	e3a01000 	mov	r1, #0
    f9f4:	e5840020 	str	r0, [r4, #32]
    f9f8:	e3a02b01 	mov	r2, #1024	; 0x400
    f9fc:	e2800014 	add	r0, r0, #20
    fa00:	ebfffe63 	bl	f394 <memset>
    fa04:	e5943010 	ldr	r3, [r4, #16]
    fa08:	e5940008 	ldr	r0, [r4, #8]
    fa0c:	e59f2064 	ldr	r2, [pc, #100]	; fa78 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
    fa10:	e594e000 	ldr	lr, [r4]
    fa14:	e594c004 	ldr	ip, [r4, #4]
    fa18:	e594100c 	ldr	r1, [r4, #12]
    fa1c:	e5820020 	str	r0, [r2, #32]
    fa20:	e1a00004 	mov	r0, r4
    fa24:	e582e00c 	str	lr, [r2, #12]
    fa28:	e582c010 	str	ip, [r2, #16]
    fa2c:	e5821024 	str	r1, [r2, #36]	; 0x24
    fa30:	e5823034 	str	r3, [r2, #52]	; 0x34
    fa34:	e28dd02c 	add	sp, sp, #44	; 0x2c
    fa38:	e8bd8030 	pop	{r4, r5, pc}
    fa3c:	e8940006 	ldm	r4, {r1, r2}
    fa40:	e5841008 	str	r1, [r4, #8]
    fa44:	e584200c 	str	r2, [r4, #12]
    fa48:	eaffffe4 	b	f9e0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
    fa4c:	e59d2020 	ldr	r2, [sp, #32]
    fa50:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    fa54:	e2420d0a 	sub	r0, r2, #640	; 0x280
    fa58:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
    fa5c:	e3510f96 	cmp	r1, #600	; 0x258
    fa60:	93500c05 	cmpls	r0, #1280	; 0x500
    fa64:	e884000c 	stm	r4, {r2, r3}
    fa68:	9affffd3 	bls	f9bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
    fa6c:	eaffffcf 	b	f9b0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    fa70:	00040003 	.word	0x00040003
    fa74:	00000414 	.word	0x00000414
    fa78:	00012880 	.word	0x00012880

0000fa7c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    fa7c:	e92d4010 	push	{r4, lr}
    fa80:	e1a04000 	mov	r4, r0
    fa84:	e5900020 	ldr	r0, [r0, #32]
    fa88:	ebffe8ef 	bl	9e4c <operator delete(void*)>
    fa8c:	e1a00004 	mov	r0, r4
    fa90:	e8bd8010 	pop	{r4, pc}

0000fa94 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    fa94:	e5903010 	ldr	r3, [r0, #16]
    fa98:	e3530008 	cmp	r3, #8
    fa9c:	812fff1e 	bxhi	lr
    faa0:	e202301f 	and	r3, r2, #31
    faa4:	e1a0c5a2 	lsr	ip, r2, #11
    faa8:	e1a03983 	lsl	r3, r3, #19
    faac:	e5900020 	ldr	r0, [r0, #32]
    fab0:	e183318c 	orr	r3, r3, ip, lsl #3
    fab4:	e1a02282 	lsl	r2, r2, #5
    fab8:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    fabc:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    fac0:	e0801101 	add	r1, r0, r1, lsl #2
    fac4:	e1832002 	orr	r2, r3, r2
    fac8:	e5812014 	str	r2, [r1, #20]
    facc:	e12fff1e 	bx	lr

0000fad0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    fad0:	e5903010 	ldr	r3, [r0, #16]
    fad4:	e3530008 	cmp	r3, #8
    fad8:	95903020 	ldrls	r3, [r0, #32]
    fadc:	90831101 	addls	r1, r3, r1, lsl #2
    fae0:	95812014 	strls	r2, [r1, #20]
    fae4:	e12fff1e 	bx	lr

0000fae8 <CBcmFrameBuffer::Initialize()>:
    fae8:	e92d4070 	push	{r4, r5, r6, lr}
    faec:	e59f50b4 	ldr	r5, [pc, #180]	; fba8 <CBcmFrameBuffer::Initialize()+0xc0>
    faf0:	e24dd008 	sub	sp, sp, #8
    faf4:	e1a06000 	mov	r6, r0
    faf8:	e1a0000d 	mov	r0, sp
    fafc:	ebffe3fa 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    fb00:	e1a0000d 	mov	r0, sp
    fb04:	e1a01005 	mov	r1, r5
    fb08:	e3a02070 	mov	r2, #112	; 0x70
    fb0c:	ebffe401 	bl	8b18 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    fb10:	e2504000 	subs	r4, r0, #0
    fb14:	0a00001e 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb18:	e595400c 	ldr	r4, [r5, #12]
    fb1c:	e3540000 	cmp	r4, #0
    fb20:	0a00001b 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb24:	e5954010 	ldr	r4, [r5, #16]
    fb28:	e3540000 	cmp	r4, #0
    fb2c:	0a000018 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb30:	e5954020 	ldr	r4, [r5, #32]
    fb34:	e3540000 	cmp	r4, #0
    fb38:	0a000015 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb3c:	e5954024 	ldr	r4, [r5, #36]	; 0x24
    fb40:	e3540000 	cmp	r4, #0
    fb44:	0a000012 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb48:	e5954034 	ldr	r4, [r5, #52]	; 0x34
    fb4c:	e3540000 	cmp	r4, #0
    fb50:	0a00000f 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb54:	e5954058 	ldr	r4, [r5, #88]	; 0x58
    fb58:	e3540000 	cmp	r4, #0
    fb5c:	0a00000c 	beq	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb60:	e5961010 	ldr	r1, [r6, #16]
    fb64:	e595205c 	ldr	r2, [r5, #92]	; 0x5c
    fb68:	e595306c 	ldr	r3, [r5, #108]	; 0x6c
    fb6c:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    fb70:	e3510008 	cmp	r1, #8
    fb74:	e5864014 	str	r4, [r6, #20]
    fb78:	e5862018 	str	r2, [r6, #24]
    fb7c:	e586301c 	str	r3, [r6, #28]
    fb80:	83a04001 	movhi	r4, #1
    fb84:	8a000002 	bhi	fb94 <CBcmFrameBuffer::Initialize()+0xac>
    fb88:	e1a00006 	mov	r0, r6
    fb8c:	ebffff4a 	bl	f8bc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    fb90:	e1a04000 	mov	r4, r0
    fb94:	e1a0000d 	mov	r0, sp
    fb98:	ebffe3d9 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    fb9c:	e1a00004 	mov	r0, r4
    fba0:	e28dd008 	add	sp, sp, #8
    fba4:	e8bd8070 	pop	{r4, r5, r6, pc}
    fba8:	00012880 	.word	0x00012880

0000fbac <CBcmFrameBuffer::GetWidth() const>:
    fbac:	e5900000 	ldr	r0, [r0]
    fbb0:	e12fff1e 	bx	lr

0000fbb4 <CBcmFrameBuffer::GetHeight() const>:
    fbb4:	e5900004 	ldr	r0, [r0, #4]
    fbb8:	e12fff1e 	bx	lr

0000fbbc <CBcmFrameBuffer::GetVirtWidth() const>:
    fbbc:	e5900008 	ldr	r0, [r0, #8]
    fbc0:	e12fff1e 	bx	lr

0000fbc4 <CBcmFrameBuffer::GetVirtHeight() const>:
    fbc4:	e590000c 	ldr	r0, [r0, #12]
    fbc8:	e12fff1e 	bx	lr

0000fbcc <CBcmFrameBuffer::GetPitch() const>:
    fbcc:	e590001c 	ldr	r0, [r0, #28]
    fbd0:	e12fff1e 	bx	lr

0000fbd4 <CBcmFrameBuffer::GetDepth() const>:
    fbd4:	e5900010 	ldr	r0, [r0, #16]
    fbd8:	e12fff1e 	bx	lr

0000fbdc <CBcmFrameBuffer::GetBuffer() const>:
    fbdc:	e5900014 	ldr	r0, [r0, #20]
    fbe0:	e12fff1e 	bx	lr

0000fbe4 <CBcmFrameBuffer::GetSize() const>:
    fbe4:	e5900018 	ldr	r0, [r0, #24]
    fbe8:	e12fff1e 	bx	lr

0000fbec <CBcmFrameBuffer::UpdatePalette()>:
    fbec:	e5903010 	ldr	r3, [r0, #16]
    fbf0:	e3530008 	cmp	r3, #8
    fbf4:	9a000001 	bls	fc00 <CBcmFrameBuffer::UpdatePalette()+0x14>
    fbf8:	e3a00001 	mov	r0, #1
    fbfc:	e12fff1e 	bx	lr
    fc00:	eaffff2d 	b	f8bc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000fc04 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    fc04:	e92d4070 	push	{r4, r5, r6, lr}
    fc08:	e24dd028 	sub	sp, sp, #40	; 0x28
    fc0c:	e28d000c 	add	r0, sp, #12
    fc10:	e1a05001 	mov	r5, r1
    fc14:	e1a06002 	mov	r6, r2
    fc18:	ebffe3b3 	bl	8aec <CBcmPropertyTags::CBcmPropertyTags()>
    fc1c:	e3a03008 	mov	r3, #8
    fc20:	e28d000c 	add	r0, sp, #12
    fc24:	e58d3000 	str	r3, [sp]
    fc28:	e59f1048 	ldr	r1, [pc, #72]	; fc78 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>
    fc2c:	e28d2014 	add	r2, sp, #20
    fc30:	e3a03014 	mov	r3, #20
    fc34:	e58d5020 	str	r5, [sp, #32]
    fc38:	e58d6024 	str	r6, [sp, #36]	; 0x24
    fc3c:	ebffe3f2 	bl	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fc40:	e2504000 	subs	r4, r0, #0
    fc44:	0a000006 	beq	fc64 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
    fc48:	e59d3020 	ldr	r3, [sp, #32]
    fc4c:	e1530005 	cmp	r3, r5
    fc50:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    fc54:	13a04000 	movne	r4, #0
    fc58:	00644006 	rsbeq	r4, r4, r6
    fc5c:	016f4f14 	clzeq	r4, r4
    fc60:	01a042a4 	lsreq	r4, r4, #5
    fc64:	e28d000c 	add	r0, sp, #12
    fc68:	ebffe3a5 	bl	8b04 <CBcmPropertyTags::~CBcmPropertyTags()>
    fc6c:	e1a00004 	mov	r0, r4
    fc70:	e28dd028 	add	sp, sp, #40	; 0x28
    fc74:	e8bd8070 	pop	{r4, r5, r6, pc}
    fc78:	00048009 	.word	0x00048009

0000fc7c <CDevice::~CDevice()>:
    fc7c:	e12fff1e 	bx	lr

0000fc80 <CDevice::Read(void*, unsigned int)>:
    fc80:	e3e00000 	mvn	r0, #0
    fc84:	e12fff1e 	bx	lr

0000fc88 <CDevice::Write(void const*, unsigned int)>:
    fc88:	e3e00000 	mvn	r0, #0
    fc8c:	e12fff1e 	bx	lr

0000fc90 <CDevice::Seek(unsigned long long)>:
    fc90:	e3e00000 	mvn	r0, #0
    fc94:	e3e01000 	mvn	r1, #0
    fc98:	e12fff1e 	bx	lr

0000fc9c <CDevice::~CDevice()>:
    fc9c:	e92d4010 	push	{r4, lr}
    fca0:	e1a04000 	mov	r4, r0
    fca4:	ebffe868 	bl	9e4c <operator delete(void*)>
    fca8:	e1a00004 	mov	r0, r4
    fcac:	e8bd8010 	pop	{r4, pc}

0000fcb0 <CDevice::CDevice()>:
    fcb0:	e59f3004 	ldr	r3, [pc, #4]	; fcbc <CDevice::CDevice()+0xc>
    fcb4:	e5803000 	str	r3, [r0]
    fcb8:	e12fff1e 	bx	lr
    fcbc:	00011d48 	.word	0x00011d48

0000fcc0 <UndefinedInstructionStub>:
    fcc0:	e24ee004 	sub	lr, lr, #4
    fcc4:	e92d4000 	stmfd	sp!, {lr}
    fcc8:	e14fe000 	mrs	lr, SPSR
    fccc:	e92d4000 	stmfd	sp!, {lr}
    fcd0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    fcd4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fcd8:	e1a0100d 	mov	r1, sp
    fcdc:	f1020012 	cps	#18
    fce0:	e1a0200d 	mov	r2, sp
    fce4:	e1a0300e 	mov	r3, lr
    fce8:	f102001f 	cps	#31
    fcec:	e1a0d001 	mov	sp, r1
    fcf0:	e92d000c 	push	{r2, r3}
    fcf4:	e1a0100d 	mov	r1, sp
    fcf8:	e3a00001 	mov	r0, #1
    fcfc:	ea0000ea 	b	100ac <ExceptionHandler>

0000fd00 <PrefetchAbortStub>:
    fd00:	e24ee004 	sub	lr, lr, #4
    fd04:	e92d4000 	stmfd	sp!, {lr}
    fd08:	e14fe000 	mrs	lr, SPSR
    fd0c:	e92d4000 	stmfd	sp!, {lr}
    fd10:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    fd14:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fd18:	e1a0100d 	mov	r1, sp
    fd1c:	f1020012 	cps	#18
    fd20:	e1a0200d 	mov	r2, sp
    fd24:	e1a0300e 	mov	r3, lr
    fd28:	f102001f 	cps	#31
    fd2c:	e1a0d001 	mov	sp, r1
    fd30:	e92d000c 	push	{r2, r3}
    fd34:	e1a0100d 	mov	r1, sp
    fd38:	e3a00002 	mov	r0, #2
    fd3c:	ea0000da 	b	100ac <ExceptionHandler>

0000fd40 <DataAbortStub>:
    fd40:	e24ee008 	sub	lr, lr, #8
    fd44:	e92d4000 	stmfd	sp!, {lr}
    fd48:	e14fe000 	mrs	lr, SPSR
    fd4c:	e92d4000 	stmfd	sp!, {lr}
    fd50:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    fd54:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    fd58:	e1a0100d 	mov	r1, sp
    fd5c:	f1020012 	cps	#18
    fd60:	e1a0200d 	mov	r2, sp
    fd64:	e1a0300e 	mov	r3, lr
    fd68:	f102001f 	cps	#31
    fd6c:	e1a0d001 	mov	sp, r1
    fd70:	e92d000c 	push	{r2, r3}
    fd74:	e1a0100d 	mov	r1, sp
    fd78:	e3a00003 	mov	r0, #3
    fd7c:	ea0000ca 	b	100ac <ExceptionHandler>

0000fd80 <IRQStub>:
    fd80:	e24ee004 	sub	lr, lr, #4
    fd84:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    fd88:	ebfff85e 	bl	df08 <InterruptHandler>
    fd8c:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000fd90 <__Divide>:
    fd90:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    fd94:	e2514000 	subs	r4, r1, #0
    fd98:	e1a08000 	mov	r8, r0
    fd9c:	e1a09002 	mov	r9, r2
    fda0:	0a000021 	beq	fe2c <__Divide+0x9c>
    fda4:	e3a05000 	mov	r5, #0
    fda8:	e3a07000 	mov	r7, #0
    fdac:	e1550007 	cmp	r5, r7
    fdb0:	01540008 	cmpeq	r4, r8
    fdb4:	e1a06008 	mov	r6, r8
    fdb8:	2a000025 	bcs	fe54 <__Divide+0xc4>
    fdbc:	e3a01001 	mov	r1, #1
    fdc0:	ea000000 	b	fdc8 <__Divide+0x38>
    fdc4:	e1a01003 	mov	r1, r3
    fdc8:	e0944004 	adds	r4, r4, r4
    fdcc:	e0a55005 	adc	r5, r5, r5
    fdd0:	e1550007 	cmp	r5, r7
    fdd4:	01540006 	cmpeq	r4, r6
    fdd8:	e2813001 	add	r3, r1, #1
    fddc:	3afffff8 	bcc	fdc4 <__Divide+0x34>
    fde0:	e3530000 	cmp	r3, #0
    fde4:	0a000018 	beq	fe4c <__Divide+0xbc>
    fde8:	e3a00000 	mov	r0, #0
    fdec:	ea000001 	b	fdf8 <__Divide+0x68>
    fdf0:	e1a06008 	mov	r6, r8
    fdf4:	e3a07000 	mov	r7, #0
    fdf8:	e1570005 	cmp	r7, r5
    fdfc:	01560004 	cmpeq	r6, r4
    fe00:	e2411001 	sub	r1, r1, #1
    fe04:	e1a00080 	lsl	r0, r0, #1
    fe08:	23800001 	orrcs	r0, r0, #1
    fe0c:	20648008 	rsbcs	r8, r4, r8
    fe10:	e1b050a5 	lsrs	r5, r5, #1
    fe14:	e1a04064 	rrx	r4, r4
    fe18:	e3710001 	cmn	r1, #1
    fe1c:	1afffff3 	bne	fdf0 <__Divide+0x60>
    fe20:	e3590000 	cmp	r9, #0
    fe24:	15898000 	strne	r8, [r9]
    fe28:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    fe2c:	e59f1028 	ldr	r1, [pc, #40]	; fe5c <__Divide+0xcc>
    fe30:	e3a0201f 	mov	r2, #31
    fe34:	e59f0024 	ldr	r0, [pc, #36]	; fe60 <__Divide+0xd0>
    fe38:	ebfff20d 	bl	c674 <assertion_failed>
    fe3c:	eb00008c 	bl	10074 <CExceptionHandler::Get()>
    fe40:	e1a01004 	mov	r1, r4
    fe44:	eb000044 	bl	ff5c <CExceptionHandler::Throw(unsigned int)>
    fe48:	eaffffd5 	b	fda4 <__Divide+0x14>
    fe4c:	e1a00003 	mov	r0, r3
    fe50:	eafffff2 	b	fe20 <__Divide+0x90>
    fe54:	e3a01000 	mov	r1, #0
    fe58:	eaffffe2 	b	fde8 <__Divide+0x58>
    fe5c:	00011d60 	.word	0x00011d60
    fe60:	000117bc 	.word	0x000117bc

0000fe64 <__DivideInteger>:
    fe64:	e2502000 	subs	r2, r0, #0
    fe68:	e92d4008 	push	{r3, lr}
    fe6c:	ba000004 	blt	fe84 <__DivideInteger+0x20>
    fe70:	e3510000 	cmp	r1, #0
    fe74:	ba00000d 	blt	feb0 <__DivideInteger+0x4c>
    fe78:	e8bd4008 	pop	{r3, lr}
    fe7c:	e3a02000 	mov	r2, #0
    fe80:	eaffffc2 	b	fd90 <__Divide>
    fe84:	e3510000 	cmp	r1, #0
    fe88:	e2620000 	rsb	r0, r2, #0
    fe8c:	ba000003 	blt	fea0 <__DivideInteger+0x3c>
    fe90:	e3a02000 	mov	r2, #0
    fe94:	ebffffbd 	bl	fd90 <__Divide>
    fe98:	e2600000 	rsb	r0, r0, #0
    fe9c:	e8bd8008 	pop	{r3, pc}
    fea0:	e2611000 	rsb	r1, r1, #0
    fea4:	e3a02000 	mov	r2, #0
    fea8:	e8bd4008 	pop	{r3, lr}
    feac:	eaffffb7 	b	fd90 <__Divide>
    feb0:	e2611000 	rsb	r1, r1, #0
    feb4:	eafffff5 	b	fe90 <__DivideInteger+0x2c>

0000feb8 <CExceptionHandler::CExceptionHandler()>:
    feb8:	e92d4038 	push	{r3, r4, r5, lr}
    febc:	e59f506c 	ldr	r5, [pc, #108]	; ff30 <CExceptionHandler::CExceptionHandler()+0x78>
    fec0:	e1a04000 	mov	r4, r0
    fec4:	e5953000 	ldr	r3, [r5]
    fec8:	e3530000 	cmp	r3, #0
    fecc:	0a000003 	beq	fee0 <CExceptionHandler::CExceptionHandler()+0x28>
    fed0:	e59f005c 	ldr	r0, [pc, #92]	; ff34 <CExceptionHandler::CExceptionHandler()+0x7c>
    fed4:	e59f105c 	ldr	r1, [pc, #92]	; ff38 <CExceptionHandler::CExceptionHandler()+0x80>
    fed8:	e3a0202e 	mov	r2, #46	; 0x2e
    fedc:	ebfff1e4 	bl	c674 <assertion_failed>
    fee0:	e3a00000 	mov	r0, #0
    fee4:	e59f1050 	ldr	r1, [pc, #80]	; ff3c <CExceptionHandler::CExceptionHandler()+0x84>
    fee8:	e59f2050 	ldr	r2, [pc, #80]	; ff40 <CExceptionHandler::CExceptionHandler()+0x88>
    feec:	e59f3050 	ldr	r3, [pc, #80]	; ff44 <CExceptionHandler::CExceptionHandler()+0x8c>
    fef0:	e1a01141 	asr	r1, r1, #2
    fef4:	e1a02142 	asr	r2, r2, #2
    fef8:	e1a03143 	asr	r3, r3, #2
    fefc:	e2411002 	sub	r1, r1, #2
    ff00:	e2422002 	sub	r2, r2, #2
    ff04:	e2433002 	sub	r3, r3, #2
    ff08:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    ff0c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    ff10:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    ff14:	e5854000 	str	r4, [r5]
    ff18:	e5801004 	str	r1, [r0, #4]
    ff1c:	e580200c 	str	r2, [r0, #12]
    ff20:	e5803010 	str	r3, [r0, #16]
    ff24:	ebffe802 	bl	9f34 <SyncDataAndInstructionCache>
    ff28:	e1a00004 	mov	r0, r4
    ff2c:	e8bd8038 	pop	{r3, r4, r5, pc}
    ff30:	00012950 	.word	0x00012950
    ff34:	00010584 	.word	0x00010584
    ff38:	00011d78 	.word	0x00011d78
    ff3c:	0000fcbc 	.word	0x0000fcbc
    ff40:	0000fcf4 	.word	0x0000fcf4
    ff44:	0000fd30 	.word	0x0000fd30

0000ff48 <CExceptionHandler::~CExceptionHandler()>:
    ff48:	e3a02000 	mov	r2, #0
    ff4c:	e59f3004 	ldr	r3, [pc, #4]	; ff58 <CExceptionHandler::~CExceptionHandler()+0x10>
    ff50:	e5832000 	str	r2, [r3]
    ff54:	e12fff1e 	bx	lr
    ff58:	00012950 	.word	0x00012950

0000ff5c <CExceptionHandler::Throw(unsigned int)>:
    ff5c:	e92d4010 	push	{r4, lr}
    ff60:	e1a04001 	mov	r4, r1
    ff64:	e24dd008 	sub	sp, sp, #8
    ff68:	ebfff339 	bl	cc54 <CLogger::Get()>
    ff6c:	e59f301c 	ldr	r3, [pc, #28]	; ff90 <CExceptionHandler::Throw(unsigned int)+0x34>
    ff70:	e59f101c 	ldr	r1, [pc, #28]	; ff94 <CExceptionHandler::Throw(unsigned int)+0x38>
    ff74:	e7933104 	ldr	r3, [r3, r4, lsl #2]
    ff78:	e3a02000 	mov	r2, #0
    ff7c:	e58d3000 	str	r3, [sp]
    ff80:	e59f3010 	ldr	r3, [pc, #16]	; ff98 <CExceptionHandler::Throw(unsigned int)+0x3c>
    ff84:	ebfff411 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff88:	e28dd008 	add	sp, sp, #8
    ff8c:	e8bd8010 	pop	{r4, pc}
    ff90:	000128f0 	.word	0x000128f0
    ff94:	00011d70 	.word	0x00011d70
    ff98:	00011d90 	.word	0x00011d90

0000ff9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    ff9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ffa0:	e3510002 	cmp	r1, #2
    ffa4:	e24dd024 	sub	sp, sp, #36	; 0x24
    ffa8:	e1a05001 	mov	r5, r1
    ffac:	e1a04002 	mov	r4, r2
    ffb0:	0a000022 	beq	10040 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
    ffb4:	e3510003 	cmp	r1, #3
    ffb8:	0a00001d 	beq	10034 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x98>
    ffbc:	e3a08000 	mov	r8, #0
    ffc0:	e1a09008 	mov	r9, r8
    ffc4:	e3540000 	cmp	r4, #0
    ffc8:	0a00001f 	beq	1004c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
    ffcc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    ffd0:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    ffd4:	e203301f 	and	r3, r3, #31
    ffd8:	e3530012 	cmp	r3, #18
    ffdc:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    ffe0:	e59f1078 	ldr	r1, [pc, #120]	; 10060 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    ffe4:	089400c0 	ldmeq	r4, {r6, r7}
    ffe8:	e1a00006 	mov	r0, r6
    ffec:	ebfff22e 	bl	c8ac <debug_stacktrace(unsigned int const*, char const*)>
    fff0:	ebfff317 	bl	cc54 <CLogger::Get()>
    fff4:	e59f3068 	ldr	r3, [pc, #104]	; 10064 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
    fff8:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    fffc:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   10000:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   10004:	e88d0006 	stm	sp, {r1, r2}
   10008:	e58d3018 	str	r3, [sp, #24]
   1000c:	e58d9008 	str	r9, [sp, #8]
   10010:	e58d800c 	str	r8, [sp, #12]
   10014:	e58d6010 	str	r6, [sp, #16]
   10018:	e58d7014 	str	r7, [sp, #20]
   1001c:	e59f103c 	ldr	r1, [pc, #60]	; 10060 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   10020:	e3a02000 	mov	r2, #0
   10024:	e59f303c 	ldr	r3, [pc, #60]	; 10068 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   10028:	ebfff3e8 	bl	cfd0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1002c:	e28dd024 	add	sp, sp, #36	; 0x24
   10030:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10034:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   10038:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   1003c:	eaffffe0 	b	ffc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   10040:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   10044:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   10048:	eaffffdd 	b	ffc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   1004c:	e59f0018 	ldr	r0, [pc, #24]	; 1006c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
   10050:	e59f1018 	ldr	r1, [pc, #24]	; 10070 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd4>
   10054:	e3a02067 	mov	r2, #103	; 0x67
   10058:	ebfff185 	bl	c674 <assertion_failed>
   1005c:	eaffffda 	b	ffcc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   10060:	00011d70 	.word	0x00011d70
   10064:	000128f0 	.word	0x000128f0
   10068:	00011dac 	.word	0x00011dac
   1006c:	00011da0 	.word	0x00011da0
   10070:	00011d78 	.word	0x00011d78

00010074 <CExceptionHandler::Get()>:
   10074:	e92d4010 	push	{r4, lr}
   10078:	e59f4020 	ldr	r4, [pc, #32]	; 100a0 <CExceptionHandler::Get()+0x2c>
   1007c:	e5940000 	ldr	r0, [r4]
   10080:	e3500000 	cmp	r0, #0
   10084:	18bd8010 	popne	{r4, pc}
   10088:	e59f0014 	ldr	r0, [pc, #20]	; 100a4 <CExceptionHandler::Get()+0x30>
   1008c:	e59f1014 	ldr	r1, [pc, #20]	; 100a8 <CExceptionHandler::Get()+0x34>
   10090:	e3a0207e 	mov	r2, #126	; 0x7e
   10094:	ebfff176 	bl	c674 <assertion_failed>
   10098:	e5940000 	ldr	r0, [r4]
   1009c:	e8bd8010 	pop	{r4, pc}
   100a0:	00012950 	.word	0x00012950
   100a4:	0001069c 	.word	0x0001069c
   100a8:	00011d78 	.word	0x00011d78

000100ac <ExceptionHandler>:
   100ac:	e92d4038 	push	{r3, r4, r5, lr}
   100b0:	e1a05000 	mov	r5, r0
   100b4:	e1a04001 	mov	r4, r1
   100b8:	e3a03000 	mov	r3, #0
   100bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   100c0:	ebffffeb 	bl	10074 <CExceptionHandler::Get()>
   100c4:	e1a01005 	mov	r1, r5
   100c8:	e1a02004 	mov	r2, r4
   100cc:	e8bd4038 	pop	{r3, r4, r5, lr}
   100d0:	eaffffb1 	b	ff9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
